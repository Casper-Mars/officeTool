//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package diagram

import (
	_a "encoding/xml"
	_ef "fmt"
	_c "github.com/Casper-Mars/officeTool"
	_fd "github.com/Casper-Mars/officeTool/schema/soo/dml"
	_f "strconv"
)

func (_eeaa *CT_DiagramDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cdega:
	for {
		_daaga, _ccg := d.Token()
		if _ccg != nil {
			return _ccg
		}
		switch _fefd := _daaga.(type) {
		case _a.StartElement:
			switch _fefd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_acfb := NewCT_DiagramDefinitionHeader()
				if _adab := d.DecodeElement(_acfb, &_fefd); _adab != nil {
					return _adab
				}
				_eeaa.LayoutDefHdr = append(_eeaa.LayoutDefHdr, _acfb)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074 \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065r\u004c\u0073t\u0020%\u0076", _fefd.Name)
				if _ggga := d.Skip(); _ggga != nil {
					return _ggga
				}
			}
		case _a.EndElement:
			break _cdega
		case _a.CharData:
		}
	}
	return nil
}

func (_cfbec *ST_FunctionType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cfbec = 0
	case "\u0063\u006e\u0074":
		*_cfbec = 1
	case "\u0070\u006f\u0073":
		*_cfbec = 2
	case "\u0072\u0065\u0076\u0050\u006f\u0073":
		*_cfbec = 3
	case "\u0070o\u0073\u0045\u0076\u0065\u006e":
		*_cfbec = 4
	case "\u0070\u006f\u0073\u004f\u0064\u0064":
		*_cfbec = 5
	case "\u0076\u0061\u0072":
		*_cfbec = 6
	case "\u0064\u0065\u0070t\u0068":
		*_cfbec = 7
	case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
		*_cfbec = 8
	}
	return nil
}

// Validate validates the CT_TextProps and its children
func (_gefeb *CT_TextProps) Validate() error {
	return _gefeb.ValidateWithPath("\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073")
}

func (_gbbe ST_TextAnchorVertical) ValidateWithPath(path string) error {
	switch _gbbe {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbbe))
	}
	return nil
}

func (_cbaef ST_DiagramHorizontalAlignment) String() string {
	switch _cbaef {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

func (_ffab ST_VariableType) String() string {
	switch _ffab {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case 3:
		return "\u0063\u0068\u004da\u0078"
	case 4:
		return "\u0063\u0068\u0050\u0072\u0065\u0066"
	case 5:
		return "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case 6:
		return "\u0064\u0069\u0072"
	case 7:
		return "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case 8:
		return "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case 9:
		return "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case 10:
		return "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return ""
}

func NewCT_DiagramDefinitionHeaderLst() *CT_DiagramDefinitionHeaderLst {
	_eaaa := &CT_DiagramDefinitionHeaderLst{}
	return _eaaa
}

// ValidateWithPath validates the CT_SDCategories and its children, prefixing error messages with path
func (_bgcc *CT_SDCategories) ValidateWithPath(path string) error {
	for _ecdg, _acgd := range _bgcc.Cat {
		if _cfdf := _acgd.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _ecdg)); _cfdf != nil {
			return _cfdf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_HierBranchStyle and its children, prefixing error messages with path
func (_adabc *CT_HierBranchStyle) ValidateWithPath(path string) error {
	if _edbfc := _adabc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _edbfc != nil {
		return _edbfc
	}
	return nil
}

func NewCT_Category() *CT_Category { _bbf := &CT_Category{}; return _bbf }

func (_fdec *CT_Description) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cadg := range start.Attr {
		if _cadg.Name.Local == "\u006c\u0061\u006e\u0067" {
			_bgab, _bdfd := _cadg.Value, error(nil)
			if _bdfd != nil {
				return _bdfd
			}
			_fdec.LangAttr = &_bgab
			continue
		}
		if _cadg.Name.Local == "\u0076\u0061\u006c" {
			_ebebg, _afda := _cadg.Value, error(nil)
			if _afda != nil {
				return _afda
			}
			_fdec.ValAttr = _ebebg
			continue
		}
	}
	for {
		_gaae, _facb := d.Token()
		if _facb != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fD\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _facb)
		}
		if _badc, _abd := _gaae.(_a.EndElement); _abd && _badc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ddgcd *CT_Rules) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ddgcd.Rule != nil {
		_gggf := _a.StartElement{Name: _a.Name{Local: "\u0072\u0075\u006c\u0065"}}
		for _, _acfa := range _ddgcd.Rule {
			e.EncodeElement(_acfa, _gggf)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_Pt struct {
	ModelIdAttr ST_ModelId
	TypeAttr    ST_PtType
	CxnIdAttr   *ST_ModelId
	PrSet       *CT_ElemPropSet
	SpPr        *_fd.CT_ShapeProperties
	T           *_fd.CT_TextBody
	ExtLst      *_fd.CT_OfficeArtExtensionList
}

func (_gdcac ST_DiagramHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gdcac.String(), start)
}

func (_afdgb ST_BendPoint) ValidateWithPath(path string) error {
	switch _afdgb {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afdgb))
	}
	return nil
}

type ST_ChildAlignment byte

func (_dfaa ST_AlgorithmType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dfaa.String(), start)
}

func (_dcgf *ST_ConstraintType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fafc, _fffe := d.Token()
	if _fffe != nil {
		return _fffe
	}
	if _eeggd, _bfdcf := _fafc.(_a.EndElement); _bfdcf && _eeggd.Name == start.Name {
		*_dcgf = 1
		return nil
	}
	if _eacdc, _ceade := _fafc.(_a.CharData); !_ceade {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fafc)
	} else {
		switch string(_eacdc) {
		case "":
			*_dcgf = 0
		case "\u006e\u006f\u006e\u0065":
			*_dcgf = 1
		case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
			*_dcgf = 2
		case "\u0062e\u0067\u004d\u0061\u0072\u0067":
			*_dcgf = 3
		case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
			*_dcgf = 4
		case "\u0062\u0065\u0067\u0050\u0061\u0064":
			*_dcgf = 5
		case "\u0062":
			*_dcgf = 6
		case "\u0062\u004d\u0061r\u0067":
			*_dcgf = 7
		case "\u0062\u004f\u0066\u0066":
			*_dcgf = 8
		case "\u0063\u0074\u0072\u0058":
			*_dcgf = 9
		case "\u0063t\u0072\u0058\u004f\u0066\u0066":
			*_dcgf = 10
		case "\u0063\u0074\u0072\u0059":
			*_dcgf = 11
		case "\u0063t\u0072\u0059\u004f\u0066\u0066":
			*_dcgf = 12
		case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
			*_dcgf = 13
		case "\u0064\u0069\u0061\u006d":
			*_dcgf = 14
		case "\u0065n\u0064\u004d\u0061\u0072\u0067":
			*_dcgf = 15
		case "\u0065\u006e\u0064\u0050\u0061\u0064":
			*_dcgf = 16
		case "\u0068":
			*_dcgf = 17
		case "\u0068\u0041\u0072\u0048":
			*_dcgf = 18
		case "\u0068\u004f\u0066\u0066":
			*_dcgf = 19
		case "\u006c":
			*_dcgf = 20
		case "\u006c\u004d\u0061r\u0067":
			*_dcgf = 21
		case "\u006c\u004f\u0066\u0066":
			*_dcgf = 22
		case "\u0072":
			*_dcgf = 23
		case "\u0072\u004d\u0061r\u0067":
			*_dcgf = 24
		case "\u0072\u004f\u0066\u0066":
			*_dcgf = 25
		case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
			*_dcgf = 26
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
			*_dcgf = 27
		case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
			*_dcgf = 28
		case "\u0073\u0069\u0062S\u0070":
			*_dcgf = 29
		case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
			*_dcgf = 30
		case "\u0073\u0070":
			*_dcgf = 31
		case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
			*_dcgf = 32
		case "\u0074":
			*_dcgf = 33
		case "\u0074\u004d\u0061r\u0067":
			*_dcgf = 34
		case "\u0074\u004f\u0066\u0066":
			*_dcgf = 35
		case "\u0075\u0073\u0065r\u0041":
			*_dcgf = 36
		case "\u0075\u0073\u0065r\u0042":
			*_dcgf = 37
		case "\u0075\u0073\u0065r\u0043":
			*_dcgf = 38
		case "\u0075\u0073\u0065r\u0044":
			*_dcgf = 39
		case "\u0075\u0073\u0065r\u0045":
			*_dcgf = 40
		case "\u0075\u0073\u0065r\u0046":
			*_dcgf = 41
		case "\u0075\u0073\u0065r\u0047":
			*_dcgf = 42
		case "\u0075\u0073\u0065r\u0048":
			*_dcgf = 43
		case "\u0075\u0073\u0065r\u0049":
			*_dcgf = 44
		case "\u0075\u0073\u0065r\u004a":
			*_dcgf = 45
		case "\u0075\u0073\u0065r\u004b":
			*_dcgf = 46
		case "\u0075\u0073\u0065r\u004c":
			*_dcgf = 47
		case "\u0075\u0073\u0065r\u004d":
			*_dcgf = 48
		case "\u0075\u0073\u0065r\u004e":
			*_dcgf = 49
		case "\u0075\u0073\u0065r\u004f":
			*_dcgf = 50
		case "\u0075\u0073\u0065r\u0050":
			*_dcgf = 51
		case "\u0075\u0073\u0065r\u0051":
			*_dcgf = 52
		case "\u0075\u0073\u0065r\u0052":
			*_dcgf = 53
		case "\u0075\u0073\u0065r\u0053":
			*_dcgf = 54
		case "\u0075\u0073\u0065r\u0054":
			*_dcgf = 55
		case "\u0075\u0073\u0065r\u0055":
			*_dcgf = 56
		case "\u0075\u0073\u0065r\u0056":
			*_dcgf = 57
		case "\u0075\u0073\u0065r\u0057":
			*_dcgf = 58
		case "\u0075\u0073\u0065r\u0058":
			*_dcgf = 59
		case "\u0075\u0073\u0065r\u0059":
			*_dcgf = 60
		case "\u0075\u0073\u0065r\u005a":
			*_dcgf = 61
		case "\u0077":
			*_dcgf = 62
		case "\u0077\u0041\u0072\u0048":
			*_dcgf = 63
		case "\u0077\u004f\u0066\u0066":
			*_dcgf = 64
		}
	}
	_fafc, _fffe = d.Token()
	if _fffe != nil {
		return _fffe
	}
	if _acbge, _eefe := _fafc.(_a.EndElement); _eefe && _acbge.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fafc)
}

func (_fgea ST_DiagramTextAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_abbga := _a.Attr{}
	_abbga.Name = name
	switch _fgea {
	case ST_DiagramTextAlignmentUnset:
		_abbga.Value = ""
	case ST_DiagramTextAlignmentL:
		_abbga.Value = "\u006c"
	case ST_DiagramTextAlignmentCtr:
		_abbga.Value = "\u0063\u0074\u0072"
	case ST_DiagramTextAlignmentR:
		_abbga.Value = "\u0072"
	}
	return _abbga, nil
}

// ValidateWithPath validates the CT_NumericRule and its children, prefixing error messages with path
func (_bab *CT_NumericRule) ValidateWithPath(path string) error {
	if _bab.ExtLst != nil {
		if _cbae := _bab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbae != nil {
			return _cbae
		}
	}
	if _cceg := _bab.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cceg != nil {
		return _cceg
	}
	if _eccf := _bab.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _eccf != nil {
		return _eccf
	}
	if _gaceg := _bab.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _gaceg != nil {
		return _gaceg
	}
	return nil
}

func (_eefa *ST_ParameterVal) Validate() error { return _eefa.ValidateWithPath("") }

func NewCT_Direction() *CT_Direction { _edgd := &CT_Direction{}; return _edgd }

// Validate validates the LayoutDefHdrLst and its children
func (_adbd *LayoutDefHdrLst) Validate() error {
	return _adbd.ValidateWithPath("\u004ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}

func (_becee ST_ConnectorRouting) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdbdc := _a.Attr{}
	_gdbdc.Name = name
	switch _becee {
	case ST_ConnectorRoutingUnset:
		_gdbdc.Value = ""
	case ST_ConnectorRoutingStra:
		_gdbdc.Value = "\u0073\u0074\u0072\u0061"
	case ST_ConnectorRoutingBend:
		_gdbdc.Value = "\u0062\u0065\u006e\u0064"
	case ST_ConnectorRoutingCurve:
		_gdbdc.Value = "\u0063\u0075\u0072v\u0065"
	case ST_ConnectorRoutingLongCurve:
		_gdbdc.Value = "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return _gdbdc, nil
}

func (_daege *ST_AnimOneStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fbegg, _cfag := d.Token()
	if _cfag != nil {
		return _cfag
	}
	if _cbgff, _gcedd := _fbegg.(_a.EndElement); _gcedd && _cbgff.Name == start.Name {
		*_daege = 1
		return nil
	}
	if _gdbe, _daaef := _fbegg.(_a.CharData); !_daaef {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbegg)
	} else {
		switch string(_gdbe) {
		case "":
			*_daege = 0
		case "\u006e\u006f\u006e\u0065":
			*_daege = 1
		case "\u006f\u006e\u0065":
			*_daege = 2
		case "\u0062\u0072\u0061\u006e\u0063\u0068":
			*_daege = 3
		}
	}
	_fbegg, _cfag = d.Token()
	if _cfag != nil {
		return _cfag
	}
	if _beccb, _fecc := _fbegg.(_a.EndElement); _fecc && _beccb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbegg)
}

// Validate validates the CT_HierBranchStyle and its children
func (_fbeaf *CT_HierBranchStyle) Validate() error {
	return _fbeaf.ValidateWithPath("\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
}

func (_gffc *CT_Category) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", _gffc.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _ef.Sprintf("\u0025\u0076", _gffc.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_ccba ST_FlowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ccba.String(), start)
}

func NewCT_TextProps() *CT_TextProps { _dbcg := &CT_TextProps{}; return _dbcg }

func (_aabdf ST_ConnectorPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cedbe := _a.Attr{}
	_cedbe.Name = name
	switch _aabdf {
	case ST_ConnectorPointUnset:
		_cedbe.Value = ""
	case ST_ConnectorPointAuto:
		_cedbe.Value = "\u0061\u0075\u0074\u006f"
	case ST_ConnectorPointBCtr:
		_cedbe.Value = "\u0062\u0043\u0074\u0072"
	case ST_ConnectorPointCtr:
		_cedbe.Value = "\u0063\u0074\u0072"
	case ST_ConnectorPointMidL:
		_cedbe.Value = "\u006d\u0069\u0064\u004c"
	case ST_ConnectorPointMidR:
		_cedbe.Value = "\u006d\u0069\u0064\u0052"
	case ST_ConnectorPointTCtr:
		_cedbe.Value = "\u0074\u0043\u0074\u0072"
	case ST_ConnectorPointBL:
		_cedbe.Value = "\u0062\u004c"
	case ST_ConnectorPointBR:
		_cedbe.Value = "\u0062\u0052"
	case ST_ConnectorPointTL:
		_cedbe.Value = "\u0074\u004c"
	case ST_ConnectorPointTR:
		_cedbe.Value = "\u0074\u0052"
	case ST_ConnectorPointRadial:
		_cedbe.Value = "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return _cedbe, nil
}

func NewCT_CTDescription() *CT_CTDescription { _cfbe := &CT_CTDescription{}; return _cfbe }

func NewCT_LayoutVariablePropertySet() *CT_LayoutVariablePropertySet {
	_abff := &CT_LayoutVariablePropertySet{}
	return _abff
}

func (_bcbeg *ST_TextAnchorHorizontal) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_acgbd, _ecfeb := d.Token()
	if _ecfeb != nil {
		return _ecfeb
	}
	if _bagg, _dbaf := _acgbd.(_a.EndElement); _dbaf && _bagg.Name == start.Name {
		*_bcbeg = 1
		return nil
	}
	if _bgaff, _bfaeb := _acgbd.(_a.CharData); !_bfaeb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acgbd)
	} else {
		switch string(_bgaff) {
		case "":
			*_bcbeg = 0
		case "\u006e\u006f\u006e\u0065":
			*_bcbeg = 1
		case "\u0063\u0074\u0072":
			*_bcbeg = 2
		}
	}
	_acgbd, _ecfeb = d.Token()
	if _ecfeb != nil {
		return _ecfeb
	}
	if _edbga, _acef := _acgbd.(_a.EndElement); _acef && _edbga.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acgbd)
}

func (_bcfffd *CT_SDCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gagd := range start.Attr {
		if _gagd.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gfgad, _fgba := _gagd.Value, error(nil)
			if _fgba != nil {
				return _fgba
			}
			_bcfffd.TypeAttr = _gfgad
			continue
		}
		if _gagd.Name.Local == "\u0070\u0072\u0069" {
			_edca, _ggde := _f.ParseUint(_gagd.Value, 10, 32)
			if _ggde != nil {
				return _ggde
			}
			_bcfffd.PriAttr = uint32(_edca)
			continue
		}
	}
	for {
		_abcd, _fdgf := d.Token()
		if _fdgf != nil {
			return _ef.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0053D\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _fdgf)
		}
		if _ddbf, _bbdb := _abcd.(_a.EndElement); _bbdb && _ddbf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fcab *CT_Categories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_gcee:
	for {
		_aabg, _dffd := d.Token()
		if _dffd != nil {
			return _dffd
		}
		switch _adbc := _aabg.(type) {
		case _a.StartElement:
			switch _adbc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_cbdb := NewCT_Category()
				if _ega := d.DecodeElement(_cbdb, &_adbc); _ega != nil {
					return _ega
				}
				_fcab.Cat = append(_fcab.Cat, _cbdb)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073 \u0025\u0076", _adbc.Name)
				if _gde := d.Skip(); _gde != nil {
					return _gde
				}
			}
		case _a.EndElement:
			break _gcee
		case _a.CharData:
		}
	}
	return nil
}

type ColorsDefHdrLst struct{ CT_ColorTransformHeaderLst }

func (_fgbea ST_BoolOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgbea.String(), start)
}

func (_gfbeg ST_ChildOrderType) String() string {
	switch _gfbeg {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074"
	}
	return ""
}

func (_afbb *CT_StyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gece := range start.Attr {
		if _gece.Name.Local == "\u006e\u0061\u006d\u0065" {
			_ggce, _dbdf := _gece.Value, error(nil)
			if _dbdf != nil {
				return _dbdf
			}
			_afbb.NameAttr = _ggce
			continue
		}
	}
_dbca:
	for {
		_fagad, _abdf := d.Token()
		if _abdf != nil {
			return _abdf
		}
		switch _edgc := _fagad.(type) {
		case _a.StartElement:
			switch _edgc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_afbb.Scene3d = _fd.NewCT_Scene3D()
				if _ageeb := d.DecodeElement(_afbb.Scene3d, &_edgc); _ageeb != nil {
					return _ageeb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0033\u0064"}:
				_afbb.Sp3d = _fd.NewCT_Shape3D()
				if _cffg := d.DecodeElement(_afbb.Sp3d, &_edgc); _cffg != nil {
					return _cffg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0050\u0072"}:
				_afbb.TxPr = NewCT_TextProps()
				if _bfggd := d.DecodeElement(_afbb.TxPr, &_edgc); _bfggd != nil {
					return _bfggd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_afbb.Style = _fd.NewCT_ShapeStyle()
				if _fcafa := d.DecodeElement(_afbb.Style, &_edgc); _fcafa != nil {
					return _fcafa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afbb.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _bcbeb := d.DecodeElement(_afbb.ExtLst, &_edgc); _bcbeb != nil {
					return _bcbeb
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c \u0025\u0076", _edgc.Name)
				if _baea := d.Skip(); _baea != nil {
					return _baea
				}
			}
		case _a.EndElement:
			break _dbca
		case _a.CharData:
		}
	}
	return nil
}

func (_abgce ST_LinearDirection) Validate() error { return _abgce.ValidateWithPath("") }

func (_aeafd ST_VerticalAlignment) Validate() error { return _aeafd.ValidateWithPath("") }

func NewCT_CTName() *CT_CTName { _baa := &CT_CTName{}; return _baa }

type AG_ConstraintAttributes struct {
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func (_aacfg *CT_When) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aacfg.FuncAttr = ST_FunctionType(1)
	_aacfg.OpAttr = ST_FunctionOperator(1)
	for _, _fdba := range start.Attr {
		if _fdba.Name.Local == "\u006e\u0061\u006d\u0065" {
			_gaed, _acgaa := _fdba.Value, error(nil)
			if _acgaa != nil {
				return _acgaa
			}
			_aacfg.NameAttr = &_gaed
			continue
		}
		if _fdba.Name.Local == "\u0061\u0072\u0067" {
			_bgbb, _dabbb := ParseUnionST_FunctionArgument(_fdba.Value)
			if _dabbb != nil {
				return _dabbb
			}
			_aacfg.ArgAttr = &_bgbb
			continue
		}
		if _fdba.Name.Local == "\u0076\u0061\u006c" {
			_bffd, _ffeeg := ParseUnionST_FunctionValue(_fdba.Value)
			if _ffeeg != nil {
				return _ffeeg
			}
			_aacfg.ValAttr = _bffd
			continue
		}
		if _fdba.Name.Local == "\u0066\u0075\u006e\u0063" {
			_aacfg.FuncAttr.UnmarshalXMLAttr(_fdba)
			continue
		}
		if _fdba.Name.Local == "\u006f\u0070" {
			_aacfg.OpAttr.UnmarshalXMLAttr(_fdba)
			continue
		}
		if _fdba.Name.Local == "\u0061\u0078\u0069\u0073" {
			_gbfd, _dbbg := ParseSliceST_AxisTypes(_fdba.Value)
			if _dbbg != nil {
				return _dbbg
			}
			_aacfg.AxisAttr = &_gbfd
			continue
		}
		if _fdba.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_fecbg, _agcc := ParseSliceST_ElementTypes(_fdba.Value)
			if _agcc != nil {
				return _agcc
			}
			_aacfg.PtTypeAttr = &_fecbg
			continue
		}
		if _fdba.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_bgde, _efbg := ParseSliceST_Booleans(_fdba.Value)
			if _efbg != nil {
				return _efbg
			}
			_aacfg.HideLastTransAttr = &_bgde
			continue
		}
		if _fdba.Name.Local == "\u0073\u0074" {
			_bbbcd, _ccdaec := ParseSliceST_Ints(_fdba.Value)
			if _ccdaec != nil {
				return _ccdaec
			}
			_aacfg.StAttr = &_bbbcd
			continue
		}
		if _fdba.Name.Local == "\u0063\u006e\u0074" {
			_cffb, _dggc := ParseSliceST_UnsignedInts(_fdba.Value)
			if _dggc != nil {
				return _dggc
			}
			_aacfg.CntAttr = &_cffb
			continue
		}
		if _fdba.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gfca, _cbbf := ParseSliceST_Ints(_fdba.Value)
			if _cbbf != nil {
				return _cbbf
			}
			_aacfg.StepAttr = &_gfca
			continue
		}
	}
_eeab:
	for {
		_cfcc, _ebed := d.Token()
		if _ebed != nil {
			return _ebed
		}
		switch _efbd := _cfcc.(type) {
		case _a.StartElement:
			switch _efbd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_gbgd := NewCT_Algorithm()
				if _aggc := d.DecodeElement(_gbgd, &_efbd); _aggc != nil {
					return _aggc
				}
				_aacfg.Alg = append(_aacfg.Alg, _gbgd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_gbfdb := NewCT_Shape()
				if _dgfc := d.DecodeElement(_gbfdb, &_efbd); _dgfc != nil {
					return _dgfc
				}
				_aacfg.Shape = append(_aacfg.Shape, _gbfdb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_afebe := NewCT_PresentationOf()
				if _fegff := d.DecodeElement(_afebe, &_efbd); _fegff != nil {
					return _fegff
				}
				_aacfg.PresOf = append(_aacfg.PresOf, _afebe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_fffd := NewCT_Constraints()
				if _cebe := d.DecodeElement(_fffd, &_efbd); _cebe != nil {
					return _cebe
				}
				_aacfg.ConstrLst = append(_aacfg.ConstrLst, _fffd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_decag := NewCT_Rules()
				if _ceffe := d.DecodeElement(_decag, &_efbd); _ceffe != nil {
					return _ceffe
				}
				_aacfg.RuleLst = append(_aacfg.RuleLst, _decag)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_afgcc := NewCT_ForEach()
				if _afcc := d.DecodeElement(_afgcc, &_efbd); _afcc != nil {
					return _afcc
				}
				_aacfg.ForEach = append(_aacfg.ForEach, _afgcc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_ceab := NewCT_LayoutNode()
				if _fdfae := d.DecodeElement(_ceab, &_efbd); _fdfae != nil {
					return _fdfae
				}
				_aacfg.LayoutNode = append(_aacfg.LayoutNode, _ceab)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_cbfe := NewCT_Choose()
				if _cagda := d.DecodeElement(_cbfe, &_efbd); _cagda != nil {
					return _cagda
				}
				_aacfg.Choose = append(_aacfg.Choose, _cbfe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_accc := _fd.NewCT_OfficeArtExtensionList()
				if _cdffe := d.DecodeElement(_accc, &_efbd); _cdffe != nil {
					return _cdffe
				}
				_aacfg.ExtLst = append(_aacfg.ExtLst, _accc)
			default:
				_c.Log("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0057\u0068\u0065\u006e\u0020\u0025\u0076", _efbd.Name)
				if _ffcb := d.Skip(); _ffcb != nil {
					return _ffcb
				}
			}
		case _a.EndElement:
			break _eeab
		case _a.CharData:
		}
	}
	return nil
}

func (_eade *CT_StyleDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _efdae := range start.Attr {
		if _efdae.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_febaec, _gcge := _efdae.Value, error(nil)
			if _gcge != nil {
				return _gcge
			}
			_eade.UniqueIdAttr = &_febaec
			continue
		}
		if _efdae.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cfgff, _eagf := _efdae.Value, error(nil)
			if _eagf != nil {
				return _eagf
			}
			_eade.MinVerAttr = &_cfgff
			continue
		}
	}
_dade:
	for {
		_baff, _bccd := d.Token()
		if _bccd != nil {
			return _bccd
		}
		switch _faeb := _baff.(type) {
		case _a.StartElement:
			switch _faeb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_bfae := NewCT_SDName()
				if _agdeg := d.DecodeElement(_bfae, &_faeb); _agdeg != nil {
					return _agdeg
				}
				_eade.Title = append(_eade.Title, _bfae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_efbb := NewCT_SDDescription()
				if _ecebd := d.DecodeElement(_efbb, &_faeb); _ecebd != nil {
					return _ecebd
				}
				_eade.Desc = append(_eade.Desc, _efbb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_eade.CatLst = NewCT_SDCategories()
				if _fdfbd := d.DecodeElement(_eade.CatLst, &_faeb); _fdfbd != nil {
					return _fdfbd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_eade.Scene3d = _fd.NewCT_Scene3D()
				if _ffdg := d.DecodeElement(_eade.Scene3d, &_faeb); _ffdg != nil {
					return _ffdg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_bafc := NewCT_StyleLabel()
				if _cgfb := d.DecodeElement(_bafc, &_faeb); _cgfb != nil {
					return _cgfb
				}
				_eade.StyleLbl = append(_eade.StyleLbl, _bafc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eade.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _eedfd := d.DecodeElement(_eade.ExtLst, &_faeb); _eedfd != nil {
					return _eedfd
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _faeb.Name)
				if _gdeef := d.Skip(); _gdeef != nil {
					return _gdeef
				}
			}
		case _a.EndElement:
			break _dade
		case _a.CharData:
		}
	}
	return nil
}

func (_aaaab ST_DiagramTextAlignment) ValidateWithPath(path string) error {
	switch _aaaab {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aaaab))
	}
	return nil
}

func (_aefd ST_AnimOneStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aefd.String(), start)
}

func (_ecfd ST_BoolOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_aeeeb := _a.Attr{}
	_aeeeb.Name = name
	switch _ecfd {
	case ST_BoolOperatorUnset:
		_aeeeb.Value = ""
	case ST_BoolOperatorNone:
		_aeeeb.Value = "\u006e\u006f\u006e\u0065"
	case ST_BoolOperatorEqu:
		_aeeeb.Value = "\u0065\u0071\u0075"
	case ST_BoolOperatorGte:
		_aeeeb.Value = "\u0067\u0074\u0065"
	case ST_BoolOperatorLte:
		_aeeeb.Value = "\u006c\u0074\u0065"
	}
	return _aeeeb, nil
}

// ValidateWithPath validates the CT_ResizeHandles and its children, prefixing error messages with path
func (_gdgd *CT_ResizeHandles) ValidateWithPath(path string) error {
	if _ddge := _gdgd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ddge != nil {
		return _ddge
	}
	return nil
}

type ST_AnimOneStr byte

func NewCT_CTCategories() *CT_CTCategories { _gfg := &CT_CTCategories{}; return _gfg }

type CT_AdjLst struct{ Adj []*CT_Adj }

func (_bdf *CT_AdjLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bdf.Adj != nil {
		_fgd := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a"}}
		for _, _fde := range _bdf.Adj {
			e.EncodeElement(_fde, _fgd)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_fbecd *ST_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebaeg, _bgcae := d.Token()
	if _bgcae != nil {
		return _bgcae
	}
	if _bddcb, _feeg := _ebaeg.(_a.EndElement); _feeg && _bddcb.Name == start.Name {
		*_fbecd = 1
		return nil
	}
	if _bgadg, _bdgg := _ebaeg.(_a.CharData); !_bdgg {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebaeg)
	} else {
		switch string(_bgadg) {
		case "":
			*_fbecd = 0
		case "\u006e\u006f\u0072\u006d":
			*_fbecd = 1
		case "\u0072\u0065\u0076":
			*_fbecd = 2
		}
	}
	_ebaeg, _bgcae = d.Token()
	if _bgcae != nil {
		return _bgcae
	}
	if _caea, _fgaad := _ebaeg.(_a.EndElement); _fgaad && _caea.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebaeg)
}

type ST_ConnectorRouting byte

const (
	ST_VariableTypeUnset         ST_VariableType = 0
	ST_VariableTypeNone          ST_VariableType = 1
	ST_VariableTypeOrgChart      ST_VariableType = 2
	ST_VariableTypeChMax         ST_VariableType = 3
	ST_VariableTypeChPref        ST_VariableType = 4
	ST_VariableTypeBulEnabled    ST_VariableType = 5
	ST_VariableTypeDir           ST_VariableType = 6
	ST_VariableTypeHierBranch    ST_VariableType = 7
	ST_VariableTypeAnimOne       ST_VariableType = 8
	ST_VariableTypeAnimLvl       ST_VariableType = 9
	ST_VariableTypeResizeHandles ST_VariableType = 10
)

func NewCT_NumericRule() *CT_NumericRule { _cgcdb := &CT_NumericRule{}; return _cgcdb }

func (_fdga *CT_SDName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fdga.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_fdga.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _fdga.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bcda ST_FunctionOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fceg := _a.Attr{}
	_fceg.Name = name
	switch _bcda {
	case ST_FunctionOperatorUnset:
		_fceg.Value = ""
	case ST_FunctionOperatorEqu:
		_fceg.Value = "\u0065\u0071\u0075"
	case ST_FunctionOperatorNeq:
		_fceg.Value = "\u006e\u0065\u0071"
	case ST_FunctionOperatorGt:
		_fceg.Value = "\u0067\u0074"
	case ST_FunctionOperatorLt:
		_fceg.Value = "\u006c\u0074"
	case ST_FunctionOperatorGte:
		_fceg.Value = "\u0067\u0074\u0065"
	case ST_FunctionOperatorLte:
		_fceg.Value = "\u006c\u0074\u0065"
	}
	return _fceg, nil
}

func (_cggca ST_CxnType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fdeg := _a.Attr{}
	_fdeg.Name = name
	switch _cggca {
	case ST_CxnTypeUnset:
		_fdeg.Value = ""
	case ST_CxnTypeParOf:
		_fdeg.Value = "\u0070\u0061\u0072O\u0066"
	case ST_CxnTypePresOf:
		_fdeg.Value = "\u0070\u0072\u0065\u0073\u004f\u0066"
	case ST_CxnTypePresParOf:
		_fdeg.Value = "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case ST_CxnTypeUnknownRelationship:
		_fdeg.Value = "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return _fdeg, nil
}

func (_efce *CT_DiagramDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _efce.LayoutDefHdr != nil {
		_bced := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _bcfff := range _efce.LayoutDefHdr {
			e.EncodeElement(_bcfff, _bced)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_StyleDefinitionHeader and its children
func (_beee *CT_StyleDefinitionHeader) Validate() error {
	return _beee.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072")
}

type CT_LayoutNode struct {
	NameAttr     *string
	StyleLblAttr *string
	ChOrderAttr  ST_ChildOrderType
	MoveWithAttr *string
	Alg          []*CT_Algorithm
	Shape        []*CT_Shape
	PresOf       []*CT_PresentationOf
	ConstrLst    []*CT_Constraints
	RuleLst      []*CT_Rules
	VarLst       []*CT_LayoutVariablePropertySet
	ForEach      []*CT_ForEach
	LayoutNode   []*CT_LayoutNode
	Choose       []*CT_Choose
	ExtLst       []*_fd.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_Constraints and its children, prefixing error messages with path
func (_dbbef *CT_Constraints) ValidateWithPath(path string) error {
	for _ddbg, _cabc := range _dbbef.Constr {
		if _ddc := _cabc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u005b\u0025\u0064\u005d", path, _ddbg)); _ddc != nil {
			return _ddc
		}
	}
	return nil
}

// Validate validates the CT_BulletEnabled and its children
func (_ddff *CT_BulletEnabled) Validate() error {
	return _ddff.ValidateWithPath("\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064")
}

func NewCT_SampleData() *CT_SampleData { _ffec := &CT_SampleData{}; return _ffec }

type CT_Choose struct {
	NameAttr *string
	If       []*CT_When
	Else     *CT_Otherwise
}

type CT_Cxn struct {
	ModelIdAttr    ST_ModelId
	TypeAttr       ST_CxnType
	SrcIdAttr      ST_ModelId
	DestIdAttr     ST_ModelId
	SrcOrdAttr     uint32
	DestOrdAttr    uint32
	ParTransIdAttr *ST_ModelId
	SibTransIdAttr *ST_ModelId
	PresIdAttr     *string
	ExtLst         *_fd.CT_OfficeArtExtensionList
}

func (_dcbge ST_PrSetCustVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dcbge.ST_Percentage != nil {
		e.EncodeToken(_a.CharData(*_dcbge.ST_Percentage))
	}
	if _dcbge.Int32 != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", *_dcbge.Int32)))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

func (_cgebc ST_HierBranchStyle) String() string {
	switch _cgebc {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0072"
	case 3:
		return "\u0068\u0061\u006e\u0067"
	case 4:
		return "\u0073\u0074\u0064"
	case 5:
		return "\u0069\u006e\u0069\u0074"
	}
	return ""
}

func NewAG_ConstraintAttributes() *AG_ConstraintAttributes {
	_fb := &AG_ConstraintAttributes{}
	return _fb
}

func (_ggeb *CT_Colors) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gdbc := range start.Attr {
		if _gdbc.Name.Local == "\u006d\u0065\u0074\u0068" {
			_ggeb.MethAttr.UnmarshalXMLAttr(_gdbc)
			continue
		}
		if _gdbc.Name.Local == "\u0068\u0075\u0065\u0044\u0069\u0072" {
			_ggeb.HueDirAttr.UnmarshalXMLAttr(_gdbc)
			continue
		}
	}
_bdff:
	for {
		_daab, _edce := d.Token()
		if _edce != nil {
			return _edce
		}
		switch _eeag := _daab.(type) {
		case _a.StartElement:
			switch _eeag.Name {
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u006f\u006co\u0072\u0073 \u0025\u0076", _eeag.Name)
				if _fcb := d.Skip(); _fcb != nil {
					return _fcb
				}
			}
		case _a.EndElement:
			break _bdff
		case _a.CharData:
		}
	}
	return nil
}

func (_bcgc *CT_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bcgc.ValAttr != ST_HierBranchStyleUnset {
		_beccg, _gafbf := _bcgc.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _gafbf != nil {
			return _gafbf
		}
		start.Attr = append(start.Attr, _beccg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_aeeeba ST_Breakpoint) String() string {
	switch _aeeeba {
	case 0:
		return ""
	case 1:
		return "\u0065\u006e\u0064\u0043\u006e\u0076"
	case 2:
		return "\u0062\u0061\u006c"
	case 3:
		return "\u0066\u0069\u0078e\u0064"
	}
	return ""
}

type StyleDef struct{ CT_StyleDefinition }

func (_af *AG_ConstraintAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bde := range start.Attr {
		if _bde.Name.Local == "\u0074\u0079\u0070\u0065" {
			_af.TypeAttr.UnmarshalXMLAttr(_bde)
			continue
		}
		if _bde.Name.Local == "\u0066\u006f\u0072" {
			_af.ForAttr.UnmarshalXMLAttr(_bde)
			continue
		}
		if _bde.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_ee, _ec := _bde.Value, error(nil)
			if _ec != nil {
				return _ec
			}
			_af.ForNameAttr = &_ee
			continue
		}
		if _bde.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_af.PtTypeAttr.UnmarshalXMLAttr(_bde)
			continue
		}
	}
	for {
		_eb, _ae := d.Token()
		if _ae != nil {
			return _ef.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0041\u0047\u005f\u0043\u006f\u006es\u0074\u0072\u0061\u0069\u006e\u0074\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073\u003a\u0020%\u0073", _ae)
		}
		if _gf, _de := _eb.(_a.EndElement); _de && _gf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ChildMax struct{ ValAttr *int32 }

// ValidateWithPath validates the LayoutDefHdrLst and its children, prefixing error messages with path
func (_agccb *LayoutDefHdrLst) ValidateWithPath(path string) error {
	if _efcd := _agccb.CT_DiagramDefinitionHeaderLst.ValidateWithPath(path); _efcd != nil {
		return _efcd
	}
	return nil
}

func (_bgdeg *ST_PtType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bgdeg = 0
	case "\u006e\u006f\u0064\u0065":
		*_bgdeg = 1
	case "\u0061\u0073\u0073\u0074":
		*_bgdeg = 2
	case "\u0064\u006f\u0063":
		*_bgdeg = 3
	case "\u0070\u0072\u0065\u0073":
		*_bgdeg = 4
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_bgdeg = 5
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_bgdeg = 6
	}
	return nil
}

// Validate validates the CT_StyleLabel and its children
func (_ffac *CT_StyleLabel) Validate() error {
	return _ffac.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}

// ValidateWithPath validates the StyleDefHdr and its children, prefixing error messages with path
func (_cdfb *StyleDefHdr) ValidateWithPath(path string) error {
	if _aggdb := _cdfb.CT_StyleDefinitionHeader.ValidateWithPath(path); _aggdb != nil {
		return _aggdb
	}
	return nil
}

// ValidateWithPath validates the CT_BulletEnabled and its children, prefixing error messages with path
func (_bdb *CT_BulletEnabled) ValidateWithPath(path string) error { return nil }

func (_adbgdb ST_DiagramHorizontalAlignment) Validate() error { return _adbgdb.ValidateWithPath("") }

type CT_Otherwise struct {
	NameAttr   *string
	Alg        []*CT_Algorithm
	Shape      []*CT_Shape
	PresOf     []*CT_PresentationOf
	ConstrLst  []*CT_Constraints
	RuleLst    []*CT_Rules
	ForEach    []*CT_ForEach
	LayoutNode []*CT_LayoutNode
	Choose     []*CT_Choose
	ExtLst     []*_fd.CT_OfficeArtExtensionList
}

// Validate validates the LayoutDef and its children
func (_gcdf *LayoutDef) Validate() error {
	return _gcdf.ValidateWithPath("\u004ca\u0079\u006f\u0075\u0074\u0044\u0065f")
}

func (_becca ST_VariableType) ValidateWithPath(path string) error {
	switch _becca {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_becca))
	}
	return nil
}

// Validate validates the CT_ResizeHandles and its children
func (_dcfe *CT_ResizeHandles) Validate() error {
	return _dcfe.ValidateWithPath("\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073")
}

type CT_NumericRule struct {
	ValAttr     *float64
	FactAttr    *float64
	MaxAttr     *float64
	ExtLst      *_fd.CT_OfficeArtExtensionList
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func (_ccdc *ST_ResizeHandlesStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dgge, _aeabf := d.Token()
	if _aeabf != nil {
		return _aeabf
	}
	if _cfcag, _fecdf := _dgge.(_a.EndElement); _fecdf && _cfcag.Name == start.Name {
		*_ccdc = 1
		return nil
	}
	if _ggdb, _baaf := _dgge.(_a.CharData); !_baaf {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgge)
	} else {
		switch string(_ggdb) {
		case "":
			*_ccdc = 0
		case "\u0065\u0078\u0061c\u0074":
			*_ccdc = 1
		case "\u0072\u0065\u006c":
			*_ccdc = 2
		}
	}
	_dgge, _aeabf = d.Token()
	if _aeabf != nil {
		return _aeabf
	}
	if _dbcab, _caedd := _dgge.(_a.EndElement); _caedd && _dbcab.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgge)
}

type ST_Direction byte

// ValidateWithPath validates the CT_CTDescription and its children, prefixing error messages with path
func (_dde *CT_CTDescription) ValidateWithPath(path string) error { return nil }

func (_gfdc ST_GrowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gfdc.String(), start)
}

func (_ebcef *ST_GrowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ebcef = 0
	case "\u0074\u004c":
		*_ebcef = 1
	case "\u0074\u0052":
		*_ebcef = 2
	case "\u0062\u004c":
		*_ebcef = 3
	case "\u0062\u0052":
		*_ebcef = 4
	}
	return nil
}

// Validate validates the CT_Rules and its children
func (_defa *CT_Rules) Validate() error {
	return _defa.ValidateWithPath("\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073")
}

func (_acgc ST_SecondaryLinearDirection) String() string {
	switch _acgc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u0072\u006fm\u004c"
	case 3:
		return "\u0066\u0072\u006fm\u0052"
	case 4:
		return "\u0066\u0072\u006fm\u0054"
	case 5:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}

// Validate validates the StyleDefHdrLst and its children
func (_bcacg *StyleDefHdrLst) Validate() error {
	return _bcacg.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074")
}

type ST_StartingElement byte

func NewCT_DataModel() *CT_DataModel {
	_dgca := &CT_DataModel{}
	_dgca.PtLst = NewCT_PtList()
	return _dgca
}

func ParseSliceST_Booleans(s string) (ST_Booleans, error) { return ST_Booleans{}, nil }

func NewCT_Name() *CT_Name { _adce := &CT_Name{}; return _adce }

func (_bdfdb *CT_PtList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_aaa:
	for {
		_dgdg, _ddbac := d.Token()
		if _ddbac != nil {
			return _ddbac
		}
		switch _cafdf := _dgdg.(type) {
		case _a.StartElement:
			switch _cafdf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074"}:
				_gfga := NewCT_Pt()
				if _beddg := d.DecodeElement(_gfga, &_cafdf); _beddg != nil {
					return _beddg
				}
				_bdfdb.Pt = append(_bdfdb.Pt, _gfga)
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0074\u004ci\u0073\u0074 \u0025\u0076", _cafdf.Name)
				if _agde := d.Skip(); _agde != nil {
					return _agde
				}
			}
		case _a.EndElement:
			break _aaa
		case _a.CharData:
		}
	}
	return nil
}

func (_ebfeb ST_ConnectorDimension) String() string {
	switch _ebfeb {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	case 3:
		return "\u0063\u0075\u0073\u0074"
	}
	return ""
}

const (
	ST_HierBranchStyleUnset ST_HierBranchStyle = 0
	ST_HierBranchStyleL     ST_HierBranchStyle = 1
	ST_HierBranchStyleR     ST_HierBranchStyle = 2
	ST_HierBranchStyleHang  ST_HierBranchStyle = 3
	ST_HierBranchStyleStd   ST_HierBranchStyle = 4
	ST_HierBranchStyleInit  ST_HierBranchStyle = 5
)

// ValidateWithPath validates the CT_CxnList and its children, prefixing error messages with path
func (_edbc *CT_CxnList) ValidateWithPath(path string) error {
	for _ccbf, _daag := range _edbc.Cxn {
		if _aad := _daag.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0078\u006e\u005b\u0025\u0064\u005d", path, _ccbf)); _aad != nil {
			return _aad
		}
	}
	return nil
}

func (_aabd *StyleDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"
	return _aabd.CT_StyleDefinitionHeader.MarshalXML(e, start)
}

const (
	ST_AnimOneStrUnset  ST_AnimOneStr = 0
	ST_AnimOneStrNone   ST_AnimOneStr = 1
	ST_AnimOneStrOne    ST_AnimOneStr = 2
	ST_AnimOneStrBranch ST_AnimOneStr = 3
)

// ValidateWithPath validates the CT_SDCategory and its children, prefixing error messages with path
func (_gefb *CT_SDCategory) ValidateWithPath(path string) error { return nil }

func (_efga ST_LinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efga.String(), start)
}

type CT_StyleDefinitionHeaderLst struct{ StyleDefHdr []*CT_StyleDefinitionHeader }

func (_gcfac ST_ChildOrderType) ValidateWithPath(path string) error {
	switch _gcfac {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gcfac))
	}
	return nil
}

func (_cabd *CT_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gfgde := range start.Attr {
		if _gfgde.Name.Local == "\u0076\u0061\u006c" {
			_cabd.ValAttr.UnmarshalXMLAttr(_gfgde)
			continue
		}
	}
	for {
		_ecae, _ecada := d.Token()
		if _ecada != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054_\u0048\u0069\u0065\u0072\u0042\u0072\u0061n\u0063\u0068\u0053\u0074\u0079\u006c\u0065\u003a\u0020\u0025\u0073", _ecada)
		}
		if _cdfd, _ddcg := _ecae.(_a.EndElement); _ddcg && _cdfd.Name == start.Name {
			break
		}
	}
	return nil
}

func (_dfgd ST_RotationPath) ValidateWithPath(path string) error {
	switch _dfgd {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfgd))
	}
	return nil
}

func (_edd *CT_Otherwise) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _adgaa := range start.Attr {
		if _adgaa.Name.Local == "\u006e\u0061\u006d\u0065" {
			_dggf, _dcbb := _adgaa.Value, error(nil)
			if _dcbb != nil {
				return _dcbb
			}
			_edd.NameAttr = &_dggf
			continue
		}
	}
_efca:
	for {
		_gegbd, _ggefc := d.Token()
		if _ggefc != nil {
			return _ggefc
		}
		switch _fdff := _gegbd.(type) {
		case _a.StartElement:
			switch _fdff.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_cdbc := NewCT_Algorithm()
				if _cbea := d.DecodeElement(_cdbc, &_fdff); _cbea != nil {
					return _cbea
				}
				_edd.Alg = append(_edd.Alg, _cdbc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ccag := NewCT_Shape()
				if _cfgbf := d.DecodeElement(_ccag, &_fdff); _cfgbf != nil {
					return _cfgbf
				}
				_edd.Shape = append(_edd.Shape, _ccag)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_ffbe := NewCT_PresentationOf()
				if _dbda := d.DecodeElement(_ffbe, &_fdff); _dbda != nil {
					return _dbda
				}
				_edd.PresOf = append(_edd.PresOf, _ffbe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_fbbb := NewCT_Constraints()
				if _efcab := d.DecodeElement(_fbbb, &_fdff); _efcab != nil {
					return _efcab
				}
				_edd.ConstrLst = append(_edd.ConstrLst, _fbbb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_febc := NewCT_Rules()
				if _aede := d.DecodeElement(_febc, &_fdff); _aede != nil {
					return _aede
				}
				_edd.RuleLst = append(_edd.RuleLst, _febc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_caaea := NewCT_ForEach()
				if _egaa := d.DecodeElement(_caaea, &_fdff); _egaa != nil {
					return _egaa
				}
				_edd.ForEach = append(_edd.ForEach, _caaea)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_afgc := NewCT_LayoutNode()
				if _abea := d.DecodeElement(_afgc, &_fdff); _abea != nil {
					return _abea
				}
				_edd.LayoutNode = append(_edd.LayoutNode, _afgc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_aeebg := NewCT_Choose()
				if _efcg := d.DecodeElement(_aeebg, &_fdff); _efcg != nil {
					return _efcg
				}
				_edd.Choose = append(_edd.Choose, _aeebg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dddf := _fd.NewCT_OfficeArtExtensionList()
				if _bafe := d.DecodeElement(_dddf, &_fdff); _bafe != nil {
					return _bafe
				}
				_edd.ExtLst = append(_edd.ExtLst, _dddf)
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_O\u0074\u0068e\u0072\u0077\u0069\u0073\u0065\u0020\u0025\u0076", _fdff.Name)
				if _cbcc := d.Skip(); _cbcc != nil {
					return _cbcc
				}
			}
		case _a.EndElement:
			break _efca
		case _a.CharData:
		}
	}
	return nil
}

func (_cafef ST_NodeHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cafef.String(), start)
}

func (_bcff *CT_ChildPref) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bcff.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_bcff.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_StyleDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

func (_bagd *CT_Name) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bagd.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_bagd.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _bagd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_AnimOne and its children
func (_fe *CT_AnimOne) Validate() error {
	return _fe.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065")
}

func (_cc *CT_Adj) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0069\u0064\u0078"}, Value: _ef.Sprintf("\u0025\u0076", _cc.IdxAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _cc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_When and its children, prefixing error messages with path
func (_ebgca *CT_When) ValidateWithPath(path string) error {
	if _ebgca.FuncAttr == ST_FunctionTypeUnset {
		return _ef.Errorf("\u0025\u0073\u002f\u0046\u0075\u006e\u0063\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbbdf := _ebgca.FuncAttr.ValidateWithPath(path + "\u002fF\u0075\u006e\u0063\u0041\u0074\u0074r"); _bbbdf != nil {
		return _bbbdf
	}
	if _ebgca.ArgAttr != nil {
		if _gbbc := _ebgca.ArgAttr.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0041\u0074\u0074\u0072"); _gbbc != nil {
			return _gbbc
		}
	}
	if _ebgca.OpAttr == ST_FunctionOperatorUnset {
		return _ef.Errorf("\u0025\u0073\u002f\u004f\u0070\u0041\u0074\u0074\u0072\u0020i\u0073\u0020\u0061\u0020\u006d\u0061\u006ed\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _dfgg := _ebgca.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _dfgg != nil {
		return _dfgg
	}
	if _bcaca := _ebgca.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bcaca != nil {
		return _bcaca
	}
	for _dccb, _dbde := range _ebgca.Alg {
		if _fafeg := _dbde.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _dccb)); _fafeg != nil {
			return _fafeg
		}
	}
	for _beagb, _gegc := range _ebgca.Shape {
		if _cabfa := _gegc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _beagb)); _cabfa != nil {
			return _cabfa
		}
	}
	for _ccfdc, _faed := range _ebgca.PresOf {
		if _fafac := _faed.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _ccfdc)); _fafac != nil {
			return _fafac
		}
	}
	for _eede, _ggbc := range _ebgca.ConstrLst {
		if _eegac := _ggbc.ValidateWithPath(_ef.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _eede)); _eegac != nil {
			return _eegac
		}
	}
	for _adbff, _abfce := range _ebgca.RuleLst {
		if _egbe := _abfce.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _adbff)); _egbe != nil {
			return _egbe
		}
	}
	for _dfgfa, _faad := range _ebgca.ForEach {
		if _dbee := _faad.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _dfgfa)); _dbee != nil {
			return _dbee
		}
	}
	for _bfag, _dfad := range _ebgca.LayoutNode {
		if _bbbcf := _dfad.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _bfag)); _bbbcf != nil {
			return _bbbcf
		}
	}
	for _fgaec, _bbacc := range _ebgca.Choose {
		if _eggg := _bbacc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _fgaec)); _eggg != nil {
			return _eggg
		}
	}
	for _cdffa, _bddg := range _ebgca.ExtLst {
		if _dbbga := _bddg.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _cdffa)); _dbbga != nil {
			return _dbbga
		}
	}
	return nil
}

func ParseUnionST_PrSetCustVal(s string) (ST_PrSetCustVal, error) { return ST_PrSetCustVal{}, nil }

func (_cfef *LayoutDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"
	return _cfef.CT_DiagramDefinitionHeader.MarshalXML(e, start)
}

type ST_Ints []int32

// Validate validates the CT_Shape and its children
func (_bfaa *CT_Shape) Validate() error {
	return _bfaa.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

func (_dea *CT_CTDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dea.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_dea.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _dea.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_dacec ST_PyramidAccentPosition) String() string {
	switch _dacec {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0066"
	case 2:
		return "\u0061\u0066\u0074"
	}
	return ""
}

type DataModel struct{ CT_DataModel }

func ParseUnionST_FunctionValue(s string) (ST_FunctionValue, error) { return ST_FunctionValue{}, nil }

// Validate validates the CT_ForEach and its children
func (_eceb *CT_ForEach) Validate() error {
	return _eceb.ValidateWithPath("\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068")
}

const (
	ST_ArrowheadStyleUnset ST_ArrowheadStyle = 0
	ST_ArrowheadStyleAuto  ST_ArrowheadStyle = 1
	ST_ArrowheadStyleArr   ST_ArrowheadStyle = 2
	ST_ArrowheadStyleNoArr ST_ArrowheadStyle = 3
)

func (_ebde ST_HierarchyAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bgadgb := _a.Attr{}
	_bgadgb.Name = name
	switch _ebde {
	case ST_HierarchyAlignmentUnset:
		_bgadgb.Value = ""
	case ST_HierarchyAlignmentTL:
		_bgadgb.Value = "\u0074\u004c"
	case ST_HierarchyAlignmentTR:
		_bgadgb.Value = "\u0074\u0052"
	case ST_HierarchyAlignmentTCtrCh:
		_bgadgb.Value = "\u0074\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentTCtrDes:
		_bgadgb.Value = "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentBL:
		_bgadgb.Value = "\u0062\u004c"
	case ST_HierarchyAlignmentBR:
		_bgadgb.Value = "\u0062\u0052"
	case ST_HierarchyAlignmentBCtrCh:
		_bgadgb.Value = "\u0062\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentBCtrDes:
		_bgadgb.Value = "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentLT:
		_bgadgb.Value = "\u006c\u0054"
	case ST_HierarchyAlignmentLB:
		_bgadgb.Value = "\u006c\u0042"
	case ST_HierarchyAlignmentLCtrCh:
		_bgadgb.Value = "\u006c\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentLCtrDes:
		_bgadgb.Value = "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentRT:
		_bgadgb.Value = "\u0072\u0054"
	case ST_HierarchyAlignmentRB:
		_bgadgb.Value = "\u0072\u0042"
	case ST_HierarchyAlignmentRCtrCh:
		_bgadgb.Value = "\u0072\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentRCtrDes:
		_bgadgb.Value = "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return _bgadgb, nil
}

func NewCT_LayoutNode() *CT_LayoutNode { _afea := &CT_LayoutNode{}; return _afea }

func (_caaae *ColorsDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_caaae.CT_ColorTransform = *NewCT_ColorTransform()
	for _, _fbbd := range start.Attr {
		if _fbbd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_aceg, _cbbb := _fbbd.Value, error(nil)
			if _cbbb != nil {
				return _cbbb
			}
			_caaae.UniqueIdAttr = &_aceg
			continue
		}
		if _fbbd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_febf, _beffc := _fbbd.Value, error(nil)
			if _beffc != nil {
				return _beffc
			}
			_caaae.MinVerAttr = &_febf
			continue
		}
	}
_aacc:
	for {
		_fbgc, _caef := d.Token()
		if _caef != nil {
			return _caef
		}
		switch _deagg := _fbgc.(type) {
		case _a.StartElement:
			switch _deagg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_abede := NewCT_CTName()
				if _begd := d.DecodeElement(_abede, &_deagg); _begd != nil {
					return _begd
				}
				_caaae.Title = append(_caaae.Title, _abede)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_egcef := NewCT_CTDescription()
				if _fbff := d.DecodeElement(_egcef, &_deagg); _fbff != nil {
					return _fbff
				}
				_caaae.Desc = append(_caaae.Desc, _egcef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_caaae.CatLst = NewCT_CTCategories()
				if _dbgg := d.DecodeElement(_caaae.CatLst, &_deagg); _dbgg != nil {
					return _dbgg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_bdfb := NewCT_CTStyleLabel()
				if _bbbdb := d.DecodeElement(_bdfb, &_deagg); _bbbdb != nil {
					return _bbbdb
				}
				_caaae.StyleLbl = append(_caaae.StyleLbl, _bdfb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_caaae.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fdfbe := d.DecodeElement(_caaae.ExtLst, &_deagg); _fdfbe != nil {
					return _fdfbe
				}
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066 \u0025\u0076", _deagg.Name)
				if _bgad := d.Skip(); _bgad != nil {
					return _bgad
				}
			}
		case _a.EndElement:
			break _aacc
		case _a.CharData:
		}
	}
	return nil
}

type ST_PyramidAccentPosition byte

func (_adfdaf ST_AxisType) ValidateWithPath(path string) error {
	switch _adfdaf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adfdaf))
	}
	return nil
}

func (_eacce ST_ArrowheadStyle) Validate() error { return _eacce.ValidateWithPath("") }

func (_dfgfb ST_NodeVerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dfgfb.String(), start)
}

func (_cacge ST_ConstraintRelationship) ValidateWithPath(path string) error {
	switch _cacge {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cacge))
	}
	return nil
}

func NewCT_PtList() *CT_PtList { _gbge := &CT_PtList{}; return _gbge }

func (_adbfc ST_LinearDirection) String() string {
	switch _adbfc {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u004c"
	case 2:
		return "\u0066\u0072\u006fm\u0052"
	case 3:
		return "\u0066\u0072\u006fm\u0054"
	case 4:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}

const (
	ST_ChildOrderTypeUnset ST_ChildOrderType = 0
	ST_ChildOrderTypeB     ST_ChildOrderType = 1
	ST_ChildOrderTypeT     ST_ChildOrderType = 2
)

func (_ceggc *ST_CenterShapeMapping) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ceggc = 0
	case "\u006e\u006f\u006e\u0065":
		*_ceggc = 1
	case "\u0066\u004e\u006fd\u0065":
		*_ceggc = 2
	}
	return nil
}

func (_acge *ST_HierarchyAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_acge = 0
	case "\u0074\u004c":
		*_acge = 1
	case "\u0074\u0052":
		*_acge = 2
	case "\u0074\u0043\u0074\u0072\u0043\u0068":
		*_acge = 3
	case "\u0074C\u0074\u0072\u0044\u0065\u0073":
		*_acge = 4
	case "\u0062\u004c":
		*_acge = 5
	case "\u0062\u0052":
		*_acge = 6
	case "\u0062\u0043\u0074\u0072\u0043\u0068":
		*_acge = 7
	case "\u0062C\u0074\u0072\u0044\u0065\u0073":
		*_acge = 8
	case "\u006c\u0054":
		*_acge = 9
	case "\u006c\u0042":
		*_acge = 10
	case "\u006c\u0043\u0074\u0072\u0043\u0068":
		*_acge = 11
	case "\u006cC\u0074\u0072\u0044\u0065\u0073":
		*_acge = 12
	case "\u0072\u0054":
		*_acge = 13
	case "\u0072\u0042":
		*_acge = 14
	case "\u0072\u0043\u0074\u0072\u0043\u0068":
		*_acge = 15
	case "\u0072C\u0074\u0072\u0044\u0065\u0073":
		*_acge = 16
	}
	return nil
}

func (_degbe *ColorsDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_degbe.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	for _, _fcafd := range start.Attr {
		if _fcafd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gedbe, _fedaac := _fcafd.Value, error(nil)
			if _fedaac != nil {
				return _fedaac
			}
			_degbe.UniqueIdAttr = _gedbe
			continue
		}
		if _fcafd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_gbede, _fcacc := _fcafd.Value, error(nil)
			if _fcacc != nil {
				return _fcacc
			}
			_degbe.MinVerAttr = &_gbede
			continue
		}
		if _fcafd.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_baae, _bgfe := _f.ParseInt(_fcafd.Value, 10, 32)
			if _bgfe != nil {
				return _bgfe
			}
			_dfed := int32(_baae)
			_degbe.ResIdAttr = &_dfed
			continue
		}
	}
_cdaa:
	for {
		_dbace, _agcd := d.Token()
		if _agcd != nil {
			return _agcd
		}
		switch _efbgb := _dbace.(type) {
		case _a.StartElement:
			switch _efbgb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_fffgg := NewCT_CTName()
				if _fceb := d.DecodeElement(_fffgg, &_efbgb); _fceb != nil {
					return _fceb
				}
				_degbe.Title = append(_degbe.Title, _fffgg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_dgaa := NewCT_CTDescription()
				if _dafdc := d.DecodeElement(_dgaa, &_efbgb); _dafdc != nil {
					return _dafdc
				}
				_degbe.Desc = append(_degbe.Desc, _dgaa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_degbe.CatLst = NewCT_CTCategories()
				if _cbgcd := d.DecodeElement(_degbe.CatLst, &_efbgb); _cbgcd != nil {
					return _cbgcd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_degbe.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fgfb := d.DecodeElement(_degbe.ExtLst, &_efbgb); _fgfb != nil {
					return _fgfb
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u006flo\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _efbgb.Name)
				if _abce := d.Skip(); _abce != nil {
					return _abce
				}
			}
		case _a.EndElement:
			break _cdaa
		case _a.CharData:
		}
	}
	return nil
}

func (_faac ST_ContinueDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_faac.String(), start)
}

// Validate validates the CT_Constraints and its children
func (_fgdf *CT_Constraints) Validate() error {
	return _fgdf.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073")
}

func (_cagag ST_AxisType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cceb := _a.Attr{}
	_cceb.Name = name
	switch _cagag {
	case ST_AxisTypeUnset:
		_cceb.Value = ""
	case ST_AxisTypeSelf:
		_cceb.Value = "\u0073\u0065\u006c\u0066"
	case ST_AxisTypeCh:
		_cceb.Value = "\u0063\u0068"
	case ST_AxisTypeDes:
		_cceb.Value = "\u0064\u0065\u0073"
	case ST_AxisTypeDesOrSelf:
		_cceb.Value = "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case ST_AxisTypePar:
		_cceb.Value = "\u0070\u0061\u0072"
	case ST_AxisTypeAncst:
		_cceb.Value = "\u0061\u006e\u0063s\u0074"
	case ST_AxisTypeAncstOrSelf:
		_cceb.Value = "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case ST_AxisTypeFollowSib:
		_cceb.Value = "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case ST_AxisTypePrecedSib:
		_cceb.Value = "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case ST_AxisTypeFollow:
		_cceb.Value = "\u0066\u006f\u006c\u006c\u006f\u0077"
	case ST_AxisTypePreced:
		_cceb.Value = "\u0070\u0072\u0065\u0063\u0065\u0064"
	case ST_AxisTypeRoot:
		_cceb.Value = "\u0072\u006f\u006f\u0074"
	case ST_AxisTypeNone:
		_cceb.Value = "\u006e\u006f\u006e\u0065"
	}
	return _cceb, nil
}

type CT_Description struct {
	LangAttr *string
	ValAttr  string
}

func NewCT_OrgChart() *CT_OrgChart { _cfba := &CT_OrgChart{}; return _cfba }

func (_abcg *CT_Cxn) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _abcg.ModelIdAttr)})
	if _abcg.TypeAttr != ST_CxnTypeUnset {
		_bbaf, _fabf := _abcg.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _fabf != nil {
			return _fabf
		}
		start.Attr = append(start.Attr, _bbaf)
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063I\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _abcg.SrcIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0073\u0074\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _abcg.DestIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063\u004f\u0072\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _abcg.SrcOrdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064e\u0073\u0074\u004f\u0072\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _abcg.DestOrdAttr)})
	if _abcg.ParTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_abcg.ParTransIdAttr)})
	}
	if _abcg.SibTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_abcg.SibTransIdAttr)})
	}
	if _abcg.PresIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_abcg.PresIdAttr)})
	}
	e.EncodeToken(start)
	if _abcg.ExtLst != nil {
		_dffa := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abcg.ExtLst, _dffa)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_ColorTransformHeaderLst struct{ ColorsDefHdr []*CT_ColorTransformHeader }

func (_gedg *CT_CxnList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ecdc:
	for {
		_ebc, _bfdg := d.Token()
		if _bfdg != nil {
			return _bfdg
		}
		switch _eebe := _ebc.(type) {
		case _a.StartElement:
			switch _eebe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e"}:
				_afc := NewCT_Cxn()
				if _gfcb := d.DecodeElement(_afc, &_eebe); _gfcb != nil {
					return _gfcb
				}
				_gedg.Cxn = append(_gedg.Cxn, _afc)
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fC\u0078\u006e\u004c\u0069\u0073\u0074\u0020\u0025\u0076", _eebe.Name)
				if _gcbb := d.Skip(); _gcbb != nil {
					return _gcbb
				}
			}
		case _a.EndElement:
			break _ecdc
		case _a.CharData:
		}
	}
	return nil
}

func (_efaed *ST_ConnectorPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_efaed = 0
	case "\u0061\u0075\u0074\u006f":
		*_efaed = 1
	case "\u0062\u0043\u0074\u0072":
		*_efaed = 2
	case "\u0063\u0074\u0072":
		*_efaed = 3
	case "\u006d\u0069\u0064\u004c":
		*_efaed = 4
	case "\u006d\u0069\u0064\u0052":
		*_efaed = 5
	case "\u0074\u0043\u0074\u0072":
		*_efaed = 6
	case "\u0062\u004c":
		*_efaed = 7
	case "\u0062\u0052":
		*_efaed = 8
	case "\u0074\u004c":
		*_efaed = 9
	case "\u0074\u0052":
		*_efaed = 10
	case "\u0072\u0061\u0064\u0069\u0061\u006c":
		*_efaed = 11
	}
	return nil
}

func (_cbgbef *ST_ContinueDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cbgbef = 0
	case "\u0072\u0065\u0076\u0044\u0069\u0072":
		*_cbgbef = 1
	case "\u0073a\u006d\u0065\u0044\u0069\u0072":
		*_cbgbef = 2
	}
	return nil
}

func (_aadfb ST_TextAnchorHorizontal) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bfgcd := _a.Attr{}
	_bfgcd.Name = name
	switch _aadfb {
	case ST_TextAnchorHorizontalUnset:
		_bfgcd.Value = ""
	case ST_TextAnchorHorizontalNone:
		_bfgcd.Value = "\u006e\u006f\u006e\u0065"
	case ST_TextAnchorHorizontalCtr:
		_bfgcd.Value = "\u0063\u0074\u0072"
	}
	return _bfgcd, nil
}

func (_ged *CT_BulletEnabled) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dbbc := range start.Attr {
		if _dbbc.Name.Local == "\u0076\u0061\u006c" {
			_abe, _bfea := _f.ParseBool(_dbbc.Value)
			if _bfea != nil {
				return _bfea
			}
			_ged.ValAttr = &_abe
			continue
		}
	}
	for {
		_ecfa, _dbe := d.Token()
		if _dbe != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0042\u0075\u006c\u006ce\u0074E\u006e\u0061\u0062\u006c\u0065\u0064\u003a \u0025\u0073", _dbe)
		}
		if _geb, _dg := _ecfa.(_a.EndElement); _dg && _geb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_AdjLst and its children
func (_fbc *CT_AdjLst) Validate() error {
	return _fbc.ValidateWithPath("\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t")
}

// Validate validates the CT_SDCategories and its children
func (_gbba *CT_SDCategories) Validate() error {
	return _gbba.ValidateWithPath("\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

type CT_Name struct {
	LangAttr *string
	ValAttr  string
}

func (_cbdgc ST_DiagramTextAlignment) String() string {
	switch _cbdgc {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}

func NewCT_DiagramDefinition() *CT_DiagramDefinition {
	_cbgb := &CT_DiagramDefinition{}
	_cbgb.LayoutNode = NewCT_LayoutNode()
	return _cbgb
}

// Validate validates the CT_DiagramDefinitionHeader and its children
func (_ggef *CT_DiagramDefinitionHeader) Validate() error {
	return _ggef.ValidateWithPath("\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072")
}

func (_ddbgf *CT_Cxn) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ebe := range start.Attr {
		if _ebe.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_edcge, _agbc := ParseUnionST_ModelId(_ebe.Value)
			if _agbc != nil {
				return _agbc
			}
			_ddbgf.ModelIdAttr = _edcge
			continue
		}
		if _ebe.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ddbgf.TypeAttr.UnmarshalXMLAttr(_ebe)
			continue
		}
		if _ebe.Name.Local == "\u0073\u0072\u0063I\u0064" {
			_dgf, _gabb := ParseUnionST_ModelId(_ebe.Value)
			if _gabb != nil {
				return _gabb
			}
			_ddbgf.SrcIdAttr = _dgf
			continue
		}
		if _ebe.Name.Local == "\u0064\u0065\u0073\u0074\u0049\u0064" {
			_fga, _adee := ParseUnionST_ModelId(_ebe.Value)
			if _adee != nil {
				return _adee
			}
			_ddbgf.DestIdAttr = _fga
			continue
		}
		if _ebe.Name.Local == "\u0073\u0072\u0063\u004f\u0072\u0064" {
			_cafg, _dbac := _f.ParseUint(_ebe.Value, 10, 32)
			if _dbac != nil {
				return _dbac
			}
			_ddbgf.SrcOrdAttr = uint32(_cafg)
			continue
		}
		if _ebe.Name.Local == "\u0064e\u0073\u0074\u004f\u0072\u0064" {
			_ecgb, _abb := _f.ParseUint(_ebe.Value, 10, 32)
			if _abb != nil {
				return _abb
			}
			_ddbgf.DestOrdAttr = uint32(_ecgb)
			continue
		}
		if _ebe.Name.Local == "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_dega, _gbed := ParseUnionST_ModelId(_ebe.Value)
			if _gbed != nil {
				return _gbed
			}
			_ddbgf.ParTransIdAttr = &_dega
			continue
		}
		if _ebe.Name.Local == "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_cfaa, _dac := ParseUnionST_ModelId(_ebe.Value)
			if _dac != nil {
				return _dac
			}
			_ddbgf.SibTransIdAttr = &_cfaa
			continue
		}
		if _ebe.Name.Local == "\u0070\u0072\u0065\u0073\u0049\u0064" {
			_fdcg, _bcdf := _ebe.Value, error(nil)
			if _bcdf != nil {
				return _bcdf
			}
			_ddbgf.PresIdAttr = &_fdcg
			continue
		}
	}
_debe:
	for {
		_bdca, _afeb := d.Token()
		if _afeb != nil {
			return _afeb
		}
		switch _acd := _bdca.(type) {
		case _a.StartElement:
			switch _acd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddbgf.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _effc := d.DecodeElement(_ddbgf.ExtLst, &_acd); _effc != nil {
					return _effc
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0078\u006e\u0020\u0025\u0076", _acd.Name)
				if _efaf := d.Skip(); _efaf != nil {
					return _efaf
				}
			}
		case _a.EndElement:
			break _debe
		case _a.CharData:
		}
	}
	return nil
}

// ST_ParameterVal is a union type
type ST_ParameterVal struct {
	ST_DiagramHorizontalAlignment ST_DiagramHorizontalAlignment
	ST_VerticalAlignment          ST_VerticalAlignment
	ST_ChildDirection             ST_ChildDirection
	ST_ChildAlignment             ST_ChildAlignment
	ST_SecondaryChildAlignment    ST_SecondaryChildAlignment
	ST_LinearDirection            ST_LinearDirection
	ST_SecondaryLinearDirection   ST_SecondaryLinearDirection
	ST_StartingElement            ST_StartingElement
	ST_BendPoint                  ST_BendPoint
	ST_ConnectorRouting           ST_ConnectorRouting
	ST_ArrowheadStyle             ST_ArrowheadStyle
	ST_ConnectorDimension         ST_ConnectorDimension
	ST_RotationPath               ST_RotationPath
	ST_CenterShapeMapping         ST_CenterShapeMapping
	ST_NodeHorizontalAlignment    ST_NodeHorizontalAlignment
	ST_NodeVerticalAlignment      ST_NodeVerticalAlignment
	ST_FallbackDimension          ST_FallbackDimension
	ST_TextDirection              ST_TextDirection
	ST_PyramidAccentPosition      ST_PyramidAccentPosition
	ST_PyramidAccentTextMargin    ST_PyramidAccentTextMargin
	ST_TextBlockDirection         ST_TextBlockDirection
	ST_TextAnchorHorizontal       ST_TextAnchorHorizontal
	ST_TextAnchorVertical         ST_TextAnchorVertical
	ST_DiagramTextAlignment       ST_DiagramTextAlignment
	ST_AutoTextRotation           ST_AutoTextRotation
	ST_GrowDirection              ST_GrowDirection
	ST_FlowDirection              ST_FlowDirection
	ST_ContinueDirection          ST_ContinueDirection
	ST_Breakpoint                 ST_Breakpoint
	ST_Offset                     ST_Offset
	ST_HierarchyAlignment         ST_HierarchyAlignment
	Int32                         *int32
	Float64                       *float64
	Bool                          *bool
	StringVal                     *string
	ST_ConnectorPoint             ST_ConnectorPoint
}

type CT_CxnList struct{ Cxn []*CT_Cxn }

func (_dbc *CT_LayoutNode) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dbc.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_dbc.NameAttr)})
	}
	if _dbc.StyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_dbc.StyleLblAttr)})
	}
	if _dbc.ChOrderAttr != ST_ChildOrderTypeUnset {
		_eaddf, _dgfg := _dbc.ChOrderAttr.MarshalXMLAttr(_a.Name{Local: "\u0063h\u004f\u0072\u0064\u0065\u0072"})
		if _dgfg != nil {
			return _dgfg
		}
		start.Attr = append(start.Attr, _eaddf)
	}
	if _dbc.MoveWithAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068"}, Value: _ef.Sprintf("\u0025\u0076", *_dbc.MoveWithAttr)})
	}
	e.EncodeToken(start)
	if _dbc.Alg != nil {
		_cabe := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _accg := range _dbc.Alg {
			e.EncodeElement(_accg, _cabe)
		}
	}
	if _dbc.Shape != nil {
		_fafgf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _accdc := range _dbc.Shape {
			e.EncodeElement(_accdc, _fafgf)
		}
	}
	if _dbc.PresOf != nil {
		_addg := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _aba := range _dbc.PresOf {
			e.EncodeElement(_aba, _addg)
		}
	}
	if _dbc.ConstrLst != nil {
		_ggff := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _afdd := range _dbc.ConstrLst {
			e.EncodeElement(_afdd, _ggff)
		}
	}
	if _dbc.RuleLst != nil {
		_fbgd := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _gcbg := range _dbc.RuleLst {
			e.EncodeElement(_gcbg, _fbgd)
		}
	}
	if _dbc.VarLst != nil {
		_eaabd := _a.StartElement{Name: _a.Name{Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}}
		for _, _dag := range _dbc.VarLst {
			e.EncodeElement(_dag, _eaabd)
		}
	}
	if _dbc.ForEach != nil {
		_bfeca := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _fbb := range _dbc.ForEach {
			e.EncodeElement(_fbb, _bfeca)
		}
	}
	if _dbc.LayoutNode != nil {
		_cge := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _dabbe := range _dbc.LayoutNode {
			e.EncodeElement(_dabbe, _cge)
		}
	}
	if _dbc.Choose != nil {
		_gfea := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _fddd := range _dbc.Choose {
			e.EncodeElement(_fddd, _gfea)
		}
	}
	if _dbc.ExtLst != nil {
		_dege := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _dcbf := range _dbc.ExtLst {
			e.EncodeElement(_dcbf, _dege)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_dabgc ST_AlgorithmType) ValidateWithPath(path string) error {
	switch _dabgc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dabgc))
	}
	return nil
}

func (_cebb ST_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cebb.String(), start)
}

// Validate validates the CT_StyleDefinitionHeaderLst and its children
func (_agcf *CT_StyleDefinitionHeaderLst) Validate() error {
	return _agcf.ValidateWithPath("C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074")
}

func (_acbbg *CT_Shape) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _acbbg.RotAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u006f\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_acbbg.RotAttr)})
	}
	if _acbbg.TypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_acbbg.TypeAttr)})
	}
	if _acbbg.BlipAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0062\u006c\u0069\u0070"}, Value: _ef.Sprintf("\u0025\u0076", *_acbbg.BlipAttr)})
	}
	if _acbbg.ZOrderOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f"}, Value: _ef.Sprintf("\u0025\u0076", *_acbbg.ZOrderOffAttr)})
	}
	if _acbbg.HideGeomAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_acbbg.HideGeomAttr))})
	}
	if _acbbg.LkTxEntryAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_acbbg.LkTxEntryAttr))})
	}
	if _acbbg.BlipPhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_acbbg.BlipPhldrAttr))})
	}
	e.EncodeToken(start)
	if _acbbg.AdjLst != nil {
		_cabdf := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}}
		e.EncodeElement(_acbbg.AdjLst, _cabdf)
	}
	if _acbbg.ExtLst != nil {
		_efdg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acbbg.ExtLst, _efdg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_geag *ST_LayoutShapeType) ValidateWithPath(path string) error {
	_bdfdd := []string{}
	if _geag.ST_ShapeType != _fd.ST_ShapeTypeUnset {
		_bdfdd = append(_bdfdd, "\u0053\u0054\u005fS\u0068\u0061\u0070\u0065\u0054\u0079\u0070\u0065")
	}
	if _geag.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		_bdfdd = append(_bdfdd, "\u0053T\u005fO\u0075\u0074\u0070\u0075\u0074S\u0068\u0061p\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_bdfdd) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bdfdd)
	}
	return nil
}

func (_dagb *ST_PrSetCustVal) ValidateWithPath(path string) error {
	_cdbcf := []string{}
	if _dagb.ST_Percentage != nil {
		_cdbcf = append(_cdbcf, "\u0053\u0054\u005f\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065")
	}
	if _dagb.Int32 != nil {
		_cdbcf = append(_cdbcf, "\u0049\u006e\u00743\u0032")
	}
	if len(_cdbcf) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cdbcf)
	}
	return nil
}

func (_fdabg *ST_StartingElement) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fdabg = 0
	case "\u006e\u006f\u0064\u0065":
		*_fdabg = 1
	case "\u0074\u0072\u0061n\u0073":
		*_fdabg = 2
	}
	return nil
}

// Validate validates the ColorsDef and its children
func (_bdfdc *ColorsDef) Validate() error {
	return _bdfdc.ValidateWithPath("\u0043o\u006c\u006f\u0072\u0073\u0044\u0065f")
}

func NewCT_CTCategory() *CT_CTCategory { _caec := &CT_CTCategory{}; return _caec }

func (_ecg *CT_CTDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dec := range start.Attr {
		if _dec.Name.Local == "\u006c\u0061\u006e\u0067" {
			_fba, _badf := _dec.Value, error(nil)
			if _badf != nil {
				return _badf
			}
			_ecg.LangAttr = &_fba
			continue
		}
		if _dec.Name.Local == "\u0076\u0061\u006c" {
			_dcc, _cfea := _dec.Value, error(nil)
			if _cfea != nil {
				return _cfea
			}
			_ecg.ValAttr = _dcc
			continue
		}
	}
	for {
		_dcbg, _aed := d.Token()
		if _aed != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0054\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _aed)
		}
		if _gcac, _fbe := _dcbg.(_a.EndElement); _fbe && _gcac.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Booleans []bool

func (_edeaa ST_HierBranchStyle) Validate() error { return _edeaa.ValidateWithPath("") }

func (_abeg ST_AnimLvlStr) String() string {
	switch _abeg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0076\u006c"
	case 3:
		return "\u0063\u0074\u0072"
	}
	return ""
}

func (_gccga *ST_AxisType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_egga, _becf := d.Token()
	if _becf != nil {
		return _becf
	}
	if _ceabf, _geadf := _egga.(_a.EndElement); _geadf && _ceabf.Name == start.Name {
		*_gccga = 1
		return nil
	}
	if _cfbgd, _deab := _egga.(_a.CharData); !_deab {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _egga)
	} else {
		switch string(_cfbgd) {
		case "":
			*_gccga = 0
		case "\u0073\u0065\u006c\u0066":
			*_gccga = 1
		case "\u0063\u0068":
			*_gccga = 2
		case "\u0064\u0065\u0073":
			*_gccga = 3
		case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
			*_gccga = 4
		case "\u0070\u0061\u0072":
			*_gccga = 5
		case "\u0061\u006e\u0063s\u0074":
			*_gccga = 6
		case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
			*_gccga = 7
		case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
			*_gccga = 8
		case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
			*_gccga = 9
		case "\u0066\u006f\u006c\u006c\u006f\u0077":
			*_gccga = 10
		case "\u0070\u0072\u0065\u0063\u0065\u0064":
			*_gccga = 11
		case "\u0072\u006f\u006f\u0074":
			*_gccga = 12
		case "\u006e\u006f\u006e\u0065":
			*_gccga = 13
		}
	}
	_egga, _becf = d.Token()
	if _becf != nil {
		return _becf
	}
	if _afga, _fcaee := _egga.(_a.EndElement); _fcaee && _afga.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _egga)
}

type ST_HierBranchStyle byte

type CT_CTCategories struct{ Cat []*CT_CTCategory }

func (_cddg ST_AnimOneStr) ValidateWithPath(path string) error {
	switch _cddg {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cddg))
	}
	return nil
}

type CT_When struct {
	NameAttr          *string
	FuncAttr          ST_FunctionType
	ArgAttr           *ST_FunctionArgument
	OpAttr            ST_FunctionOperator
	ValAttr           ST_FunctionValue
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_fd.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

type CT_SDCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func (_ebea *LayoutDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebea.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	for _, _fbbf := range start.Attr {
		if _fbbf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_caadb, _egfa := _fbbf.Value, error(nil)
			if _egfa != nil {
				return _egfa
			}
			_ebea.UniqueIdAttr = _caadb
			continue
		}
		if _fbbf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bbfa, _bafa := _fbbf.Value, error(nil)
			if _bafa != nil {
				return _bafa
			}
			_ebea.MinVerAttr = &_bbfa
			continue
		}
		if _fbbf.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_fddad, _dddfa := _fbbf.Value, error(nil)
			if _dddfa != nil {
				return _dddfa
			}
			_ebea.DefStyleAttr = &_fddad
			continue
		}
		if _fbbf.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_ebdb, _edgcd := _f.ParseInt(_fbbf.Value, 10, 32)
			if _edgcd != nil {
				return _edgcd
			}
			_bfee := int32(_ebdb)
			_ebea.ResIdAttr = &_bfee
			continue
		}
	}
_ddbgb:
	for {
		_gcgf, _ffeg := d.Token()
		if _ffeg != nil {
			return _ffeg
		}
		switch _ebbg := _gcgf.(type) {
		case _a.StartElement:
			switch _ebbg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dfcd := NewCT_Name()
				if _cfegg := d.DecodeElement(_dfcd, &_ebbg); _cfegg != nil {
					return _cfegg
				}
				_ebea.Title = append(_ebea.Title, _dfcd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_agff := NewCT_Description()
				if _eaccf := d.DecodeElement(_agff, &_ebbg); _eaccf != nil {
					return _eaccf
				}
				_ebea.Desc = append(_ebea.Desc, _agff)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ebea.CatLst = NewCT_Categories()
				if _fbgga := d.DecodeElement(_ebea.CatLst, &_ebbg); _fbgga != nil {
					return _fbgga
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebea.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _feab := d.DecodeElement(_ebea.ExtLst, &_ebbg); _feab != nil {
					return _feab
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u004c\u0061yo\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _ebbg.Name)
				if _fbad := d.Skip(); _fbad != nil {
					return _fbad
				}
			}
		case _a.EndElement:
			break _ddbgb
		case _a.CharData:
		}
	}
	return nil
}

func (_cgea *ST_ParameterId) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ceae, _bdcg := d.Token()
	if _bdcg != nil {
		return _bdcg
	}
	if _gegd, _adeb := _ceae.(_a.EndElement); _adeb && _gegd.Name == start.Name {
		*_cgea = 1
		return nil
	}
	if _bfeda, _bcaab := _ceae.(_a.CharData); !_bcaab {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ceae)
	} else {
		switch string(_bfeda) {
		case "":
			*_cgea = 0
		case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
			*_cgea = 1
		case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
			*_cgea = 2
		case "\u0063\u0068\u0044i\u0072":
			*_cgea = 3
		case "\u0063h\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 4
		case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 5
		case "\u006c\u0069\u006e\u0044\u0069\u0072":
			*_cgea = 6
		case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
			*_cgea = 7
		case "\u0073\u0074\u0045\u006c\u0065\u006d":
			*_cgea = 8
		case "\u0062\u0065\u006e\u0064\u0050\u0074":
			*_cgea = 9
		case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
			*_cgea = 10
		case "\u0062\u0065\u0067\u0053\u0074\u0079":
			*_cgea = 11
		case "\u0065\u006e\u0064\u0053\u0074\u0079":
			*_cgea = 12
		case "\u0064\u0069\u006d":
			*_cgea = 13
		case "\u0072o\u0074\u0050\u0061\u0074\u0068":
			*_cgea = 14
		case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
			*_cgea = 15
		case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 16
		case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 17
		case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
			*_cgea = 18
		case "\u0074\u0078\u0044i\u0072":
			*_cgea = 19
		case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
			*_cgea = 20
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
			*_cgea = 21
		case "\u0074x\u0042\u006c\u0044\u0069\u0072":
			*_cgea = 22
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
			*_cgea = 23
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
			*_cgea = 24
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
			*_cgea = 25
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
			*_cgea = 26
		case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 27
		case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
			*_cgea = 28
		case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_cgea = 29
		case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_cgea = 30
		case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
			*_cgea = 31
		case "\u0067\u0072\u0044i\u0072":
			*_cgea = 32
		case "\u0066l\u006f\u0077\u0044\u0069\u0072":
			*_cgea = 33
		case "\u0063o\u006e\u0074\u0044\u0069\u0072":
			*_cgea = 34
		case "\u0062\u006b\u0070\u0074":
			*_cgea = 35
		case "\u006f\u0066\u0066":
			*_cgea = 36
		case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
			*_cgea = 37
		case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_cgea = 38
		case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
			*_cgea = 39
		case "\u0073\u0074\u0041n\u0067":
			*_cgea = 40
		case "\u0073p\u0061\u006e\u0041\u006e\u0067":
			*_cgea = 41
		case "\u0061\u0072":
			*_cgea = 42
		case "\u006cn\u0053\u0070\u0050\u0061\u0072":
			*_cgea = 43
		case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
			*_cgea = 44
		case "\u006c\u006e\u0053\u0070\u0043\u0068":
			*_cgea = 45
		case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
			*_cgea = 46
		case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
			*_cgea = 47
		case "\u0061l\u0069\u0067\u006e\u0054\u0078":
			*_cgea = 48
		case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
			*_cgea = 49
		case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
			*_cgea = 50
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
			*_cgea = 51
		case "\u0073r\u0063\u004e\u006f\u0064\u0065":
			*_cgea = 52
		case "\u0064s\u0074\u004e\u006f\u0064\u0065":
			*_cgea = 53
		case "\u0062\u0065\u0067\u0050\u0074\u0073":
			*_cgea = 54
		case "\u0065\u006e\u0064\u0050\u0074\u0073":
			*_cgea = 55
		}
	}
	_ceae, _bdcg = d.Token()
	if _bdcg != nil {
		return _bdcg
	}
	if _ecac, _fbeb := _ceae.(_a.EndElement); _fbeb && _ecac.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ceae)
}

type CT_CTName struct {
	LangAttr *string
	ValAttr  string
}

func (_bffdb ST_TextAnchorVertical) String() string {
	switch _bffdb {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}

func (_eaaf *ST_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gefgb, _fdaba := d.Token()
	if _fdaba != nil {
		return _fdaba
	}
	if _eccad, _fbfcfa := _gefgb.(_a.EndElement); _fbfcfa && _eccad.Name == start.Name {
		*_eaaf = 1
		return nil
	}
	if _ccfed, _effd := _gefgb.(_a.CharData); !_effd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gefgb)
	} else {
		switch string(_ccfed) {
		case "":
			*_eaaf = 0
		case "\u006c":
			*_eaaf = 1
		case "\u0072":
			*_eaaf = 2
		case "\u0068\u0061\u006e\u0067":
			*_eaaf = 3
		case "\u0073\u0074\u0064":
			*_eaaf = 4
		case "\u0069\u006e\u0069\u0074":
			*_eaaf = 5
		}
	}
	_gefgb, _fdaba = d.Token()
	if _fdaba != nil {
		return _fdaba
	}
	if _gcafb, _fggcde := _gefgb.(_a.EndElement); _fggcde && _gcafb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gefgb)
}

// ValidateWithPath validates the ColorsDefHdr and its children, prefixing error messages with path
func (_abdfa *ColorsDefHdr) ValidateWithPath(path string) error {
	if _baag := _abdfa.CT_ColorTransformHeader.ValidateWithPath(path); _baag != nil {
		return _baag
	}
	return nil
}

func (_ecdfc *ST_ConstraintType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ecdfc = 0
	case "\u006e\u006f\u006e\u0065":
		*_ecdfc = 1
	case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
		*_ecdfc = 2
	case "\u0062e\u0067\u004d\u0061\u0072\u0067":
		*_ecdfc = 3
	case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
		*_ecdfc = 4
	case "\u0062\u0065\u0067\u0050\u0061\u0064":
		*_ecdfc = 5
	case "\u0062":
		*_ecdfc = 6
	case "\u0062\u004d\u0061r\u0067":
		*_ecdfc = 7
	case "\u0062\u004f\u0066\u0066":
		*_ecdfc = 8
	case "\u0063\u0074\u0072\u0058":
		*_ecdfc = 9
	case "\u0063t\u0072\u0058\u004f\u0066\u0066":
		*_ecdfc = 10
	case "\u0063\u0074\u0072\u0059":
		*_ecdfc = 11
	case "\u0063t\u0072\u0059\u004f\u0066\u0066":
		*_ecdfc = 12
	case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
		*_ecdfc = 13
	case "\u0064\u0069\u0061\u006d":
		*_ecdfc = 14
	case "\u0065n\u0064\u004d\u0061\u0072\u0067":
		*_ecdfc = 15
	case "\u0065\u006e\u0064\u0050\u0061\u0064":
		*_ecdfc = 16
	case "\u0068":
		*_ecdfc = 17
	case "\u0068\u0041\u0072\u0048":
		*_ecdfc = 18
	case "\u0068\u004f\u0066\u0066":
		*_ecdfc = 19
	case "\u006c":
		*_ecdfc = 20
	case "\u006c\u004d\u0061r\u0067":
		*_ecdfc = 21
	case "\u006c\u004f\u0066\u0066":
		*_ecdfc = 22
	case "\u0072":
		*_ecdfc = 23
	case "\u0072\u004d\u0061r\u0067":
		*_ecdfc = 24
	case "\u0072\u004f\u0066\u0066":
		*_ecdfc = 25
	case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
		*_ecdfc = 26
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
		*_ecdfc = 27
	case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
		*_ecdfc = 28
	case "\u0073\u0069\u0062S\u0070":
		*_ecdfc = 29
	case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
		*_ecdfc = 30
	case "\u0073\u0070":
		*_ecdfc = 31
	case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
		*_ecdfc = 32
	case "\u0074":
		*_ecdfc = 33
	case "\u0074\u004d\u0061r\u0067":
		*_ecdfc = 34
	case "\u0074\u004f\u0066\u0066":
		*_ecdfc = 35
	case "\u0075\u0073\u0065r\u0041":
		*_ecdfc = 36
	case "\u0075\u0073\u0065r\u0042":
		*_ecdfc = 37
	case "\u0075\u0073\u0065r\u0043":
		*_ecdfc = 38
	case "\u0075\u0073\u0065r\u0044":
		*_ecdfc = 39
	case "\u0075\u0073\u0065r\u0045":
		*_ecdfc = 40
	case "\u0075\u0073\u0065r\u0046":
		*_ecdfc = 41
	case "\u0075\u0073\u0065r\u0047":
		*_ecdfc = 42
	case "\u0075\u0073\u0065r\u0048":
		*_ecdfc = 43
	case "\u0075\u0073\u0065r\u0049":
		*_ecdfc = 44
	case "\u0075\u0073\u0065r\u004a":
		*_ecdfc = 45
	case "\u0075\u0073\u0065r\u004b":
		*_ecdfc = 46
	case "\u0075\u0073\u0065r\u004c":
		*_ecdfc = 47
	case "\u0075\u0073\u0065r\u004d":
		*_ecdfc = 48
	case "\u0075\u0073\u0065r\u004e":
		*_ecdfc = 49
	case "\u0075\u0073\u0065r\u004f":
		*_ecdfc = 50
	case "\u0075\u0073\u0065r\u0050":
		*_ecdfc = 51
	case "\u0075\u0073\u0065r\u0051":
		*_ecdfc = 52
	case "\u0075\u0073\u0065r\u0052":
		*_ecdfc = 53
	case "\u0075\u0073\u0065r\u0053":
		*_ecdfc = 54
	case "\u0075\u0073\u0065r\u0054":
		*_ecdfc = 55
	case "\u0075\u0073\u0065r\u0055":
		*_ecdfc = 56
	case "\u0075\u0073\u0065r\u0056":
		*_ecdfc = 57
	case "\u0075\u0073\u0065r\u0057":
		*_ecdfc = 58
	case "\u0075\u0073\u0065r\u0058":
		*_ecdfc = 59
	case "\u0075\u0073\u0065r\u0059":
		*_ecdfc = 60
	case "\u0075\u0073\u0065r\u005a":
		*_ecdfc = 61
	case "\u0077":
		*_ecdfc = 62
	case "\u0077\u0041\u0072\u0048":
		*_ecdfc = 63
	case "\u0077\u004f\u0066\u0066":
		*_ecdfc = 64
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinitionHeader and its children, prefixing error messages with path
func (_geab *CT_StyleDefinitionHeader) ValidateWithPath(path string) error {
	for _bge, _ceaac := range _geab.Title {
		if _ecdcf := _ceaac.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _bge)); _ecdcf != nil {
			return _ecdcf
		}
	}
	for _bfcd, _ecgce := range _geab.Desc {
		if _beeee := _ecgce.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bfcd)); _beeee != nil {
			return _beeee
		}
	}
	if _geab.CatLst != nil {
		if _dfea := _geab.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _dfea != nil {
			return _dfea
		}
	}
	if _geab.ExtLst != nil {
		if _gcgdf := _geab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcgdf != nil {
			return _gcgdf
		}
	}
	return nil
}

func (_bccb *ST_VerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gbad, _aeggg := d.Token()
	if _aeggg != nil {
		return _aeggg
	}
	if _aebcd, _bdfe := _gbad.(_a.EndElement); _bdfe && _aebcd.Name == start.Name {
		*_bccb = 1
		return nil
	}
	if _fabb, _fdfe := _gbad.(_a.CharData); !_fdfe {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbad)
	} else {
		switch string(_fabb) {
		case "":
			*_bccb = 0
		case "\u0074":
			*_bccb = 1
		case "\u006d\u0069\u0064":
			*_bccb = 2
		case "\u0062":
			*_bccb = 3
		case "\u006e\u006f\u006e\u0065":
			*_bccb = 4
		}
	}
	_gbad, _aeggg = d.Token()
	if _aeggg != nil {
		return _aeggg
	}
	if _gabe, _edggd := _gbad.(_a.EndElement); _edggd && _gabe.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbad)
}

func (_deca *CT_DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_deca.PtLst = NewCT_PtList()
_bcad:
	for {
		_cfcd, _aac := d.Token()
		if _aac != nil {
			return _aac
		}
		switch _gege := _cfcd.(type) {
		case _a.StartElement:
			switch _gege.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _cdf := d.DecodeElement(_deca.PtLst, &_gege); _cdf != nil {
					return _cdf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_deca.CxnLst = NewCT_CxnList()
				if _ddeag := d.DecodeElement(_deca.CxnLst, &_gege); _ddeag != nil {
					return _ddeag
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_deca.Bg = _fd.NewCT_BackgroundFormatting()
				if _cea := d.DecodeElement(_deca.Bg, &_gege); _cea != nil {
					return _cea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_deca.Whole = _fd.NewCT_WholeE2oFormatting()
				if _dgcg := d.DecodeElement(_deca.Whole, &_gege); _dgcg != nil {
					return _dgcg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deca.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _bffc := d.DecodeElement(_deca.ExtLst, &_gege); _bffc != nil {
					return _bffc
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0061\u0074a\u004d\u006f\u0064\u0065\u006c\u0020\u0025\u0076", _gege.Name)
				if _agd := d.Skip(); _agd != nil {
					return _agd
				}
			}
		case _a.EndElement:
			break _bcad
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_CxnTypeUnset               ST_CxnType = 0
	ST_CxnTypeParOf               ST_CxnType = 1
	ST_CxnTypePresOf              ST_CxnType = 2
	ST_CxnTypePresParOf           ST_CxnType = 3
	ST_CxnTypeUnknownRelationship ST_CxnType = 4
)

type CT_OrgChart struct{ ValAttr *bool }

type CT_CTStyleLabel struct {
	NameAttr       string
	FillClrLst     *CT_Colors
	LinClrLst      *CT_Colors
	EffectClrLst   *CT_Colors
	TxLinClrLst    *CT_Colors
	TxFillClrLst   *CT_Colors
	TxEffectClrLst *CT_Colors
	ExtLst         *_fd.CT_OfficeArtExtensionList
}

func (_eegb ST_ResizeHandlesStr) Validate() error { return _eegb.ValidateWithPath("") }

// Validate validates the CT_ChildPref and its children
func (_ced *CT_ChildPref) Validate() error {
	return _ced.ValidateWithPath("\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066")
}

func (_agef ST_ElementType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbgdc := _a.Attr{}
	_fbgdc.Name = name
	switch _agef {
	case ST_ElementTypeUnset:
		_fbgdc.Value = ""
	case ST_ElementTypeAll:
		_fbgdc.Value = "\u0061\u006c\u006c"
	case ST_ElementTypeDoc:
		_fbgdc.Value = "\u0064\u006f\u0063"
	case ST_ElementTypeNode:
		_fbgdc.Value = "\u006e\u006f\u0064\u0065"
	case ST_ElementTypeNorm:
		_fbgdc.Value = "\u006e\u006f\u0072\u006d"
	case ST_ElementTypeNonNorm:
		_fbgdc.Value = "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case ST_ElementTypeAsst:
		_fbgdc.Value = "\u0061\u0073\u0073\u0074"
	case ST_ElementTypeNonAsst:
		_fbgdc.Value = "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case ST_ElementTypeParTrans:
		_fbgdc.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_ElementTypePres:
		_fbgdc.Value = "\u0070\u0072\u0065\u0073"
	case ST_ElementTypeSibTrans:
		_fbgdc.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _fbgdc, nil
}

// ST_FunctionArgument is a union type
type ST_FunctionArgument struct{ ST_VariableType ST_VariableType }

func (_bcdg ST_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bcdg.String(), start)
}

func NewColorsDefHdr() *ColorsDefHdr {
	_bgec := &ColorsDefHdr{}
	_bgec.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	return _bgec
}

// ValidateWithPath validates the CT_CTCategory and its children, prefixing error messages with path
func (_edcg *CT_CTCategory) ValidateWithPath(path string) error { return nil }

func (_eaga ST_ArrowheadStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cgegb := _a.Attr{}
	_cgegb.Name = name
	switch _eaga {
	case ST_ArrowheadStyleUnset:
		_cgegb.Value = ""
	case ST_ArrowheadStyleAuto:
		_cgegb.Value = "\u0061\u0075\u0074\u006f"
	case ST_ArrowheadStyleArr:
		_cgegb.Value = "\u0061\u0072\u0072"
	case ST_ArrowheadStyleNoArr:
		_cgegb.Value = "\u006e\u006f\u0041r\u0072"
	}
	return _cgegb, nil
}

func (_gadea ST_ConstraintRelationship) Validate() error { return _gadea.ValidateWithPath("") }

func (_cdaeaf ST_PtType) Validate() error { return _cdaeaf.ValidateWithPath("") }

func (_ggbf ST_ChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ebeag := _a.Attr{}
	_ebeag.Name = name
	switch _ggbf {
	case ST_ChildAlignmentUnset:
		_ebeag.Value = ""
	case ST_ChildAlignmentT:
		_ebeag.Value = "\u0074"
	case ST_ChildAlignmentB:
		_ebeag.Value = "\u0062"
	case ST_ChildAlignmentL:
		_ebeag.Value = "\u006c"
	case ST_ChildAlignmentR:
		_ebeag.Value = "\u0072"
	}
	return _ebeag, nil
}

func (_bebe ST_FunctionOperator) Validate() error { return _bebe.ValidateWithPath("") }

func (_baged ST_Direction) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ecadae := _a.Attr{}
	_ecadae.Name = name
	switch _baged {
	case ST_DirectionUnset:
		_ecadae.Value = ""
	case ST_DirectionNorm:
		_ecadae.Value = "\u006e\u006f\u0072\u006d"
	case ST_DirectionRev:
		_ecadae.Value = "\u0072\u0065\u0076"
	}
	return _ecadae, nil
}

func ParseUnionST_FunctionArgument(s string) (ST_FunctionArgument, error) {
	return ST_FunctionArgument{}, nil
}

func (_aacdd ST_NodeVerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_baaeb := _a.Attr{}
	_baaeb.Name = name
	switch _aacdd {
	case ST_NodeVerticalAlignmentUnset:
		_baaeb.Value = ""
	case ST_NodeVerticalAlignmentT:
		_baaeb.Value = "\u0074"
	case ST_NodeVerticalAlignmentMid:
		_baaeb.Value = "\u006d\u0069\u0064"
	case ST_NodeVerticalAlignmentB:
		_baaeb.Value = "\u0062"
	}
	return _baaeb, nil
}

func (_bag *CT_Categories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bag.Cat != nil {
		_feba := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _gbc := range _bag.Cat {
			e.EncodeElement(_gbc, _feba)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bebeb *ST_ConnectorRouting) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bebeb = 0
	case "\u0073\u0074\u0072\u0061":
		*_bebeb = 1
	case "\u0062\u0065\u006e\u0064":
		*_bebeb = 2
	case "\u0063\u0075\u0072v\u0065":
		*_bebeb = 3
	case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
		*_bebeb = 4
	}
	return nil
}

// ValidateWithPath validates the AG_ConstraintRefAttributes and its children, prefixing error messages with path
func (_afd *AG_ConstraintRefAttributes) ValidateWithPath(path string) error {
	if _bca := _afd.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _bca != nil {
		return _bca
	}
	if _aef := _afd.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _aef != nil {
		return _aef
	}
	if _gea := _afd.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _gea != nil {
		return _gea
	}
	return nil
}

type CT_LayoutVariablePropertySet struct {
	OrgChart      *CT_OrgChart
	ChMax         *CT_ChildMax
	ChPref        *CT_ChildPref
	BulletEnabled *CT_BulletEnabled
	Dir           *CT_Direction
	HierBranch    *CT_HierBranchStyle
	AnimOne       *CT_AnimOne
	AnimLvl       *CT_AnimLvl
	ResizeHandles *CT_ResizeHandles
}

func NewCT_ResizeHandles() *CT_ResizeHandles { _fbbg := &CT_ResizeHandles{}; return _fbbg }

func NewColorsDef() *ColorsDef {
	_bebf := &ColorsDef{}
	_bebf.CT_ColorTransform = *NewCT_ColorTransform()
	return _bebf
}

type LayoutDef struct{ CT_DiagramDefinition }

func (_fagdf *ST_FunctionType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gdffg, _ggddc := d.Token()
	if _ggddc != nil {
		return _ggddc
	}
	if _affag, _dfbff := _gdffg.(_a.EndElement); _dfbff && _affag.Name == start.Name {
		*_fagdf = 1
		return nil
	}
	if _cffd, _feea := _gdffg.(_a.CharData); !_feea {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdffg)
	} else {
		switch string(_cffd) {
		case "":
			*_fagdf = 0
		case "\u0063\u006e\u0074":
			*_fagdf = 1
		case "\u0070\u006f\u0073":
			*_fagdf = 2
		case "\u0072\u0065\u0076\u0050\u006f\u0073":
			*_fagdf = 3
		case "\u0070o\u0073\u0045\u0076\u0065\u006e":
			*_fagdf = 4
		case "\u0070\u006f\u0073\u004f\u0064\u0064":
			*_fagdf = 5
		case "\u0076\u0061\u0072":
			*_fagdf = 6
		case "\u0064\u0065\u0070t\u0068":
			*_fagdf = 7
		case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
			*_fagdf = 8
		}
	}
	_gdffg, _ggddc = d.Token()
	if _ggddc != nil {
		return _ggddc
	}
	if _fcbgb, _fdbb := _gdffg.(_a.EndElement); _fdbb && _fcbgb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdffg)
}

func (_ccgc ST_FlowDirection) Validate() error { return _ccgc.ValidateWithPath("") }

// Validate validates the CT_Name and its children
func (_egdc *CT_Name) Validate() error {
	return _egdc.ValidateWithPath("\u0043T\u005f\u004e\u0061\u006d\u0065")
}

func (_cggf ST_ChildAlignment) String() string {
	switch _cggf {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	}
	return ""
}

func (_cefdbg *ST_AnimOneStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cefdbg = 0
	case "\u006e\u006f\u006e\u0065":
		*_cefdbg = 1
	case "\u006f\u006e\u0065":
		*_cefdbg = 2
	case "\u0062\u0072\u0061\u006e\u0063\u0068":
		*_cefdbg = 3
	}
	return nil
}

type ST_ChildOrderType byte

type CT_PresentationOf struct {
	ExtLst            *_fd.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

type ST_TextAnchorVertical byte

func NewCT_ForEach() *CT_ForEach { _cdffc := &CT_ForEach{}; return _cdffc }

type ST_CenterShapeMapping byte

// Validate validates the ColorsDefHdrLst and its children
func (_bebc *ColorsDefHdrLst) Validate() error {
	return _bebc.ValidateWithPath("\u0043o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}

func (_bfbfa ST_AxisType) String() string {
	switch _bfbfa {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	case 4:
		return "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case 5:
		return "\u0070\u0061\u0072"
	case 6:
		return "\u0061\u006e\u0063s\u0074"
	case 7:
		return "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case 8:
		return "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case 9:
		return "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case 10:
		return "\u0066\u006f\u006c\u006c\u006f\u0077"
	case 11:
		return "\u0070\u0072\u0065\u0063\u0065\u0064"
	case 12:
		return "\u0072\u006f\u006f\u0074"
	case 13:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

// Validate validates the CT_Cxn and its children
func (_ebfe *CT_Cxn) Validate() error {
	return _ebfe.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e")
}

// Validate validates the CT_Colors and its children
func (_gdg *CT_Colors) Validate() error {
	return _gdg.ValidateWithPath("\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s")
}

func ParseUnionST_ModelId(s string) (ST_ModelId, error) { return ST_ModelId{}, nil }

func (_abac *ST_ParameterId) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_abac = 0
	case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
		*_abac = 1
	case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
		*_abac = 2
	case "\u0063\u0068\u0044i\u0072":
		*_abac = 3
	case "\u0063h\u0041\u006c\u0069\u0067\u006e":
		*_abac = 4
	case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
		*_abac = 5
	case "\u006c\u0069\u006e\u0044\u0069\u0072":
		*_abac = 6
	case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
		*_abac = 7
	case "\u0073\u0074\u0045\u006c\u0065\u006d":
		*_abac = 8
	case "\u0062\u0065\u006e\u0064\u0050\u0074":
		*_abac = 9
	case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
		*_abac = 10
	case "\u0062\u0065\u0067\u0053\u0074\u0079":
		*_abac = 11
	case "\u0065\u006e\u0064\u0053\u0074\u0079":
		*_abac = 12
	case "\u0064\u0069\u006d":
		*_abac = 13
	case "\u0072o\u0074\u0050\u0061\u0074\u0068":
		*_abac = 14
	case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
		*_abac = 15
	case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
		*_abac = 16
	case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
		*_abac = 17
	case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
		*_abac = 18
	case "\u0074\u0078\u0044i\u0072":
		*_abac = 19
	case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
		*_abac = 20
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
		*_abac = 21
	case "\u0074x\u0042\u006c\u0044\u0069\u0072":
		*_abac = 22
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
		*_abac = 23
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
		*_abac = 24
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
		*_abac = 25
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
		*_abac = 26
	case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
		*_abac = 27
	case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
		*_abac = 28
	case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_abac = 29
	case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_abac = 30
	case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
		*_abac = 31
	case "\u0067\u0072\u0044i\u0072":
		*_abac = 32
	case "\u0066l\u006f\u0077\u0044\u0069\u0072":
		*_abac = 33
	case "\u0063o\u006e\u0074\u0044\u0069\u0072":
		*_abac = 34
	case "\u0062\u006b\u0070\u0074":
		*_abac = 35
	case "\u006f\u0066\u0066":
		*_abac = 36
	case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
		*_abac = 37
	case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_abac = 38
	case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
		*_abac = 39
	case "\u0073\u0074\u0041n\u0067":
		*_abac = 40
	case "\u0073p\u0061\u006e\u0041\u006e\u0067":
		*_abac = 41
	case "\u0061\u0072":
		*_abac = 42
	case "\u006cn\u0053\u0070\u0050\u0061\u0072":
		*_abac = 43
	case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
		*_abac = 44
	case "\u006c\u006e\u0053\u0070\u0043\u0068":
		*_abac = 45
	case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
		*_abac = 46
	case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
		*_abac = 47
	case "\u0061l\u0069\u0067\u006e\u0054\u0078":
		*_abac = 48
	case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
		*_abac = 49
	case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
		*_abac = 50
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
		*_abac = 51
	case "\u0073r\u0063\u004e\u006f\u0064\u0065":
		*_abac = 52
	case "\u0064s\u0074\u004e\u006f\u0064\u0065":
		*_abac = 53
	case "\u0062\u0065\u0067\u0050\u0074\u0073":
		*_abac = 54
	case "\u0065\u006e\u0064\u0050\u0074\u0073":
		*_abac = 55
	}
	return nil
}

func (_dcgfd *ST_FlowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_acfed, _adcd := d.Token()
	if _adcd != nil {
		return _adcd
	}
	if _fbcecb, _eagff := _acfed.(_a.EndElement); _eagff && _fbcecb.Name == start.Name {
		*_dcgfd = 1
		return nil
	}
	if _cfdcg, _abcad := _acfed.(_a.CharData); !_abcad {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acfed)
	} else {
		switch string(_cfdcg) {
		case "":
			*_dcgfd = 0
		case "\u0072\u006f\u0077":
			*_dcgfd = 1
		case "\u0063\u006f\u006c":
			*_dcgfd = 2
		}
	}
	_acfed, _adcd = d.Token()
	if _adcd != nil {
		return _adcd
	}
	if _agbfeg, _dgeg := _acfed.(_a.EndElement); _dgeg && _agbfeg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acfed)
}

func NewCT_CxnList() *CT_CxnList { _eedf := &CT_CxnList{}; return _eedf }

// ST_FunctionValue is a union type
type ST_FunctionValue struct {
	Int32               *int32
	Bool                *bool
	ST_Direction        ST_Direction
	ST_HierBranchStyle  ST_HierBranchStyle
	ST_AnimOneStr       ST_AnimOneStr
	ST_AnimLvlStr       ST_AnimLvlStr
	ST_ResizeHandlesStr ST_ResizeHandlesStr
}

func (_fedg ST_ConstraintType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_geead := _a.Attr{}
	_geead.Name = name
	switch _fedg {
	case ST_ConstraintTypeUnset:
		_geead.Value = ""
	case ST_ConstraintTypeNone:
		_geead.Value = "\u006e\u006f\u006e\u0065"
	case ST_ConstraintTypeAlignOff:
		_geead.Value = "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case ST_ConstraintTypeBegMarg:
		_geead.Value = "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeBendDist:
		_geead.Value = "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeBegPad:
		_geead.Value = "\u0062\u0065\u0067\u0050\u0061\u0064"
	case ST_ConstraintTypeB:
		_geead.Value = "\u0062"
	case ST_ConstraintTypeBMarg:
		_geead.Value = "\u0062\u004d\u0061r\u0067"
	case ST_ConstraintTypeBOff:
		_geead.Value = "\u0062\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrX:
		_geead.Value = "\u0063\u0074\u0072\u0058"
	case ST_ConstraintTypeCtrXOff:
		_geead.Value = "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrY:
		_geead.Value = "\u0063\u0074\u0072\u0059"
	case ST_ConstraintTypeCtrYOff:
		_geead.Value = "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case ST_ConstraintTypeConnDist:
		_geead.Value = "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeDiam:
		_geead.Value = "\u0064\u0069\u0061\u006d"
	case ST_ConstraintTypeEndMarg:
		_geead.Value = "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeEndPad:
		_geead.Value = "\u0065\u006e\u0064\u0050\u0061\u0064"
	case ST_ConstraintTypeH:
		_geead.Value = "\u0068"
	case ST_ConstraintTypeHArH:
		_geead.Value = "\u0068\u0041\u0072\u0048"
	case ST_ConstraintTypeHOff:
		_geead.Value = "\u0068\u004f\u0066\u0066"
	case ST_ConstraintTypeL:
		_geead.Value = "\u006c"
	case ST_ConstraintTypeLMarg:
		_geead.Value = "\u006c\u004d\u0061r\u0067"
	case ST_ConstraintTypeLOff:
		_geead.Value = "\u006c\u004f\u0066\u0066"
	case ST_ConstraintTypeR:
		_geead.Value = "\u0072"
	case ST_ConstraintTypeRMarg:
		_geead.Value = "\u0072\u004d\u0061r\u0067"
	case ST_ConstraintTypeROff:
		_geead.Value = "\u0072\u004f\u0066\u0066"
	case ST_ConstraintTypePrimFontSz:
		_geead.Value = "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case ST_ConstraintTypePyraAcctRatio:
		_geead.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case ST_ConstraintTypeSecFontSz:
		_geead.Value = "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case ST_ConstraintTypeSibSp:
		_geead.Value = "\u0073\u0069\u0062S\u0070"
	case ST_ConstraintTypeSecSibSp:
		_geead.Value = "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case ST_ConstraintTypeSp:
		_geead.Value = "\u0073\u0070"
	case ST_ConstraintTypeStemThick:
		_geead.Value = "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case ST_ConstraintTypeT:
		_geead.Value = "\u0074"
	case ST_ConstraintTypeTMarg:
		_geead.Value = "\u0074\u004d\u0061r\u0067"
	case ST_ConstraintTypeTOff:
		_geead.Value = "\u0074\u004f\u0066\u0066"
	case ST_ConstraintTypeUserA:
		_geead.Value = "\u0075\u0073\u0065r\u0041"
	case ST_ConstraintTypeUserB:
		_geead.Value = "\u0075\u0073\u0065r\u0042"
	case ST_ConstraintTypeUserC:
		_geead.Value = "\u0075\u0073\u0065r\u0043"
	case ST_ConstraintTypeUserD:
		_geead.Value = "\u0075\u0073\u0065r\u0044"
	case ST_ConstraintTypeUserE:
		_geead.Value = "\u0075\u0073\u0065r\u0045"
	case ST_ConstraintTypeUserF:
		_geead.Value = "\u0075\u0073\u0065r\u0046"
	case ST_ConstraintTypeUserG:
		_geead.Value = "\u0075\u0073\u0065r\u0047"
	case ST_ConstraintTypeUserH:
		_geead.Value = "\u0075\u0073\u0065r\u0048"
	case ST_ConstraintTypeUserI:
		_geead.Value = "\u0075\u0073\u0065r\u0049"
	case ST_ConstraintTypeUserJ:
		_geead.Value = "\u0075\u0073\u0065r\u004a"
	case ST_ConstraintTypeUserK:
		_geead.Value = "\u0075\u0073\u0065r\u004b"
	case ST_ConstraintTypeUserL:
		_geead.Value = "\u0075\u0073\u0065r\u004c"
	case ST_ConstraintTypeUserM:
		_geead.Value = "\u0075\u0073\u0065r\u004d"
	case ST_ConstraintTypeUserN:
		_geead.Value = "\u0075\u0073\u0065r\u004e"
	case ST_ConstraintTypeUserO:
		_geead.Value = "\u0075\u0073\u0065r\u004f"
	case ST_ConstraintTypeUserP:
		_geead.Value = "\u0075\u0073\u0065r\u0050"
	case ST_ConstraintTypeUserQ:
		_geead.Value = "\u0075\u0073\u0065r\u0051"
	case ST_ConstraintTypeUserR:
		_geead.Value = "\u0075\u0073\u0065r\u0052"
	case ST_ConstraintTypeUserS:
		_geead.Value = "\u0075\u0073\u0065r\u0053"
	case ST_ConstraintTypeUserT:
		_geead.Value = "\u0075\u0073\u0065r\u0054"
	case ST_ConstraintTypeUserU:
		_geead.Value = "\u0075\u0073\u0065r\u0055"
	case ST_ConstraintTypeUserV:
		_geead.Value = "\u0075\u0073\u0065r\u0056"
	case ST_ConstraintTypeUserW:
		_geead.Value = "\u0075\u0073\u0065r\u0057"
	case ST_ConstraintTypeUserX:
		_geead.Value = "\u0075\u0073\u0065r\u0058"
	case ST_ConstraintTypeUserY:
		_geead.Value = "\u0075\u0073\u0065r\u0059"
	case ST_ConstraintTypeUserZ:
		_geead.Value = "\u0075\u0073\u0065r\u005a"
	case ST_ConstraintTypeW:
		_geead.Value = "\u0077"
	case ST_ConstraintTypeWArH:
		_geead.Value = "\u0077\u0041\u0072\u0048"
	case ST_ConstraintTypeWOff:
		_geead.Value = "\u0077\u004f\u0066\u0066"
	}
	return _geead, nil
}

func (_gaec ST_LinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dgbg := _a.Attr{}
	_dgbg.Name = name
	switch _gaec {
	case ST_LinearDirectionUnset:
		_dgbg.Value = ""
	case ST_LinearDirectionFromL:
		_dgbg.Value = "\u0066\u0072\u006fm\u004c"
	case ST_LinearDirectionFromR:
		_dgbg.Value = "\u0066\u0072\u006fm\u0052"
	case ST_LinearDirectionFromT:
		_dgbg.Value = "\u0066\u0072\u006fm\u0054"
	case ST_LinearDirectionFromB:
		_dgbg.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _dgbg, nil
}

func (_dfge ST_TextBlockDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dfge.String(), start)
}

func (_gefgc ST_ResizeHandlesStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cgdb := _a.Attr{}
	_cgdb.Name = name
	switch _gefgc {
	case ST_ResizeHandlesStrUnset:
		_cgdb.Value = ""
	case ST_ResizeHandlesStrExact:
		_cgdb.Value = "\u0065\u0078\u0061c\u0074"
	case ST_ResizeHandlesStrRel:
		_cgdb.Value = "\u0072\u0065\u006c"
	}
	return _cgdb, nil
}

type CT_Category struct {
	TypeAttr string
	PriAttr  uint32
}

func (_ggddf *CT_Name) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bfad := range start.Attr {
		if _bfad.Name.Local == "\u006c\u0061\u006e\u0067" {
			_dgccf, _fggcd := _bfad.Value, error(nil)
			if _fggcd != nil {
				return _fggcd
			}
			_ggddf.LangAttr = &_dgccf
			continue
		}
		if _bfad.Name.Local == "\u0076\u0061\u006c" {
			_abaa, _edgfg := _bfad.Value, error(nil)
			if _edgfg != nil {
				return _edgfg
			}
			_ggddf.ValAttr = _abaa
			continue
		}
	}
	for {
		_cfafg, _adceg := d.Token()
		if _adceg != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004e\u0061\u006d\u0065\u003a\u0020\u0025\u0073", _adceg)
		}
		if _caecd, _ggedb := _cfafg.(_a.EndElement); _ggedb && _caecd.Name == start.Name {
			break
		}
	}
	return nil
}

func (_eefac ST_OutputShapeType) String() string {
	switch _eefac {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	}
	return ""
}

// Validate validates the CT_Otherwise and its children
func (_bedg *CT_Otherwise) Validate() error {
	return _bedg.ValidateWithPath("\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065")
}

func (_gbbgf *ST_HierBranchStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gbbgf = 0
	case "\u006c":
		*_gbbgf = 1
	case "\u0072":
		*_gbbgf = 2
	case "\u0068\u0061\u006e\u0067":
		*_gbbgf = 3
	case "\u0073\u0074\u0064":
		*_gbbgf = 4
	case "\u0069\u006e\u0069\u0074":
		*_gbbgf = 5
	}
	return nil
}

type ST_PyramidAccentTextMargin byte

func (_efbf ST_RotationPath) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efbf.String(), start)
}

const (
	ST_ChildDirectionUnset ST_ChildDirection = 0
	ST_ChildDirectionHorz  ST_ChildDirection = 1
	ST_ChildDirectionVert  ST_ChildDirection = 2
)

func (_bfaag *ST_AlgorithmType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfaag = 0
	case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
		*_bfaag = 1
	case "\u0063\u006f\u006e\u006e":
		*_bfaag = 2
	case "\u0063\u0079\u0063l\u0065":
		*_bfaag = 3
	case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
		*_bfaag = 4
	case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
		*_bfaag = 5
	case "\u0070\u0079\u0072\u0061":
		*_bfaag = 6
	case "\u006c\u0069\u006e":
		*_bfaag = 7
	case "\u0073\u0070":
		*_bfaag = 8
	case "\u0074\u0078":
		*_bfaag = 9
	case "\u0073\u006e\u0061k\u0065":
		*_bfaag = 10
	}
	return nil
}

// Validate validates the CT_DiagramDefinitionHeaderLst and its children
func (_egff *CT_DiagramDefinitionHeaderLst) Validate() error {
	return _egff.ValidateWithPath("\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074")
}

// Validate validates the AG_ConstraintRefAttributes and its children
func (_eeg *AG_ConstraintRefAttributes) Validate() error {
	return _eeg.ValidateWithPath("\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073")
}

func (_dcdab ST_Breakpoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ecefc := _a.Attr{}
	_ecefc.Name = name
	switch _dcdab {
	case ST_BreakpointUnset:
		_ecefc.Value = ""
	case ST_BreakpointEndCnv:
		_ecefc.Value = "\u0065\u006e\u0064\u0043\u006e\u0076"
	case ST_BreakpointBal:
		_ecefc.Value = "\u0062\u0061\u006c"
	case ST_BreakpointFixed:
		_ecefc.Value = "\u0066\u0069\u0078e\u0064"
	}
	return _ecefc, nil
}

// Validate validates the LayoutDefHdr and its children
func (_gggc *LayoutDefHdr) Validate() error {
	return _gggc.ValidateWithPath("\u004c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072")
}

func (_dcdcb *ST_ElementType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gdafd, _gbbcb := d.Token()
	if _gbbcb != nil {
		return _gbbcb
	}
	if _decf, _ffbbc := _gdafd.(_a.EndElement); _ffbbc && _decf.Name == start.Name {
		*_dcdcb = 1
		return nil
	}
	if _ccce, _cefcf := _gdafd.(_a.CharData); !_cefcf {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdafd)
	} else {
		switch string(_ccce) {
		case "":
			*_dcdcb = 0
		case "\u0061\u006c\u006c":
			*_dcdcb = 1
		case "\u0064\u006f\u0063":
			*_dcdcb = 2
		case "\u006e\u006f\u0064\u0065":
			*_dcdcb = 3
		case "\u006e\u006f\u0072\u006d":
			*_dcdcb = 4
		case "\u006eo\u006e\u004e\u006f\u0072\u006d":
			*_dcdcb = 5
		case "\u0061\u0073\u0073\u0074":
			*_dcdcb = 6
		case "\u006eo\u006e\u0041\u0073\u0073\u0074":
			*_dcdcb = 7
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_dcdcb = 8
		case "\u0070\u0072\u0065\u0073":
			*_dcdcb = 9
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_dcdcb = 10
		}
	}
	_gdafd, _gbbcb = d.Token()
	if _gbbcb != nil {
		return _gbbcb
	}
	if _cacf, _eegf := _gdafd.(_a.EndElement); _eegf && _cacf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdafd)
}

func (_cgbf ST_ClrAppMethod) Validate() error { return _cgbf.ValidateWithPath("") }

func (_efdc *CT_DiagramDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efdc.LayoutNode = NewCT_LayoutNode()
	for _, _bcac := range start.Attr {
		if _bcac.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_afcbc, _bfef := _bcac.Value, error(nil)
			if _bfef != nil {
				return _bfef
			}
			_efdc.UniqueIdAttr = &_afcbc
			continue
		}
		if _bcac.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_fceee, _aabf := _bcac.Value, error(nil)
			if _aabf != nil {
				return _aabf
			}
			_efdc.MinVerAttr = &_fceee
			continue
		}
		if _bcac.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_bbbe, _edcce := _bcac.Value, error(nil)
			if _edcce != nil {
				return _edcce
			}
			_efdc.DefStyleAttr = &_bbbe
			continue
		}
	}
_fffc:
	for {
		_aegg, _gcdc := d.Token()
		if _gcdc != nil {
			return _gcdc
		}
		switch _afg := _aegg.(type) {
		case _a.StartElement:
			switch _afg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cdae := NewCT_Name()
				if _aegf := d.DecodeElement(_cdae, &_afg); _aegf != nil {
					return _aegf
				}
				_efdc.Title = append(_efdc.Title, _cdae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_dace := NewCT_Description()
				if _bccc := d.DecodeElement(_dace, &_afg); _bccc != nil {
					return _bccc
				}
				_efdc.Desc = append(_efdc.Desc, _dace)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_efdc.CatLst = NewCT_Categories()
				if _bcccf := d.DecodeElement(_efdc.CatLst, &_afg); _bcccf != nil {
					return _bcccf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_efdc.SampData = NewCT_SampleData()
				if _fgcf := d.DecodeElement(_efdc.SampData, &_afg); _fgcf != nil {
					return _fgcf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_efdc.StyleData = NewCT_SampleData()
				if _dgef := d.DecodeElement(_efdc.StyleData, &_afg); _dgef != nil {
					return _dgef
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_efdc.ClrData = NewCT_SampleData()
				if _dfda := d.DecodeElement(_efdc.ClrData, &_afg); _dfda != nil {
					return _dfda
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _fcaf := d.DecodeElement(_efdc.LayoutNode, &_afg); _fcaf != nil {
					return _fcaf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efdc.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fcaa := d.DecodeElement(_efdc.ExtLst, &_afg); _fcaa != nil {
					return _fcaa
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _afg.Name)
				if _beb := d.Skip(); _beb != nil {
					return _beb
				}
			}
		case _a.EndElement:
			break _fffc
		case _a.CharData:
		}
	}
	return nil
}

func (_eeee ST_AnimLvlStr) ValidateWithPath(path string) error {
	switch _eeee {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eeee))
	}
	return nil
}

func (_caaa *CT_BulletEnabled) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _caaa.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_caaa.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_OrgChart and its children, prefixing error messages with path
func (_daaea *CT_OrgChart) ValidateWithPath(path string) error { return nil }

func (_bead ST_ClrAppMethod) ValidateWithPath(path string) error {
	switch _bead {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bead))
	}
	return nil
}

// ValidateWithPath validates the CT_ChildMax and its children, prefixing error messages with path
func (_bea *CT_ChildMax) ValidateWithPath(path string) error {
	if _bea.ValAttr != nil {
		if *_bea.ValAttr < -1 {
			return _ef.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bea.ValAttr)
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SDName and its children, prefixing error messages with path
func (_fbbc *CT_SDName) ValidateWithPath(path string) error { return nil }

func (_fadbg *ST_HueDir) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfffa, _agfe := d.Token()
	if _agfe != nil {
		return _agfe
	}
	if _bfca, _gaee := _cfffa.(_a.EndElement); _gaee && _bfca.Name == start.Name {
		*_fadbg = 1
		return nil
	}
	if _abcb, _dged := _cfffa.(_a.CharData); !_dged {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfffa)
	} else {
		switch string(_abcb) {
		case "":
			*_fadbg = 0
		case "\u0063\u0077":
			*_fadbg = 1
		case "\u0063\u0063\u0077":
			*_fadbg = 2
		}
	}
	_cfffa, _agfe = d.Token()
	if _agfe != nil {
		return _agfe
	}
	if _ffcd, _fefc := _cfffa.(_a.EndElement); _fefc && _ffcd.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfffa)
}

// Validate validates the CT_SDName and its children
func (_edcgc *CT_SDName) Validate() error {
	return _edcgc.ValidateWithPath("\u0043T\u005f\u0053\u0044\u004e\u0061\u006de")
}

func NewCT_Otherwise() *CT_Otherwise { _ebdgb := &CT_Otherwise{}; return _ebdgb }

func NewCT_ColorTransformHeader() *CT_ColorTransformHeader {
	_cbab := &CT_ColorTransformHeader{}
	return _cbab
}

// Validate validates the CT_NumericRule and its children
func (_aaba *CT_NumericRule) Validate() error {
	return _aaba.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065")
}

func (_defcf ST_TextAnchorHorizontal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_defcf.String(), start)
}

func (_gefg *CT_SDCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _gefg.Cat != nil {
		_ebcg := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _adgb := range _gefg.Cat {
			e.EncodeElement(_adgb, _ebcg)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_eefbc ST_ElementType) ValidateWithPath(path string) error {
	switch _eefbc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eefbc))
	}
	return nil
}

// ValidateWithPath validates the CT_RelIds and its children, prefixing error messages with path
func (_bbga *CT_RelIds) ValidateWithPath(path string) error { return nil }

func (_aedcf *CT_Pt) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _aedcf.ModelIdAttr)})
	if _aedcf.TypeAttr != ST_PtTypeUnset {
		_bceg, _edbd := _aedcf.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _edbd != nil {
			return _edbd
		}
		start.Attr = append(start.Attr, _bceg)
	}
	if _aedcf.CxnIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0078\u006eI\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_aedcf.CxnIdAttr)})
	}
	e.EncodeToken(start)
	if _aedcf.PrSet != nil {
		_fegf := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0053e\u0074"}}
		e.EncodeElement(_aedcf.PrSet, _fegf)
	}
	if _aedcf.SpPr != nil {
		_aege := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aedcf.SpPr, _aege)
	}
	if _aedcf.T != nil {
		_accgd := _a.StartElement{Name: _a.Name{Local: "\u0074"}}
		e.EncodeElement(_aedcf.T, _accgd)
	}
	if _aedcf.ExtLst != nil {
		_acbc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aedcf.ExtLst, _acbc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func NewCT_Shape() *CT_Shape { _acaa := &CT_Shape{}; return _acaa }

func (_fgadf ST_Breakpoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgadf.String(), start)
}

type CT_Rules struct{ Rule []*CT_NumericRule }

const (
	ST_ConnectorPointUnset  ST_ConnectorPoint = 0
	ST_ConnectorPointAuto   ST_ConnectorPoint = 1
	ST_ConnectorPointBCtr   ST_ConnectorPoint = 2
	ST_ConnectorPointCtr    ST_ConnectorPoint = 3
	ST_ConnectorPointMidL   ST_ConnectorPoint = 4
	ST_ConnectorPointMidR   ST_ConnectorPoint = 5
	ST_ConnectorPointTCtr   ST_ConnectorPoint = 6
	ST_ConnectorPointBL     ST_ConnectorPoint = 7
	ST_ConnectorPointBR     ST_ConnectorPoint = 8
	ST_ConnectorPointTL     ST_ConnectorPoint = 9
	ST_ConnectorPointTR     ST_ConnectorPoint = 10
	ST_ConnectorPointRadial ST_ConnectorPoint = 11
)

func NewCT_StyleDefinitionHeaderLst() *CT_StyleDefinitionHeaderLst {
	_gcdad := &CT_StyleDefinitionHeaderLst{}
	return _gcdad
}

func NewStyleDefHdrLst() *StyleDefHdrLst {
	_befgb := &StyleDefHdrLst{}
	_befgb.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
	return _befgb
}

type ST_AutoTextRotation byte

type ST_HierarchyAlignment byte

func (_ddgb *ST_Breakpoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ddgb = 0
	case "\u0065\u006e\u0064\u0043\u006e\u0076":
		*_ddgb = 1
	case "\u0062\u0061\u006c":
		*_ddgb = 2
	case "\u0066\u0069\u0078e\u0064":
		*_ddgb = 3
	}
	return nil
}

func (_bcag ST_ElementType) Validate() error { return _bcag.ValidateWithPath("") }

func (_caede *ST_SecondaryChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_caede = 0
	case "\u006e\u006f\u006e\u0065":
		*_caede = 1
	case "\u0074":
		*_caede = 2
	case "\u0062":
		*_caede = 3
	case "\u006c":
		*_caede = 4
	case "\u0072":
		*_caede = 5
	}
	return nil
}

func (_egbff *ST_SecondaryLinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_deae, _cdeb := d.Token()
	if _cdeb != nil {
		return _cdeb
	}
	if _cdbfe, _gffge := _deae.(_a.EndElement); _gffge && _cdbfe.Name == start.Name {
		*_egbff = 1
		return nil
	}
	if _dedec, _ggbea := _deae.(_a.CharData); !_ggbea {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _deae)
	} else {
		switch string(_dedec) {
		case "":
			*_egbff = 0
		case "\u006e\u006f\u006e\u0065":
			*_egbff = 1
		case "\u0066\u0072\u006fm\u004c":
			*_egbff = 2
		case "\u0066\u0072\u006fm\u0052":
			*_egbff = 3
		case "\u0066\u0072\u006fm\u0054":
			*_egbff = 4
		case "\u0066\u0072\u006fm\u0042":
			*_egbff = 5
		}
	}
	_deae, _cdeb = d.Token()
	if _cdeb != nil {
		return _cdeb
	}
	if _gffbb, _babf := _deae.(_a.EndElement); _babf && _gffbb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _deae)
}

func ParseSliceST_ElementTypes(s string) (ST_ElementTypes, error) { return ST_ElementTypes{}, nil }

func (_gafa *CT_Colors) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gafa.MethAttr != ST_ClrAppMethodUnset {
		_gdb, _fagc := _gafa.MethAttr.MarshalXMLAttr(_a.Name{Local: "\u006d\u0065\u0074\u0068"})
		if _fagc != nil {
			return _fagc
		}
		start.Attr = append(start.Attr, _gdb)
	}
	if _gafa.HueDirAttr != ST_HueDirUnset {
		_gggg, _abge := _gafa.HueDirAttr.MarshalXMLAttr(_a.Name{Local: "\u0068\u0075\u0065\u0044\u0069\u0072"})
		if _abge != nil {
			return _abge
		}
		start.Attr = append(start.Attr, _gggg)
	}
	e.EncodeToken(start)
	if _gafa.EG_ColorChoice != nil {
		for _, _aebe := range _gafa.EG_ColorChoice {
			_aebe.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bbeg ST_Direction) Validate() error { return _bbeg.ValidateWithPath("") }

const (
	ST_GrowDirectionUnset ST_GrowDirection = 0
	ST_GrowDirectionTL    ST_GrowDirection = 1
	ST_GrowDirectionTR    ST_GrowDirection = 2
	ST_GrowDirectionBL    ST_GrowDirection = 3
	ST_GrowDirectionBR    ST_GrowDirection = 4
)

func (_fdaca ST_TextDirection) ValidateWithPath(path string) error {
	switch _fdaca {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fdaca))
	}
	return nil
}

func (_ggba *CT_ColorTransformHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ggba.ColorsDefHdr != nil {
		_cabg := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _cedd := range _ggba.ColorsDefHdr {
			e.EncodeElement(_cedd, _cabg)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_ChildPref struct{ ValAttr *int32 }

func (_gceaf ST_ConnectorPoint) String() string {
	switch _gceaf {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0062\u0043\u0074\u0072"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u006d\u0069\u0064\u004c"
	case 5:
		return "\u006d\u0069\u0064\u0052"
	case 6:
		return "\u0074\u0043\u0074\u0072"
	case 7:
		return "\u0062\u004c"
	case 8:
		return "\u0062\u0052"
	case 9:
		return "\u0074\u004c"
	case 10:
		return "\u0074\u0052"
	case 11:
		return "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return ""
}

const (
	ST_FunctionOperatorUnset ST_FunctionOperator = 0
	ST_FunctionOperatorEqu   ST_FunctionOperator = 1
	ST_FunctionOperatorNeq   ST_FunctionOperator = 2
	ST_FunctionOperatorGt    ST_FunctionOperator = 3
	ST_FunctionOperatorLt    ST_FunctionOperator = 4
	ST_FunctionOperatorGte   ST_FunctionOperator = 5
	ST_FunctionOperatorLte   ST_FunctionOperator = 6
)

func (_gafg *ST_Direction) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gafg = 0
	case "\u006e\u006f\u0072\u006d":
		*_gafg = 1
	case "\u0072\u0065\u0076":
		*_gafg = 2
	}
	return nil
}

func NewCT_SDCategory() *CT_SDCategory { _dgcfg := &CT_SDCategory{}; return _dgcfg }

func NewStyleDefHdr() *StyleDefHdr {
	_fgfga := &StyleDefHdr{}
	_fgfga.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	return _fgfga
}

// ValidateWithPath validates the CT_Cxn and its children, prefixing error messages with path
func (_cgc *CT_Cxn) ValidateWithPath(path string) error {
	if _bcc := _cgc.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _bcc != nil {
		return _bcc
	}
	if _gged := _cgc.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _gged != nil {
		return _gged
	}
	if _eadd := _cgc.SrcIdAttr.ValidateWithPath(path + "\u002f\u0053\u0072\u0063\u0049\u0064\u0041\u0074\u0074\u0072"); _eadd != nil {
		return _eadd
	}
	if _egbg := _cgc.DestIdAttr.ValidateWithPath(path + "/\u0044\u0065\u0073\u0074\u0049\u0064\u0041\u0074\u0074\u0072"); _egbg != nil {
		return _egbg
	}
	if _cgc.ParTransIdAttr != nil {
		if _gbfc := _cgc.ParTransIdAttr.ValidateWithPath(path + "\u002fP\u0061r\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _gbfc != nil {
			return _gbfc
		}
	}
	if _cgc.SibTransIdAttr != nil {
		if _cbgc := _cgc.SibTransIdAttr.ValidateWithPath(path + "\u002fS\u0069b\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _cbgc != nil {
			return _cbgc
		}
	}
	if _cgc.ExtLst != nil {
		if _dbbec := _cgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbbec != nil {
			return _dbbec
		}
	}
	return nil
}

const (
	ST_OffsetUnset ST_Offset = 0
	ST_OffsetCtr   ST_Offset = 1
	ST_OffsetOff   ST_Offset = 2
)

// Validate validates the RelIds and its children
func (_aefe *RelIds) Validate() error {
	return _aefe.ValidateWithPath("\u0052\u0065\u006c\u0049\u0064\u0073")
}

const (
	ST_DiagramHorizontalAlignmentUnset ST_DiagramHorizontalAlignment = 0
	ST_DiagramHorizontalAlignmentL     ST_DiagramHorizontalAlignment = 1
	ST_DiagramHorizontalAlignmentCtr   ST_DiagramHorizontalAlignment = 2
	ST_DiagramHorizontalAlignmentR     ST_DiagramHorizontalAlignment = 3
	ST_DiagramHorizontalAlignmentNone  ST_DiagramHorizontalAlignment = 4
)

func (_bfgc ST_ConstraintType) Validate() error { return _bfgc.ValidateWithPath("") }

func (_aabc ST_SecondaryChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aabc.String(), start)
}

type ST_ContinueDirection byte

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_acag *CT_Shape) ValidateWithPath(path string) error {
	if _acag.TypeAttr != nil {
		if _cafbc := _acag.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cafbc != nil {
			return _cafbc
		}
	}
	if _acag.AdjLst != nil {
		if _dbbd := _acag.AdjLst.ValidateWithPath(path + "\u002fA\u0064\u006a\u004c\u0073\u0074"); _dbbd != nil {
			return _dbbd
		}
	}
	if _acag.ExtLst != nil {
		if _ccdf := _acag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccdf != nil {
			return _ccdf
		}
	}
	return nil
}

func (_bdd *AG_IteratorAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cg := range start.Attr {
		if _cg.Name.Local == "\u0061\u0078\u0069\u0073" {
			_abc, _cd := ParseSliceST_AxisTypes(_cg.Value)
			if _cd != nil {
				return _cd
			}
			_bdd.AxisAttr = &_abc
			continue
		}
		if _cg.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_dce, _ca := ParseSliceST_ElementTypes(_cg.Value)
			if _ca != nil {
				return _ca
			}
			_bdd.PtTypeAttr = &_dce
			continue
		}
		if _cg.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_bbe, _ecc := ParseSliceST_Booleans(_cg.Value)
			if _ecc != nil {
				return _ecc
			}
			_bdd.HideLastTransAttr = &_bbe
			continue
		}
		if _cg.Name.Local == "\u0073\u0074" {
			_gd, _fa := ParseSliceST_Ints(_cg.Value)
			if _fa != nil {
				return _fa
			}
			_bdd.StAttr = &_gd
			continue
		}
		if _cg.Name.Local == "\u0063\u006e\u0074" {
			_cda, _ag := ParseSliceST_UnsignedInts(_cg.Value)
			if _ag != nil {
				return _ag
			}
			_bdd.CntAttr = &_cda
			continue
		}
		if _cg.Name.Local == "\u0073\u0074\u0065\u0070" {
			_age, _eg := ParseSliceST_Ints(_cg.Value)
			if _eg != nil {
				return _eg
			}
			_bdd.StepAttr = &_age
			continue
		}
	}
	for {
		_ga, _caa := d.Token()
		if _caa != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073\u0069\u006eg\u0020\u0041\u0047\u005f\u0049\u0074\u0065\u0072\u0061\u0074\u006f\u0072\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065s\u003a\u0020\u0025\u0073", _caa)
		}
		if _gfe, _cgg := _ga.(_a.EndElement); _cgg && _gfe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_geac ST_ModelId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _geac.Int32 != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", *_geac.Int32)))
	}
	if _geac.ST_Guid != nil {
		e.EncodeToken(_a.CharData(*_geac.ST_Guid))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

type ST_CxnType byte

// ValidateWithPath validates the CT_DataModel and its children, prefixing error messages with path
func (_bbc *CT_DataModel) ValidateWithPath(path string) error {
	if _gcfa := _bbc.PtLst.ValidateWithPath(path + "\u002f\u0050\u0074\u004c\u0073\u0074"); _gcfa != nil {
		return _gcfa
	}
	if _bbc.CxnLst != nil {
		if _debd := _bbc.CxnLst.ValidateWithPath(path + "\u002fC\u0078\u006e\u004c\u0073\u0074"); _debd != nil {
			return _debd
		}
	}
	if _bbc.Bg != nil {
		if _fecd := _bbc.Bg.ValidateWithPath(path + "\u002f\u0042\u0067"); _fecd != nil {
			return _fecd
		}
	}
	if _bbc.Whole != nil {
		if _eebf := _bbc.Whole.ValidateWithPath(path + "\u002f\u0057\u0068\u006f\u006c\u0065"); _eebf != nil {
			return _eebf
		}
	}
	if _bbc.ExtLst != nil {
		if _gcc := _bbc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcc != nil {
			return _gcc
		}
	}
	return nil
}

func (_agbcb ST_FunctionValue) String() string {
	if _agbcb.Int32 != nil {
		return _ef.Sprintf("\u0025\u0076", *_agbcb.Int32)
	}
	if _agbcb.Bool != nil {
		return _ef.Sprintf("\u0025\u0076", *_agbcb.Bool)
	}
	if _agbcb.ST_Direction != ST_DirectionUnset {
		return _agbcb.ST_Direction.String()
	}
	if _agbcb.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		return _agbcb.ST_HierBranchStyle.String()
	}
	if _agbcb.ST_AnimOneStr != ST_AnimOneStrUnset {
		return _agbcb.ST_AnimOneStr.String()
	}
	if _agbcb.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		return _agbcb.ST_AnimLvlStr.String()
	}
	if _agbcb.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		return _agbcb.ST_ResizeHandlesStr.String()
	}
	return ""
}

func (_fddee *ST_PyramidAccentTextMargin) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfcac, _gceg := d.Token()
	if _gceg != nil {
		return _gceg
	}
	if _dgbf, _ddgac := _cfcac.(_a.EndElement); _ddgac && _dgbf.Name == start.Name {
		*_fddee = 1
		return nil
	}
	if _afcd, _cggef := _cfcac.(_a.CharData); !_cggef {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfcac)
	} else {
		switch string(_afcd) {
		case "":
			*_fddee = 0
		case "\u0073\u0074\u0065\u0070":
			*_fddee = 1
		case "\u0073\u0074\u0061c\u006b":
			*_fddee = 2
		}
	}
	_cfcac, _gceg = d.Token()
	if _gceg != nil {
		return _gceg
	}
	if _ffbf, _aecab := _cfcac.(_a.EndElement); _aecab && _ffbf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfcac)
}

func (_dccdeb ST_VerticalAlignment) ValidateWithPath(path string) error {
	switch _dccdeb {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dccdeb))
	}
	return nil
}

type AG_ConstraintRefAttributes struct {
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}

// ValidateWithPath validates the RelIds and its children, prefixing error messages with path
func (_ggad *RelIds) ValidateWithPath(path string) error {
	if _ccegb := _ggad.CT_RelIds.ValidateWithPath(path); _ccegb != nil {
		return _ccegb
	}
	return nil
}

func (_eedb ST_FunctionType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eedb.String(), start)
}

func (_bgcge ST_GrowDirection) String() string {
	switch _bgcge {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0062\u004c"
	case 4:
		return "\u0062\u0052"
	}
	return ""
}

func (_eegfg *ST_Breakpoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebcc, _ddffc := d.Token()
	if _ddffc != nil {
		return _ddffc
	}
	if _ddggd, _dacfe := _ebcc.(_a.EndElement); _dacfe && _ddggd.Name == start.Name {
		*_eegfg = 1
		return nil
	}
	if _aegfd, _bceed := _ebcc.(_a.CharData); !_bceed {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebcc)
	} else {
		switch string(_aegfd) {
		case "":
			*_eegfg = 0
		case "\u0065\u006e\u0064\u0043\u006e\u0076":
			*_eegfg = 1
		case "\u0062\u0061\u006c":
			*_eegfg = 2
		case "\u0066\u0069\u0078e\u0064":
			*_eegfg = 3
		}
	}
	_ebcc, _ddffc = d.Token()
	if _ddffc != nil {
		return _ddffc
	}
	if _bbgf, _ebdge := _ebcc.(_a.EndElement); _ebdge && _bbgf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebcc)
}

const (
	ST_ConstraintRelationshipUnset ST_ConstraintRelationship = 0
	ST_ConstraintRelationshipSelf  ST_ConstraintRelationship = 1
	ST_ConstraintRelationshipCh    ST_ConstraintRelationship = 2
	ST_ConstraintRelationshipDes   ST_ConstraintRelationship = 3
)

func (_aaedg ST_TextAnchorVertical) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aaedg.String(), start)
}

func (_dbggc ST_HierBranchStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eagfg := _a.Attr{}
	_eagfg.Name = name
	switch _dbggc {
	case ST_HierBranchStyleUnset:
		_eagfg.Value = ""
	case ST_HierBranchStyleL:
		_eagfg.Value = "\u006c"
	case ST_HierBranchStyleR:
		_eagfg.Value = "\u0072"
	case ST_HierBranchStyleHang:
		_eagfg.Value = "\u0068\u0061\u006e\u0067"
	case ST_HierBranchStyleStd:
		_eagfg.Value = "\u0073\u0074\u0064"
	case ST_HierBranchStyleInit:
		_eagfg.Value = "\u0069\u006e\u0069\u0074"
	}
	return _eagfg, nil
}

// Validate validates the CT_Categories and its children
func (_edaee *CT_Categories) Validate() error {
	return _edaee.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

const (
	ST_FunctionTypeUnset    ST_FunctionType = 0
	ST_FunctionTypeCnt      ST_FunctionType = 1
	ST_FunctionTypePos      ST_FunctionType = 2
	ST_FunctionTypeRevPos   ST_FunctionType = 3
	ST_FunctionTypePosEven  ST_FunctionType = 4
	ST_FunctionTypePosOdd   ST_FunctionType = 5
	ST_FunctionTypeVar      ST_FunctionType = 6
	ST_FunctionTypeDepth    ST_FunctionType = 7
	ST_FunctionTypeMaxDepth ST_FunctionType = 8
)

func NewAG_ConstraintRefAttributes() *AG_ConstraintRefAttributes {
	_edg := &AG_ConstraintRefAttributes{}
	return _edg
}

type CT_Adj struct {
	IdxAttr uint32
	ValAttr float64
}

func (_acfe ST_FallbackDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_acfe.String(), start)
}

// Validate validates the CT_CTStyleLabel and its children
func (_cccg *CT_CTStyleLabel) Validate() error {
	return _cccg.ValidateWithPath("\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}

func (_bagaf ST_CxnType) String() string {
	switch _bagaf {
	case 0:
		return ""
	case 1:
		return "\u0070\u0061\u0072O\u0066"
	case 2:
		return "\u0070\u0072\u0065\u0073\u004f\u0066"
	case 3:
		return "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case 4:
		return "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return ""
}

func (_dcga ST_ClrAppMethod) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ccfab := _a.Attr{}
	_ccfab.Name = name
	switch _dcga {
	case ST_ClrAppMethodUnset:
		_ccfab.Value = ""
	case ST_ClrAppMethodSpan:
		_ccfab.Value = "\u0073\u0070\u0061\u006e"
	case ST_ClrAppMethodCycle:
		_ccfab.Value = "\u0063\u0079\u0063l\u0065"
	case ST_ClrAppMethodRepeat:
		_ccfab.Value = "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return _ccfab, nil
}

func (_dffb ST_PyramidAccentPosition) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_agccf := _a.Attr{}
	_agccf.Name = name
	switch _dffb {
	case ST_PyramidAccentPositionUnset:
		_agccf.Value = ""
	case ST_PyramidAccentPositionBef:
		_agccf.Value = "\u0062\u0065\u0066"
	case ST_PyramidAccentPositionAft:
		_agccf.Value = "\u0061\u0066\u0074"
	}
	return _agccf, nil
}

func (_eacbf *ST_PyramidAccentPosition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bfgbe, _agbfe := d.Token()
	if _agbfe != nil {
		return _agbfe
	}
	if _bedb, _gebc := _bfgbe.(_a.EndElement); _gebc && _bedb.Name == start.Name {
		*_eacbf = 1
		return nil
	}
	if _aadf, _eegfc := _bfgbe.(_a.CharData); !_eegfc {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bfgbe)
	} else {
		switch string(_aadf) {
		case "":
			*_eacbf = 0
		case "\u0062\u0065\u0066":
			*_eacbf = 1
		case "\u0061\u0066\u0074":
			*_eacbf = 2
		}
	}
	_bfgbe, _agbfe = d.Token()
	if _agbfe != nil {
		return _agbfe
	}
	if _aafge, _aebd := _bfgbe.(_a.EndElement); _aebd && _aafge.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bfgbe)
}

func (_ffa *CT_Choose) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ffa.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_ffa.NameAttr)})
	}
	e.EncodeToken(start)
	_gagf := _a.StartElement{Name: _a.Name{Local: "\u0069\u0066"}}
	for _, _fgbe := range _ffa.If {
		e.EncodeElement(_fgbe, _gagf)
	}
	if _ffa.Else != nil {
		_gffd := _a.StartElement{Name: _a.Name{Local: "\u0065\u006c\u0073\u0065"}}
		e.EncodeElement(_ffa.Else, _gffd)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_facfe ST_TextBlockDirection) String() string {
	switch _facfe {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}

type ST_ConnectorDimension byte

func (_cgdbc ST_CenterShapeMapping) ValidateWithPath(path string) error {
	switch _cgdbc {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cgdbc))
	}
	return nil
}

func (_ddae ST_BoolOperator) ValidateWithPath(path string) error {
	switch _ddae {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddae))
	}
	return nil
}

func (_bdgb *CT_AnimLvl) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bfde := range start.Attr {
		if _bfde.Name.Local == "\u0076\u0061\u006c" {
			_bdgb.ValAttr.UnmarshalXMLAttr(_bfde)
			continue
		}
	}
	for {
		_beg, _cgf := d.Token()
		if _cgf != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u003a\u0020%\u0073", _cgf)
		}
		if _gac, _ebb := _beg.(_a.EndElement); _ebb && _gac.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_PyramidAccentTextMarginUnset ST_PyramidAccentTextMargin = 0
	ST_PyramidAccentTextMarginStep  ST_PyramidAccentTextMargin = 1
	ST_PyramidAccentTextMarginStack ST_PyramidAccentTextMargin = 2
)

func (_feac *ST_NodeVerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_feac = 0
	case "\u0074":
		*_feac = 1
	case "\u006d\u0069\u0064":
		*_feac = 2
	case "\u0062":
		*_feac = 3
	}
	return nil
}

func (_aeabfe ST_ConnectorRouting) ValidateWithPath(path string) error {
	switch _aeabfe {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aeabfe))
	}
	return nil
}

func (_cgee ST_ContinueDirection) String() string {
	switch _cgee {
	case 0:
		return ""
	case 1:
		return "\u0072\u0065\u0076\u0044\u0069\u0072"
	case 2:
		return "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return ""
}

const (
	ST_ContinueDirectionUnset   ST_ContinueDirection = 0
	ST_ContinueDirectionRevDir  ST_ContinueDirection = 1
	ST_ContinueDirectionSameDir ST_ContinueDirection = 2
)

func (_bdaf *CT_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _efcea := range start.Attr {
		if _efcea.Name.Local == "\u0076\u0061\u006c" {
			_bdaf.ValAttr.UnmarshalXMLAttr(_efcea)
			continue
		}
	}
	for {
		_gbae, _gcg := d.Token()
		if _gcg != nil {
			return _ef.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073", _gcg)
		}
		if _cfeb, _fdb := _gbae.(_a.EndElement); _fdb && _cfeb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_defeg *ST_AutoTextRotation) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_defeg = 0
	case "\u006e\u006f\u006e\u0065":
		*_defeg = 1
	case "\u0075\u0070\u0072":
		*_defeg = 2
	case "\u0067\u0072\u0061\u0076":
		*_defeg = 3
	}
	return nil
}

const (
	ST_ConnectorDimensionUnset ST_ConnectorDimension = 0
	ST_ConnectorDimension1D    ST_ConnectorDimension = 1
	ST_ConnectorDimension2D    ST_ConnectorDimension = 2
	ST_ConnectorDimensionCust  ST_ConnectorDimension = 3
)

func (_baee ST_DiagramHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cbbg := _a.Attr{}
	_cbbg.Name = name
	switch _baee {
	case ST_DiagramHorizontalAlignmentUnset:
		_cbbg.Value = ""
	case ST_DiagramHorizontalAlignmentL:
		_cbbg.Value = "\u006c"
	case ST_DiagramHorizontalAlignmentCtr:
		_cbbg.Value = "\u0063\u0074\u0072"
	case ST_DiagramHorizontalAlignmentR:
		_cbbg.Value = "\u0072"
	case ST_DiagramHorizontalAlignmentNone:
		_cbbg.Value = "\u006e\u006f\u006e\u0065"
	}
	return _cbbg, nil
}

// Validate validates the CT_SDCategory and its children
func (_ccfeb *CT_SDCategory) Validate() error {
	return _ccfeb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

func (_afaea ST_HierarchyAlignment) Validate() error { return _afaea.ValidateWithPath("") }

func (_gfdg ST_TextBlockDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dcda := _a.Attr{}
	_dcda.Name = name
	switch _gfdg {
	case ST_TextBlockDirectionUnset:
		_dcda.Value = ""
	case ST_TextBlockDirectionHorz:
		_dcda.Value = "\u0068\u006f\u0072\u007a"
	case ST_TextBlockDirectionVert:
		_dcda.Value = "\u0076\u0065\u0072\u0074"
	}
	return _dcda, nil
}

func (_cebee ST_ResizeHandlesStr) ValidateWithPath(path string) error {
	switch _cebee {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cebee))
	}
	return nil
}

func (_gcbf ST_RotationPath) Validate() error { return _gcbf.ValidateWithPath("") }

// ValidateWithPath validates the CT_AnimLvl and its children, prefixing error messages with path
func (_def *CT_AnimLvl) ValidateWithPath(path string) error {
	if _gbg := _def.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbg != nil {
		return _gbg
	}
	return nil
}

type CT_CTCategory struct {
	TypeAttr string
	PriAttr  uint32
}

func (_gfgae ST_Direction) String() string {
	switch _gfgae {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0072\u006d"
	case 2:
		return "\u0072\u0065\u0076"
	}
	return ""
}

func (_fcagb ST_TextAnchorVertical) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cdaff := _a.Attr{}
	_cdaff.Name = name
	switch _fcagb {
	case ST_TextAnchorVerticalUnset:
		_cdaff.Value = ""
	case ST_TextAnchorVerticalT:
		_cdaff.Value = "\u0074"
	case ST_TextAnchorVerticalMid:
		_cdaff.Value = "\u006d\u0069\u0064"
	case ST_TextAnchorVerticalB:
		_cdaff.Value = "\u0062"
	}
	return _cdaff, nil
}

// Validate validates the CT_Adj and its children
func (_acf *CT_Adj) Validate() error {
	return _acf.ValidateWithPath("\u0043\u0054\u005f\u0041\u0064\u006a")
}

func (_gcede ST_SecondaryChildAlignment) Validate() error { return _gcede.ValidateWithPath("") }

// Validate validates the CT_When and its children
func (_fcaeg *CT_When) Validate() error {
	return _fcaeg.ValidateWithPath("\u0043T\u005f\u0057\u0068\u0065\u006e")
}

func (_adag ST_VariableType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_adag.String(), start)
}

func (_cdgdd *CT_Shape) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dgfag := range start.Attr {
		if _dgfag.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dgfag.Name.Local == "\u0062\u006c\u0069\u0070" || _dgfag.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dgfag.Name.Local == "\u0062\u006c\u0069\u0070" {
			_edafe, _afgd := _dgfag.Value, error(nil)
			if _afgd != nil {
				return _afgd
			}
			_cdgdd.BlipAttr = &_edafe
			continue
		}
		if _dgfag.Name.Local == "\u0072\u006f\u0074" {
			_dcaeg, _ecfcd := _f.ParseFloat(_dgfag.Value, 64)
			if _ecfcd != nil {
				return _ecfcd
			}
			_cdgdd.RotAttr = &_dcaeg
			continue
		}
		if _dgfag.Name.Local == "\u0074\u0079\u0070\u0065" {
			_bffcc, _dbae := ParseUnionST_LayoutShapeType(_dgfag.Value)
			if _dbae != nil {
				return _dbae
			}
			_cdgdd.TypeAttr = &_bffcc
			continue
		}
		if _dgfag.Name.Local == "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f" {
			_deeg, _degd := _f.ParseInt(_dgfag.Value, 10, 32)
			if _degd != nil {
				return _degd
			}
			_acca := int32(_deeg)
			_cdgdd.ZOrderOffAttr = &_acca
			continue
		}
		if _dgfag.Name.Local == "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d" {
			_fgfe, _gfbb := _f.ParseBool(_dgfag.Value)
			if _gfbb != nil {
				return _gfbb
			}
			_cdgdd.HideGeomAttr = &_fgfe
			continue
		}
		if _dgfag.Name.Local == "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y" {
			_gdga, _dgba := _f.ParseBool(_dgfag.Value)
			if _dgba != nil {
				return _dgba
			}
			_cdgdd.LkTxEntryAttr = &_gdga
			continue
		}
		if _dgfag.Name.Local == "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r" {
			_gdgc, _affa := _f.ParseBool(_dgfag.Value)
			if _affa != nil {
				return _affa
			}
			_cdgdd.BlipPhldrAttr = &_gdgc
			continue
		}
	}
_dfab:
	for {
		_bcged, _ffbb := d.Token()
		if _ffbb != nil {
			return _ffbb
		}
		switch _eagca := _bcged.(type) {
		case _a.StartElement:
			switch _eagca.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}:
				_cdgdd.AdjLst = NewCT_AdjLst()
				if _bgcaf := d.DecodeElement(_cdgdd.AdjLst, &_eagca); _bgcaf != nil {
					return _bgcaf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdgdd.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fcabd := d.DecodeElement(_cdgdd.ExtLst, &_eagca); _fcabd != nil {
					return _fcabd
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u0020\u0025\u0076", _eagca.Name)
				if _bacc := d.Skip(); _bacc != nil {
					return _bacc
				}
			}
		case _a.EndElement:
			break _dfab
		case _a.CharData:
		}
	}
	return nil
}

func (_beed ST_AnimLvlStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_beed.String(), start)
}

func (_fabd ST_HueDir) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fabd.String(), start)
}

func (_adabcf ST_ConnectorDimension) ValidateWithPath(path string) error {
	switch _adabcf {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adabcf))
	}
	return nil
}

func (_dbbefa *CT_SDName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gdfdd := range start.Attr {
		if _gdfdd.Name.Local == "\u006c\u0061\u006e\u0067" {
			_badcg, _aegb := _gdfdd.Value, error(nil)
			if _aegb != nil {
				return _aegb
			}
			_dbbefa.LangAttr = &_badcg
			continue
		}
		if _gdfdd.Name.Local == "\u0076\u0061\u006c" {
			_bdcb, _dbbeb := _gdfdd.Value, error(nil)
			if _dbbeb != nil {
				return _dbbeb
			}
			_dbbefa.ValAttr = _bdcb
			continue
		}
	}
	for {
		_abad, _aebcc := d.Token()
		if _aebcc != nil {
			return _ef.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0044\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _aebcc)
		}
		if _fabea, _egca := _abad.(_a.EndElement); _egca && _fabea.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ForEach struct {
	NameAttr          *string
	RefAttr           *string
	Alg               []*CT_Algorithm
	Shape             []*CT_Shape
	PresOf            []*CT_PresentationOf
	ConstrLst         []*CT_Constraints
	RuleLst           []*CT_Rules
	ForEach           []*CT_ForEach
	LayoutNode        []*CT_LayoutNode
	Choose            []*CT_Choose
	ExtLst            []*_fd.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

type ST_ArrowheadStyle byte

type ColorsDef struct{ CT_ColorTransform }

func (_bc *AG_ConstraintRefAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bc.RefTypeAttr != ST_ConstraintTypeUnset {
		_db, _be := _bc.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _be != nil {
			return _be
		}
		start.Attr = append(start.Attr, _db)
	}
	if _bc.RefForAttr != ST_ConstraintRelationshipUnset {
		_ab, _eda := _bc.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _eda != nil {
			return _eda
		}
		start.Attr = append(start.Attr, _ab)
	}
	if _bc.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_bc.RefForNameAttr)})
	}
	if _bc.RefPtTypeAttr != ST_ElementTypeUnset {
		_cf, _ea := _bc.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _ea != nil {
			return _ea
		}
		start.Attr = append(start.Attr, _cf)
	}
	return nil
}

func (_bdbcb *LayoutDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f"
	return _bdbcb.CT_DiagramDefinition.MarshalXML(e, start)
}

type CT_Constraints struct{ Constr []*CT_Constraint }

type CT_Colors struct {
	MethAttr       ST_ClrAppMethod
	HueDirAttr     ST_HueDir
	EG_ColorChoice []*_fd.EG_ColorChoice
}

func (_aggg *ST_FunctionValue) ValidateWithPath(path string) error {
	_caedf := []string{}
	if _aggg.Int32 != nil {
		_caedf = append(_caedf, "\u0049\u006e\u00743\u0032")
	}
	if _aggg.Bool != nil {
		_caedf = append(_caedf, "\u0042\u006f\u006f\u006c")
	}
	if _aggg.ST_Direction != ST_DirectionUnset {
		_caedf = append(_caedf, "\u0053\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _aggg.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		_caedf = append(_caedf, "\u0053T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
	}
	if _aggg.ST_AnimOneStr != ST_AnimOneStrUnset {
		_caedf = append(_caedf, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u0053\u0074\u0072")
	}
	if _aggg.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		_caedf = append(_caedf, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u0053\u0074\u0072")
	}
	if _aggg.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		_caedf = append(_caedf, "\u0053\u0054\u005f\u0052es\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073\u0053\u0074\u0072")
	}
	if len(_caedf) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _caedf)
	}
	return nil
}

type ST_BoolOperator byte

func (_ffeb *CT_SDDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ffeb.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_ffeb.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _ffeb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_gfcc *ST_LinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aagc, _adbae := d.Token()
	if _adbae != nil {
		return _adbae
	}
	if _gddfeg, _gddba := _aagc.(_a.EndElement); _gddba && _gddfeg.Name == start.Name {
		*_gfcc = 1
		return nil
	}
	if _abccf, _dfcfa := _aagc.(_a.CharData); !_dfcfa {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aagc)
	} else {
		switch string(_abccf) {
		case "":
			*_gfcc = 0
		case "\u0066\u0072\u006fm\u004c":
			*_gfcc = 1
		case "\u0066\u0072\u006fm\u0052":
			*_gfcc = 2
		case "\u0066\u0072\u006fm\u0054":
			*_gfcc = 3
		case "\u0066\u0072\u006fm\u0042":
			*_gfcc = 4
		}
	}
	_aagc, _adbae = d.Token()
	if _adbae != nil {
		return _adbae
	}
	if _bfbfag, _bgddf := _aagc.(_a.EndElement); _bgddf && _bfbfag.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aagc)
}

// Validate validates the CT_DiagramDefinition and its children
func (_bfg *CT_DiagramDefinition) Validate() error {
	return _bfg.ValidateWithPath("C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e")
}

// ValidateWithPath validates the CT_DiagramDefinitionHeader and its children, prefixing error messages with path
func (_cddc *CT_DiagramDefinitionHeader) ValidateWithPath(path string) error {
	for _caae, _fdab := range _cddc.Title {
		if _dbf := _fdab.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _caae)); _dbf != nil {
			return _dbf
		}
	}
	for _afaa, _fbae := range _cddc.Desc {
		if _agf := _fbae.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _afaa)); _agf != nil {
			return _agf
		}
	}
	if _cddc.CatLst != nil {
		if _efb := _cddc.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _efb != nil {
			return _efb
		}
	}
	if _cddc.ExtLst != nil {
		if _becd := _cddc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _becd != nil {
			return _becd
		}
	}
	return nil
}

func (_cbbgc ST_FallbackDimension) Validate() error { return _cbbgc.ValidateWithPath("") }

func (_ecdac ST_TextDirection) Validate() error { return _ecdac.ValidateWithPath("") }

func (_adbf *CT_Constraint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _adbf.OpAttr != ST_BoolOperatorUnset {
		_ffg, _baga := _adbf.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
		if _baga != nil {
			return _baga
		}
		start.Attr = append(start.Attr, _ffg)
	}
	if _adbf.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_adbf.ValAttr)})
	}
	if _adbf.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_adbf.FactAttr)})
	}
	if _adbf.TypeAttr != ST_ConstraintTypeUnset {
		_dfe, _gae := _adbf.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _gae != nil {
			return _gae
		}
		start.Attr = append(start.Attr, _dfe)
	}
	if _adbf.ForAttr != ST_ConstraintRelationshipUnset {
		_gdf, _fgcbg := _adbf.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _fgcbg != nil {
			return _fgcbg
		}
		start.Attr = append(start.Attr, _gdf)
	}
	if _adbf.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_adbf.ForNameAttr)})
	}
	if _adbf.PtTypeAttr != ST_ElementTypeUnset {
		_ceff, _fcbb := _adbf.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _fcbb != nil {
			return _fcbb
		}
		start.Attr = append(start.Attr, _ceff)
	}
	if _adbf.RefTypeAttr != ST_ConstraintTypeUnset {
		_befb, _cagb := _adbf.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _cagb != nil {
			return _cagb
		}
		start.Attr = append(start.Attr, _befb)
	}
	if _adbf.RefForAttr != ST_ConstraintRelationshipUnset {
		_cfcb, _cgb := _adbf.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _cgb != nil {
			return _cgb
		}
		start.Attr = append(start.Attr, _cfcb)
	}
	if _adbf.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_adbf.RefForNameAttr)})
	}
	if _adbf.RefPtTypeAttr != ST_ElementTypeUnset {
		_bdgd, _cdbf := _adbf.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _cdbf != nil {
			return _cdbf
		}
		start.Attr = append(start.Attr, _bdgd)
	}
	e.EncodeToken(start)
	if _adbf.ExtLst != nil {
		_dgg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adbf.ExtLst, _dgg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_egdcg ST_GrowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cfaac := _a.Attr{}
	_cfaac.Name = name
	switch _egdcg {
	case ST_GrowDirectionUnset:
		_cfaac.Value = ""
	case ST_GrowDirectionTL:
		_cfaac.Value = "\u0074\u004c"
	case ST_GrowDirectionTR:
		_cfaac.Value = "\u0074\u0052"
	case ST_GrowDirectionBL:
		_cfaac.Value = "\u0062\u004c"
	case ST_GrowDirectionBR:
		_cfaac.Value = "\u0062\u0052"
	}
	return _cfaac, nil
}

func NewDataModel() *DataModel {
	_deee := &DataModel{}
	_deee.CT_DataModel = *NewCT_DataModel()
	return _deee
}

func (_ddfec ST_BendPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ddfec.String(), start)
}

type CT_BulletEnabled struct{ ValAttr *bool }

func (_dfcdf ST_BendPoint) String() string {
	switch _dfcdf {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0067"
	case 2:
		return "\u0064\u0065\u0066"
	case 3:
		return "\u0065\u006e\u0064"
	}
	return ""
}

func (_dddd ST_ChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dddd.String(), start)
}

func (_ccgf *ST_ChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fbaef, _fecdfb := d.Token()
	if _fecdfb != nil {
		return _fecdfb
	}
	if _befac, _cedb := _fbaef.(_a.EndElement); _cedb && _befac.Name == start.Name {
		*_ccgf = 1
		return nil
	}
	if _begdd, _defb := _fbaef.(_a.CharData); !_defb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbaef)
	} else {
		switch string(_begdd) {
		case "":
			*_ccgf = 0
		case "\u0074":
			*_ccgf = 1
		case "\u0062":
			*_ccgf = 2
		case "\u006c":
			*_ccgf = 3
		case "\u0072":
			*_ccgf = 4
		}
	}
	_fbaef, _fecdfb = d.Token()
	if _fecdfb != nil {
		return _fecdfb
	}
	if _eadaf, _bfcdf := _fbaef.(_a.EndElement); _bfcdf && _eadaf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbaef)
}

func (_cbgcg ST_FunctionValue) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _cbgcg.Int32 != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", *_cbgcg.Int32)))
	}
	if _cbgcg.Bool != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", _gdfe(*_cbgcg.Bool))))
	}
	if _cbgcg.ST_Direction != ST_DirectionUnset {
		e.EncodeToken(_a.CharData(_cbgcg.ST_Direction.String()))
	}
	if _cbgcg.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		e.EncodeToken(_a.CharData(_cbgcg.ST_HierBranchStyle.String()))
	}
	if _cbgcg.ST_AnimOneStr != ST_AnimOneStrUnset {
		e.EncodeToken(_a.CharData(_cbgcg.ST_AnimOneStr.String()))
	}
	if _cbgcg.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		e.EncodeToken(_a.CharData(_cbgcg.ST_AnimLvlStr.String()))
	}
	if _cbgcg.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		e.EncodeToken(_a.CharData(_cbgcg.ST_ResizeHandlesStr.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

func (_aega ST_CenterShapeMapping) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eabg := _a.Attr{}
	_eabg.Name = name
	switch _aega {
	case ST_CenterShapeMappingUnset:
		_eabg.Value = ""
	case ST_CenterShapeMappingNone:
		_eabg.Value = "\u006e\u006f\u006e\u0065"
	case ST_CenterShapeMappingFNode:
		_eabg.Value = "\u0066\u004e\u006fd\u0065"
	}
	return _eabg, nil
}

const (
	ST_ParameterIdUnset            ST_ParameterId = 0
	ST_ParameterIdHorzAlign        ST_ParameterId = 1
	ST_ParameterIdVertAlign        ST_ParameterId = 2
	ST_ParameterIdChDir            ST_ParameterId = 3
	ST_ParameterIdChAlign          ST_ParameterId = 4
	ST_ParameterIdSecChAlign       ST_ParameterId = 5
	ST_ParameterIdLinDir           ST_ParameterId = 6
	ST_ParameterIdSecLinDir        ST_ParameterId = 7
	ST_ParameterIdStElem           ST_ParameterId = 8
	ST_ParameterIdBendPt           ST_ParameterId = 9
	ST_ParameterIdConnRout         ST_ParameterId = 10
	ST_ParameterIdBegSty           ST_ParameterId = 11
	ST_ParameterIdEndSty           ST_ParameterId = 12
	ST_ParameterIdDim              ST_ParameterId = 13
	ST_ParameterIdRotPath          ST_ParameterId = 14
	ST_ParameterIdCtrShpMap        ST_ParameterId = 15
	ST_ParameterIdNodeHorzAlign    ST_ParameterId = 16
	ST_ParameterIdNodeVertAlign    ST_ParameterId = 17
	ST_ParameterIdFallback         ST_ParameterId = 18
	ST_ParameterIdTxDir            ST_ParameterId = 19
	ST_ParameterIdPyraAcctPos      ST_ParameterId = 20
	ST_ParameterIdPyraAcctTxMar    ST_ParameterId = 21
	ST_ParameterIdTxBlDir          ST_ParameterId = 22
	ST_ParameterIdTxAnchorHorz     ST_ParameterId = 23
	ST_ParameterIdTxAnchorVert     ST_ParameterId = 24
	ST_ParameterIdTxAnchorHorzCh   ST_ParameterId = 25
	ST_ParameterIdTxAnchorVertCh   ST_ParameterId = 26
	ST_ParameterIdParTxLTRAlign    ST_ParameterId = 27
	ST_ParameterIdParTxRTLAlign    ST_ParameterId = 28
	ST_ParameterIdShpTxLTRAlignCh  ST_ParameterId = 29
	ST_ParameterIdShpTxRTLAlignCh  ST_ParameterId = 30
	ST_ParameterIdAutoTxRot        ST_ParameterId = 31
	ST_ParameterIdGrDir            ST_ParameterId = 32
	ST_ParameterIdFlowDir          ST_ParameterId = 33
	ST_ParameterIdContDir          ST_ParameterId = 34
	ST_ParameterIdBkpt             ST_ParameterId = 35
	ST_ParameterIdOff              ST_ParameterId = 36
	ST_ParameterIdHierAlign        ST_ParameterId = 37
	ST_ParameterIdBkPtFixedVal     ST_ParameterId = 38
	ST_ParameterIdStBulletLvl      ST_ParameterId = 39
	ST_ParameterIdStAng            ST_ParameterId = 40
	ST_ParameterIdSpanAng          ST_ParameterId = 41
	ST_ParameterIdAr               ST_ParameterId = 42
	ST_ParameterIdLnSpPar          ST_ParameterId = 43
	ST_ParameterIdLnSpAfParP       ST_ParameterId = 44
	ST_ParameterIdLnSpCh           ST_ParameterId = 45
	ST_ParameterIdLnSpAfChP        ST_ParameterId = 46
	ST_ParameterIdRtShortDist      ST_ParameterId = 47
	ST_ParameterIdAlignTx          ST_ParameterId = 48
	ST_ParameterIdPyraLvlNode      ST_ParameterId = 49
	ST_ParameterIdPyraAcctBkgdNode ST_ParameterId = 50
	ST_ParameterIdPyraAcctTxNode   ST_ParameterId = 51
	ST_ParameterIdSrcNode          ST_ParameterId = 52
	ST_ParameterIdDstNode          ST_ParameterId = 53
	ST_ParameterIdBegPts           ST_ParameterId = 54
	ST_ParameterIdEndPts           ST_ParameterId = 55
)

func (_becbc ST_SecondaryLinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_becbc.String(), start)
}

func (_cdge *ST_AnimLvlStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cdge = 0
	case "\u006e\u006f\u006e\u0065":
		*_cdge = 1
	case "\u006c\u0076\u006c":
		*_cdge = 2
	case "\u0063\u0074\u0072":
		*_cdge = 3
	}
	return nil
}

type ST_AxisTypes []ST_AxisType

type CT_ColorTransform struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	StyleLbl     []*CT_CTStyleLabel
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

// Validate validates the CT_PresentationOf and its children
func (_dbbcd *CT_PresentationOf) Validate() error {
	return _dbbcd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066")
}

func (_acefg *ST_DiagramTextAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_daegb, _aded := d.Token()
	if _aded != nil {
		return _aded
	}
	if _gfce, _bedf := _daegb.(_a.EndElement); _bedf && _gfce.Name == start.Name {
		*_acefg = 1
		return nil
	}
	if _eadc, _afgccc := _daegb.(_a.CharData); !_afgccc {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _daegb)
	} else {
		switch string(_eadc) {
		case "":
			*_acefg = 0
		case "\u006c":
			*_acefg = 1
		case "\u0063\u0074\u0072":
			*_acefg = 2
		case "\u0072":
			*_acefg = 3
		}
	}
	_daegb, _aded = d.Token()
	if _aded != nil {
		return _aded
	}
	if _egaad, _aabfc := _daegb.(_a.EndElement); _aabfc && _egaad.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _daegb)
}

type CT_StyleLabel struct {
	NameAttr string
	Scene3d  *_fd.CT_Scene3D
	Sp3d     *_fd.CT_Shape3D
	TxPr     *CT_TextProps
	Style    *_fd.CT_ShapeStyle
	ExtLst   *_fd.CT_OfficeArtExtensionList
}

func (_ggbdg ST_ConnectorRouting) String() string {
	switch _ggbdg {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0072\u0061"
	case 2:
		return "\u0062\u0065\u006e\u0064"
	case 3:
		return "\u0063\u0075\u0072v\u0065"
	case 4:
		return "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return ""
}

func (_gfaec ST_FunctionOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gfaec.String(), start)
}

func (_edae *CT_Algorithm) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_bfd, _bad := _edae.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _bad != nil {
		return _bad
	}
	start.Attr = append(start.Attr, _bfd)
	if _edae.RevAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0076"}, Value: _ef.Sprintf("\u0025\u0076", *_edae.RevAttr)})
	}
	e.EncodeToken(start)
	if _edae.Param != nil {
		_bgb := _a.StartElement{Name: _a.Name{Local: "\u0070\u0061\u0072a\u006d"}}
		for _, _fag := range _edae.Param {
			e.EncodeElement(_fag, _bgb)
		}
	}
	if _edae.ExtLst != nil {
		_bgf := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edae.ExtLst, _bgf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Pt and its children
func (_aebc *CT_Pt) Validate() error { return _aebc.ValidateWithPath("\u0043\u0054\u005fP\u0074") }

func (_ccbe ST_BoolOperator) Validate() error { return _ccbe.ValidateWithPath("") }

// ValidateWithPath validates the CT_Adj and its children, prefixing error messages with path
func (_edf *CT_Adj) ValidateWithPath(path string) error {
	if _edf.IdxAttr < 1 {
		return _ef.Errorf("%\u0073\u002f\u006d\u002e\u0049\u0064x\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _edf.IdxAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_Otherwise and its children, prefixing error messages with path
func (_caecdc *CT_Otherwise) ValidateWithPath(path string) error {
	for _gbeg, _fbgda := range _caecdc.Alg {
		if _gagfc := _fbgda.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _gbeg)); _gagfc != nil {
			return _gagfc
		}
	}
	for _gadd, _gdca := range _caecdc.Shape {
		if _dfdg := _gdca.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _gadd)); _dfdg != nil {
			return _dfdg
		}
	}
	for _adgg, _aebec := range _caecdc.PresOf {
		if _febg := _aebec.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _adgg)); _febg != nil {
			return _febg
		}
	}
	for _befba, _daffa := range _caecdc.ConstrLst {
		if _cadf := _daffa.ValidateWithPath(_ef.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _befba)); _cadf != nil {
			return _cadf
		}
	}
	for _efaea, _effff := range _caecdc.RuleLst {
		if _gdgb := _effff.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _efaea)); _gdgb != nil {
			return _gdgb
		}
	}
	for _fbaa, _bgfa := range _caecdc.ForEach {
		if _dbag := _bgfa.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _fbaa)); _dbag != nil {
			return _dbag
		}
	}
	for _ggefg, _geda := range _caecdc.LayoutNode {
		if _bdfdg := _geda.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _ggefg)); _bdfdg != nil {
			return _bdfdg
		}
	}
	for _adeg, _agg := range _caecdc.Choose {
		if _ecgcb := _agg.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _adeg)); _ecgcb != nil {
			return _ecgcb
		}
	}
	for _eegd, _abcc := range _caecdc.ExtLst {
		if _cfbge := _abcc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _eegd)); _cfbge != nil {
			return _cfbge
		}
	}
	return nil
}

func (_eaag ST_RotationPath) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_adge := _a.Attr{}
	_adge.Name = name
	switch _eaag {
	case ST_RotationPathUnset:
		_adge.Value = ""
	case ST_RotationPathNone:
		_adge.Value = "\u006e\u006f\u006e\u0065"
	case ST_RotationPathAlongPath:
		_adge.Value = "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return _adge, nil
}

func (_ddee *CT_ColorTransformHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_gace:
	for {
		_cbe, _gdaf := d.Token()
		if _gdaf != nil {
			return _gdaf
		}
		switch _dbef := _cbe.(type) {
		case _a.StartElement:
			switch _dbef.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_cbc := NewCT_ColorTransformHeader()
				if _fbd := d.DecodeElement(_cbc, &_dbef); _fbd != nil {
					return _fbd
				}
				_ddee.ColorsDefHdr = append(_ddee.ColorsDefHdr, _cbc)
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0043\u006fl\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _dbef.Name)
				if _cee := d.Skip(); _cee != nil {
					return _cee
				}
			}
		case _a.EndElement:
			break _gace
		case _a.CharData:
		}
	}
	return nil
}

func (_fagdff ST_NodeVerticalAlignment) String() string {
	switch _fagdff {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}

const (
	ST_PtTypeUnset    ST_PtType = 0
	ST_PtTypeNode     ST_PtType = 1
	ST_PtTypeAsst     ST_PtType = 2
	ST_PtTypeDoc      ST_PtType = 3
	ST_PtTypePres     ST_PtType = 4
	ST_PtTypeParTrans ST_PtType = 5
	ST_PtTypeSibTrans ST_PtType = 6
)

func (_cafb *CT_CTCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _cafb.Cat != nil {
		_begb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _bac := range _cafb.Cat {
			e.EncodeElement(_bac, _begb)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_adfda *CT_When) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _adfda.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.NameAttr)})
	}
	_ceeec, _gefbc := _adfda.FuncAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u0075\u006e\u0063"})
	if _gefbc != nil {
		return _gefbc
	}
	start.Attr = append(start.Attr, _ceeec)
	if _adfda.ArgAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0072\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.ArgAttr)})
	}
	_ceeec, _gefbc = _adfda.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
	if _gefbc != nil {
		return _gefbc
	}
	start.Attr = append(start.Attr, _ceeec)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _adfda.ValAttr)})
	if _adfda.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.AxisAttr)})
	}
	if _adfda.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.PtTypeAttr)})
	}
	if _adfda.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.HideLastTransAttr)})
	}
	if _adfda.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.StAttr)})
	}
	if _adfda.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.CntAttr)})
	}
	if _adfda.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _ef.Sprintf("\u0025\u0076", *_adfda.StepAttr)})
	}
	e.EncodeToken(start)
	if _adfda.Alg != nil {
		_cfbeb := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _fggd := range _adfda.Alg {
			e.EncodeElement(_fggd, _cfbeb)
		}
	}
	if _adfda.Shape != nil {
		_gccdf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _beff := range _adfda.Shape {
			e.EncodeElement(_beff, _gccdf)
		}
	}
	if _adfda.PresOf != nil {
		_fbcd := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _cacd := range _adfda.PresOf {
			e.EncodeElement(_cacd, _fbcd)
		}
	}
	if _adfda.ConstrLst != nil {
		_dbbf := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _egcc := range _adfda.ConstrLst {
			e.EncodeElement(_egcc, _dbbf)
		}
	}
	if _adfda.RuleLst != nil {
		_ceec := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _bgea := range _adfda.RuleLst {
			e.EncodeElement(_bgea, _ceec)
		}
	}
	if _adfda.ForEach != nil {
		_begcg := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _ddfga := range _adfda.ForEach {
			e.EncodeElement(_ddfga, _begcg)
		}
	}
	if _adfda.LayoutNode != nil {
		_dage := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _egdca := range _adfda.LayoutNode {
			e.EncodeElement(_egdca, _dage)
		}
	}
	if _adfda.Choose != nil {
		_ccdae := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _bfdef := range _adfda.Choose {
			e.EncodeElement(_bfdef, _ccdae)
		}
	}
	if _adfda.ExtLst != nil {
		_cdbe := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _debf := range _adfda.ExtLst {
			e.EncodeElement(_debf, _cdbe)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_dcad *ST_ParameterVal) ValidateWithPath(path string) error {
	_ebdf := []string{}
	if _dcad.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _dcad.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		_ebdf = append(_ebdf, "S\u0054_\u0056\u0065\u0072\u0074\u0069\u0063\u0061\u006cA\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _dcad.ST_ChildDirection != ST_ChildDirectionUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0044\u0069\u0072\u0065c\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_ChildAlignment != ST_ChildAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067n\u006d\u0065\u006e\u0074")
	}
	if _dcad.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0053\u0065\u0063\u006f\u006e\u0064\u0061\u0072y\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _dcad.ST_LinearDirection != ST_LinearDirectionUnset {
		_ebdf = append(_ebdf, "\u0053T\u005fL\u0069\u006e\u0065\u0061\u0072D\u0069\u0072e\u0063\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0053\u0065\u0063\u006fn\u0064\u0061\u0072\u0079\u004c\u0069\u006e\u0065\u0061r\u0044\u0069\u0072e\u0063t\u0069\u006f\u006e")
	}
	if _dcad.ST_StartingElement != ST_StartingElementUnset {
		_ebdf = append(_ebdf, "\u0053T\u005fS\u0074\u0061\u0072\u0074\u0069n\u0067\u0045l\u0065\u006d\u0065\u006e\u0074")
	}
	if _dcad.ST_BendPoint != ST_BendPointUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005fB\u0065\u006e\u0064\u0050\u006f\u0069\u006e\u0074")
	}
	if _dcad.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0043on\u006e\u0065\u0063\u0074\u006f\u0072\u0052\u006f\u0075\u0074\u0069\u006e\u0067")
	}
	if _dcad.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0041\u0072\u0072\u006f\u0077\u0068\u0065\u0061\u0064S\u0074\u0079\u006c\u0065")
	}
	if _dcad.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u0044\u0069m\u0065\u006e\u0073\u0069\u006f\u006e")
	}
	if _dcad.ST_RotationPath != ST_RotationPathUnset {
		_ebdf = append(_ebdf, "\u0053T\u005fR\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0050\u0061\u0074\u0068")
	}
	if _dcad.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0043\u0065nt\u0065r\u0053\u0068\u0061\u0070\u0065M\u0061\u0070\u0070\u0069\u006e\u0067")
	}
	if _dcad.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u004e\u006f\u0064\u0065\u0048\u006f\u0072\u0069z\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _dcad.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053T\u005f\u004e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0069\u0063a\u006c\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _dcad.ST_FallbackDimension != ST_FallbackDimensionUnset {
		_ebdf = append(_ebdf, "S\u0054_\u0046\u0061\u006c\u006c\u0062\u0061\u0063\u006bD\u0069\u006d\u0065\u006esi\u006f\u006e")
	}
	if _dcad.ST_TextDirection != ST_TextDirectionUnset {
		_ebdf = append(_ebdf, "\u0053\u0054_\u0054\u0065\u0078t\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		_ebdf = append(_ebdf, "\u0053T\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041\u0063\u0063e\u006e\u0074\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041c\u0063\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u004d\u0061r\u0067\u0069\u006e")
	}
	if _dcad.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0054\u0065xt\u0042l\u006f\u0063\u006b\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005fTe\u0078\u0074\u0041\u006e\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c")
	}
	if _dcad.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0054\u0065xt\u0041n\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0069\u0063\u0061\u006c")
	}
	if _dcad.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005fDi\u0061\u0067\u0072\u0061\u006d\u0054\u0065\u0078\u0074\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _dcad.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0041ut\u006f\u0054\u0065\u0078\u0074\u0052\u006f\u0074\u0061\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_GrowDirection != ST_GrowDirectionUnset {
		_ebdf = append(_ebdf, "\u0053\u0054_\u0047\u0072\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_FlowDirection != ST_FlowDirectionUnset {
		_ebdf = append(_ebdf, "\u0053\u0054_\u0046\u006c\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _dcad.ST_ContinueDirection != ST_ContinueDirectionUnset {
		_ebdf = append(_ebdf, "S\u0054_\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065D\u0069\u0072\u0065\u0063ti\u006f\u006e")
	}
	if _dcad.ST_Breakpoint != ST_BreakpointUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0070\u006f\u0069\u006e\u0074")
	}
	if _dcad.ST_Offset != ST_OffsetUnset {
		_ebdf = append(_ebdf, "\u0053T\u005f\u004f\u0066\u0066\u0073\u0065t")
	}
	if _dcad.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		_ebdf = append(_ebdf, "S\u0054\u005f\u0048\u0069er\u0061r\u0063\u0068\u0079\u0041\u006ci\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _dcad.Int32 != nil {
		_ebdf = append(_ebdf, "\u0049\u006e\u00743\u0032")
	}
	if _dcad.Float64 != nil {
		_ebdf = append(_ebdf, "\u0046l\u006f\u0061\u0074\u0036\u0034")
	}
	if _dcad.Bool != nil {
		_ebdf = append(_ebdf, "\u0042\u006f\u006f\u006c")
	}
	if _dcad.StringVal != nil {
		_ebdf = append(_ebdf, "\u0053t\u0072\u0069\u006e\u0067\u0056\u0061l")
	}
	if _dcad.ST_ConnectorPoint != ST_ConnectorPointUnset {
		_ebdf = append(_ebdf, "\u0053\u0054\u005f\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072P\u006f\u0069\u006e\u0074")
	}
	if len(_ebdf) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ebdf)
	}
	return nil
}

func (_gage *CT_OrgChart) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ecdcd := range start.Attr {
		if _ecdcd.Name.Local == "\u0076\u0061\u006c" {
			_fgcbge, _cbgcc := _f.ParseBool(_ecdcd.Value)
			if _cbgcc != nil {
				return _cbgcc
			}
			_gage.ValAttr = &_fgcbge
			continue
		}
	}
	for {
		_cdeab, _gaeg := d.Token()
		if _gaeg != nil {
			return _ef.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074\u003a\u0020\u0025\u0073", _gaeg)
		}
		if _fcdc, _gdc := _cdeab.(_a.EndElement); _gdc && _fcdc.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_ResizeHandlesStrUnset ST_ResizeHandlesStr = 0
	ST_ResizeHandlesStrExact ST_ResizeHandlesStr = 1
	ST_ResizeHandlesStrRel   ST_ResizeHandlesStr = 2
)

func (_cfd *CT_ChildMax) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cfd.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_cfd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bga *CT_Category) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _efgb := range start.Attr {
		if _efgb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_dab, _fdfc := _efgb.Value, error(nil)
			if _fdfc != nil {
				return _fdfc
			}
			_bga.TypeAttr = _dab
			continue
		}
		if _efgb.Name.Local == "\u0070\u0072\u0069" {
			_daf, _eacc := _f.ParseUint(_efgb.Value, 10, 32)
			if _eacc != nil {
				return _eacc
			}
			_bga.PriAttr = uint32(_daf)
			continue
		}
	}
	for {
		_afdf, _feg := d.Token()
		if _feg != nil {
			return _ef.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079\u003a\u0020\u0025\u0073", _feg)
		}
		if _gbfg, _bcga := _afdf.(_a.EndElement); _bcga && _gbfg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinition and its children, prefixing error messages with path
func (_dbeda *CT_StyleDefinition) ValidateWithPath(path string) error {
	for _gaafb, _fdgae := range _dbeda.Title {
		if _ebba := _fdgae.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _gaafb)); _ebba != nil {
			return _ebba
		}
	}
	for _cfec, _eefc := range _dbeda.Desc {
		if _aace := _eefc.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _cfec)); _aace != nil {
			return _aace
		}
	}
	if _dbeda.CatLst != nil {
		if _dcbc := _dbeda.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _dcbc != nil {
			return _dcbc
		}
	}
	if _dbeda.Scene3d != nil {
		if _cgda := _dbeda.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _cgda != nil {
			return _cgda
		}
	}
	for _eeagc, _gfbe := range _dbeda.StyleLbl {
		if _beaf := _gfbe.ValidateWithPath(_ef.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _eeagc)); _beaf != nil {
			return _beaf
		}
	}
	if _dbeda.ExtLst != nil {
		if _ddfe := _dbeda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddfe != nil {
			return _ddfe
		}
	}
	return nil
}

type CT_DiagramDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	DefStyleAttr *string
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	SampData     *CT_SampleData
	StyleData    *CT_SampleData
	ClrData      *CT_SampleData
	LayoutNode   *CT_LayoutNode
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

func (_cgad *CT_ForEach) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cgad.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.NameAttr)})
	}
	if _cgad.RefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.RefAttr)})
	}
	if _cgad.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.AxisAttr)})
	}
	if _cgad.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.PtTypeAttr)})
	}
	if _cgad.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.HideLastTransAttr)})
	}
	if _cgad.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.StAttr)})
	}
	if _cgad.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.CntAttr)})
	}
	if _cgad.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _ef.Sprintf("\u0025\u0076", *_cgad.StepAttr)})
	}
	e.EncodeToken(start)
	if _cgad.Alg != nil {
		_gead := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _cdegd := range _cgad.Alg {
			e.EncodeElement(_cdegd, _gead)
		}
	}
	if _cgad.Shape != nil {
		_gdeff := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _geeg := range _cgad.Shape {
			e.EncodeElement(_geeg, _gdeff)
		}
	}
	if _cgad.PresOf != nil {
		_gcaf := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _aaed := range _cgad.PresOf {
			e.EncodeElement(_aaed, _gcaf)
		}
	}
	if _cgad.ConstrLst != nil {
		_fdg := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _beag := range _cgad.ConstrLst {
			e.EncodeElement(_beag, _fdg)
		}
	}
	if _cgad.RuleLst != nil {
		_fcfc := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _gecd := range _cgad.RuleLst {
			e.EncodeElement(_gecd, _fcfc)
		}
	}
	if _cgad.ForEach != nil {
		_bcaeg := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _bede := range _cgad.ForEach {
			e.EncodeElement(_bede, _bcaeg)
		}
	}
	if _cgad.LayoutNode != nil {
		_cfgc := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _fbda := range _cgad.LayoutNode {
			e.EncodeElement(_fbda, _cfgc)
		}
	}
	if _cgad.Choose != nil {
		_eceg := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _cedf := range _cgad.Choose {
			e.EncodeElement(_cedf, _eceg)
		}
	}
	if _cgad.ExtLst != nil {
		_dfef := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _gafd := range _cgad.ExtLst {
			e.EncodeElement(_gafd, _dfef)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_feaa *ST_FunctionArgument) Validate() error { return _feaa.ValidateWithPath("") }

func (_cecc ST_PtType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdae := _a.Attr{}
	_gdae.Name = name
	switch _cecc {
	case ST_PtTypeUnset:
		_gdae.Value = ""
	case ST_PtTypeNode:
		_gdae.Value = "\u006e\u006f\u0064\u0065"
	case ST_PtTypeAsst:
		_gdae.Value = "\u0061\u0073\u0073\u0074"
	case ST_PtTypeDoc:
		_gdae.Value = "\u0064\u006f\u0063"
	case ST_PtTypePres:
		_gdae.Value = "\u0070\u0072\u0065\u0073"
	case ST_PtTypeParTrans:
		_gdae.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_PtTypeSibTrans:
		_gdae.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _gdae, nil
}

// Validate validates the CT_CTCategories and its children
func (_aaec *CT_CTCategories) Validate() error {
	return _aaec.ValidateWithPath("\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

// ValidateWithPath validates the AG_IteratorAttributes and its children, prefixing error messages with path
func (_dcb *AG_IteratorAttributes) ValidateWithPath(path string) error { return nil }

const (
	ST_CenterShapeMappingUnset ST_CenterShapeMapping = 0
	ST_CenterShapeMappingNone  ST_CenterShapeMapping = 1
	ST_CenterShapeMappingFNode ST_CenterShapeMapping = 2
)

func (_dcab ST_ClrAppMethod) String() string {
	switch _dcab {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0063\u0079\u0063l\u0065"
	case 3:
		return "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return ""
}

func (_bfefc ST_ResizeHandlesStr) String() string {
	switch _bfefc {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0061c\u0074"
	case 2:
		return "\u0072\u0065\u006c"
	}
	return ""
}

func (_cbcb *ST_RotationPath) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fadc, _degac := d.Token()
	if _degac != nil {
		return _degac
	}
	if _bgeb, _bdbgc := _fadc.(_a.EndElement); _bdbgc && _bgeb.Name == start.Name {
		*_cbcb = 1
		return nil
	}
	if _cfge, _fccf := _fadc.(_a.CharData); !_fccf {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fadc)
	} else {
		switch string(_cfge) {
		case "":
			*_cbcb = 0
		case "\u006e\u006f\u006e\u0065":
			*_cbcb = 1
		case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
			*_cbcb = 2
		}
	}
	_fadc, _degac = d.Token()
	if _degac != nil {
		return _degac
	}
	if _fgbf, _cacc := _fadc.(_a.EndElement); _cacc && _fgbf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fadc)
}

func (_bbba *CT_StyleDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _bbba.UniqueIdAttr)})
	if _bbba.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_bbba.MinVerAttr)})
	}
	if _bbba.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bbba.ResIdAttr)})
	}
	e.EncodeToken(start)
	_fdfa := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _gade := range _bbba.Title {
		e.EncodeElement(_gade, _fdfa)
	}
	_cbdfa := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _afddc := range _bbba.Desc {
		e.EncodeElement(_afddc, _cbdfa)
	}
	if _bbba.CatLst != nil {
		_beca := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbba.CatLst, _beca)
	}
	if _bbba.ExtLst != nil {
		_dgeff := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbba.ExtLst, _dgeff)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ForEach and its children, prefixing error messages with path
func (_dfce *CT_ForEach) ValidateWithPath(path string) error {
	for _accd, _ebae := range _dfce.Alg {
		if _fafg := _ebae.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _accd)); _fafg != nil {
			return _fafg
		}
	}
	for _cdgc, _aafe := range _dfce.Shape {
		if _eab := _aafe.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _cdgc)); _eab != nil {
			return _eab
		}
	}
	for _bee, _fbde := range _dfce.PresOf {
		if _gcbdf := _fbde.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _bee)); _gcbdf != nil {
			return _gcbdf
		}
	}
	for _aca, _fbcg := range _dfce.ConstrLst {
		if _cgca := _fbcg.ValidateWithPath(_ef.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _aca)); _cgca != nil {
			return _cgca
		}
	}
	for _fdfcb, _eccd := range _dfce.RuleLst {
		if _beec := _eccd.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _fdfcb)); _beec != nil {
			return _beec
		}
	}
	for _gcef, _fcge := range _dfce.ForEach {
		if _fdge := _fcge.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _gcef)); _fdge != nil {
			return _fdge
		}
	}
	for _bfeae, _fegb := range _dfce.LayoutNode {
		if _gegab := _fegb.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _bfeae)); _gegab != nil {
			return _gegab
		}
	}
	for _fbec, _cega := range _dfce.Choose {
		if _dggb := _cega.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _fbec)); _dggb != nil {
			return _dggb
		}
	}
	for _efcf, _adga := range _dfce.ExtLst {
		if _fcfcd := _adga.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _efcf)); _fcfcd != nil {
			return _fcfcd
		}
	}
	return nil
}

func (_bcceg ST_CxnType) ValidateWithPath(path string) error {
	switch _bcceg {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcceg))
	}
	return nil
}

// ValidateWithPath validates the CT_ChildPref and its children, prefixing error messages with path
func (_dfd *CT_ChildPref) ValidateWithPath(path string) error {
	if _dfd.ValAttr != nil {
		if *_dfd.ValAttr < -1 {
			return _ef.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dfd.ValAttr)
		}
	}
	return nil
}

func (_gbcee ST_ParameterId) ValidateWithPath(path string) error {
	switch _gbcee {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbcee))
	}
	return nil
}

const (
	ST_DirectionUnset ST_Direction = 0
	ST_DirectionNorm  ST_Direction = 1
	ST_DirectionRev   ST_Direction = 2
)

func ParseUnionST_LayoutShapeType(s string) (ST_LayoutShapeType, error) {
	return ST_LayoutShapeType{}, nil
}

// ValidateWithPath validates the CT_Colors and its children, prefixing error messages with path
func (_eccb *CT_Colors) ValidateWithPath(path string) error {
	if _daae := _eccb.MethAttr.ValidateWithPath(path + "\u002fM\u0065\u0074\u0068\u0041\u0074\u0074r"); _daae != nil {
		return _daae
	}
	if _gbcd := _eccb.HueDirAttr.ValidateWithPath(path + "/\u0048\u0075\u0065\u0044\u0069\u0072\u0041\u0074\u0074\u0072"); _gbcd != nil {
		return _gbcd
	}
	for _bgdc, _cabgg := range _eccb.EG_ColorChoice {
		if _cdb := _cabgg.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0045\u0047_C\u006fl\u006f\u0072\u0043\u0068\u006fi\u0063\u0065\u005b\u0025\u0064\u005d", path, _bgdc)); _cdb != nil {
			return _cdb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Constraint and its children, prefixing error messages with path
func (_adcg *CT_Constraint) ValidateWithPath(path string) error {
	if _gddc := _adcg.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _gddc != nil {
		return _gddc
	}
	if _adcg.ExtLst != nil {
		if _eaab := _adcg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eaab != nil {
			return _eaab
		}
	}
	if _ddbe := _adcg.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ddbe != nil {
		return _ddbe
	}
	if _gdfg := _adcg.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _gdfg != nil {
		return _gdfg
	}
	if _ccb := _adcg.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ccb != nil {
		return _ccb
	}
	if _cecb := _adcg.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _cecb != nil {
		return _cecb
	}
	if _efae := _adcg.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _efae != nil {
		return _efae
	}
	if _ebdc := _adcg.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _ebdc != nil {
		return _ebdc
	}
	return nil
}

func (_ecde *ST_DiagramHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bafce, _ecb := d.Token()
	if _ecb != nil {
		return _ecb
	}
	if _eabf, _gede := _bafce.(_a.EndElement); _gede && _eabf.Name == start.Name {
		*_ecde = 1
		return nil
	}
	if _baffg, _edabd := _bafce.(_a.CharData); !_edabd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bafce)
	} else {
		switch string(_baffg) {
		case "":
			*_ecde = 0
		case "\u006c":
			*_ecde = 1
		case "\u0063\u0074\u0072":
			*_ecde = 2
		case "\u0072":
			*_ecde = 3
		case "\u006e\u006f\u006e\u0065":
			*_ecde = 4
		}
	}
	_bafce, _ecb = d.Token()
	if _ecb != nil {
		return _ecb
	}
	if _eefbg, _gcea := _bafce.(_a.EndElement); _gcea && _eefbg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bafce)
}

func (_cgebbf ST_ParameterId) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_efag := _a.Attr{}
	_efag.Name = name
	switch _cgebbf {
	case ST_ParameterIdUnset:
		_efag.Value = ""
	case ST_ParameterIdHorzAlign:
		_efag.Value = "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdVertAlign:
		_efag.Value = "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdChDir:
		_efag.Value = "\u0063\u0068\u0044i\u0072"
	case ST_ParameterIdChAlign:
		_efag.Value = "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdSecChAlign:
		_efag.Value = "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdLinDir:
		_efag.Value = "\u006c\u0069\u006e\u0044\u0069\u0072"
	case ST_ParameterIdSecLinDir:
		_efag.Value = "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case ST_ParameterIdStElem:
		_efag.Value = "\u0073\u0074\u0045\u006c\u0065\u006d"
	case ST_ParameterIdBendPt:
		_efag.Value = "\u0062\u0065\u006e\u0064\u0050\u0074"
	case ST_ParameterIdConnRout:
		_efag.Value = "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case ST_ParameterIdBegSty:
		_efag.Value = "\u0062\u0065\u0067\u0053\u0074\u0079"
	case ST_ParameterIdEndSty:
		_efag.Value = "\u0065\u006e\u0064\u0053\u0074\u0079"
	case ST_ParameterIdDim:
		_efag.Value = "\u0064\u0069\u006d"
	case ST_ParameterIdRotPath:
		_efag.Value = "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case ST_ParameterIdCtrShpMap:
		_efag.Value = "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case ST_ParameterIdNodeHorzAlign:
		_efag.Value = "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdNodeVertAlign:
		_efag.Value = "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdFallback:
		_efag.Value = "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case ST_ParameterIdTxDir:
		_efag.Value = "\u0074\u0078\u0044i\u0072"
	case ST_ParameterIdPyraAcctPos:
		_efag.Value = "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case ST_ParameterIdPyraAcctTxMar:
		_efag.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case ST_ParameterIdTxBlDir:
		_efag.Value = "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case ST_ParameterIdTxAnchorHorz:
		_efag.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case ST_ParameterIdTxAnchorVert:
		_efag.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case ST_ParameterIdTxAnchorHorzCh:
		_efag.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case ST_ParameterIdTxAnchorVertCh:
		_efag.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case ST_ParameterIdParTxLTRAlign:
		_efag.Value = "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdParTxRTLAlign:
		_efag.Value = "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdShpTxLTRAlignCh:
		_efag.Value = "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdShpTxRTLAlignCh:
		_efag.Value = "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdAutoTxRot:
		_efag.Value = "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case ST_ParameterIdGrDir:
		_efag.Value = "\u0067\u0072\u0044i\u0072"
	case ST_ParameterIdFlowDir:
		_efag.Value = "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case ST_ParameterIdContDir:
		_efag.Value = "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case ST_ParameterIdBkpt:
		_efag.Value = "\u0062\u006b\u0070\u0074"
	case ST_ParameterIdOff:
		_efag.Value = "\u006f\u0066\u0066"
	case ST_ParameterIdHierAlign:
		_efag.Value = "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdBkPtFixedVal:
		_efag.Value = "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ParameterIdStBulletLvl:
		_efag.Value = "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case ST_ParameterIdStAng:
		_efag.Value = "\u0073\u0074\u0041n\u0067"
	case ST_ParameterIdSpanAng:
		_efag.Value = "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case ST_ParameterIdAr:
		_efag.Value = "\u0061\u0072"
	case ST_ParameterIdLnSpPar:
		_efag.Value = "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case ST_ParameterIdLnSpAfParP:
		_efag.Value = "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case ST_ParameterIdLnSpCh:
		_efag.Value = "\u006c\u006e\u0053\u0070\u0043\u0068"
	case ST_ParameterIdLnSpAfChP:
		_efag.Value = "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case ST_ParameterIdRtShortDist:
		_efag.Value = "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case ST_ParameterIdAlignTx:
		_efag.Value = "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case ST_ParameterIdPyraLvlNode:
		_efag.Value = "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctBkgdNode:
		_efag.Value = "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctTxNode:
		_efag.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case ST_ParameterIdSrcNode:
		_efag.Value = "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case ST_ParameterIdDstNode:
		_efag.Value = "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case ST_ParameterIdBegPts:
		_efag.Value = "\u0062\u0065\u0067\u0050\u0074\u0073"
	case ST_ParameterIdEndPts:
		_efag.Value = "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return _efag, nil
}

func NewCT_ChildMax() *CT_ChildMax { _aedf := &CT_ChildMax{}; return _aedf }

const (
	ST_PyramidAccentPositionUnset ST_PyramidAccentPosition = 0
	ST_PyramidAccentPositionBef   ST_PyramidAccentPosition = 1
	ST_PyramidAccentPositionAft   ST_PyramidAccentPosition = 2
)

func (_bdba ST_ParameterId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bdba.String(), start)
}

func (_cfgf *CT_ElemPropSet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ebcb := range start.Attr {
		if _ebcb.Name.Local == "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074" {
			_cfab, _ggf := _f.ParseBool(_ebcb.Value)
			if _ggf != nil {
				return _ggf
			}
			_cfgf.CustFlipVertAttr = &_cfab
			continue
		}
		if _ebcb.Name.Local == "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044" {
			_effg, _ecad := ParseUnionST_ModelId(_ebcb.Value)
			if _ecad != nil {
				return _ecad
			}
			_cfgf.PresAssocIDAttr = &_effg
			continue
		}
		if _ebcb.Name.Local == "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072" {
			_eefb, _cabf := _f.ParseBool(_ebcb.Value)
			if _cabf != nil {
				return _cabf
			}
			_cfgf.CustFlipHorAttr = &_eefb
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_befd, _bcfc := _ebcb.Value, error(nil)
			if _bcfc != nil {
				return _bcfc
			}
			_cfgf.PresStyleLblAttr = &_befd
			continue
		}
		if _ebcb.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0058" {
			_gcaa, _geea := _f.ParseInt(_ebcb.Value, 10, 32)
			if _geea != nil {
				return _geea
			}
			_cecf := int32(_gcaa)
			_cfgf.CustSzXAttr = &_cecf
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074" {
			_ecee, _febe := _f.ParseInt(_ebcb.Value, 10, 32)
			if _febe != nil {
				return _febe
			}
			_edced := int32(_ecee)
			_cfgf.PresStyleCntAttr = &_edced
			continue
		}
		if _ebcb.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0059" {
			_cgfc, _adfb := _f.ParseInt(_ebcb.Value, 10, 32)
			if _adfb != nil {
				return _adfb
			}
			_cbega := int32(_cgfc)
			_cfgf.CustSzYAttr = &_cbega
			continue
		}
		if _ebcb.Name.Local == "\u006co\u0043\u0061\u0074\u0049\u0064" {
			_gffb, _faga := _ebcb.Value, error(nil)
			if _faga != nil {
				return _faga
			}
			_cfgf.LoCatIdAttr = &_gffb
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058" {
			_dcgbb, _bbeb := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _bbeb != nil {
				return _bbeb
			}
			_cfgf.CustScaleXAttr = &_dcgbb
			continue
		}
		if _ebcb.Name.Local == "\u0071s\u0043\u0061\u0074\u0049\u0064" {
			_fgcc, _febb := _ebcb.Value, error(nil)
			if _febb != nil {
				return _febb
			}
			_cfgf.QsCatIdAttr = &_fgcc
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059" {
			_gfae, _cecbe := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _cecbe != nil {
				return _cecbe
			}
			_cfgf.CustScaleYAttr = &_gfae
			continue
		}
		if _ebcb.Name.Local == "\u0063u\u0073\u0074\u0041\u006e\u0067" {
			_eada, _ecge := _f.ParseInt(_ebcb.Value, 10, 32)
			if _ecge != nil {
				return _ecge
			}
			_ffdf := int32(_eada)
			_cfgf.CustAngAttr = &_ffdf
			continue
		}
		if _ebcb.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064" {
			_aeab, _gcgd := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _gcgd != nil {
				return _gcgd
			}
			_cfgf.CustRadScaleRadAttr = &_aeab
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058" {
			_dbff, _abbd := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _abbd != nil {
				return _abbd
			}
			_cfgf.CustLinFactXAttr = &_dbff
			continue
		}
		if _ebcb.Name.Local == "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_gfed, _gfee := _ebcb.Value, error(nil)
			if _gfee != nil {
				return _gfee
			}
			_cfgf.QsTypeIdAttr = &_gfed
			continue
		}
		if _ebcb.Name.Local == "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066" {
			_fdde, _gbeb := _f.ParseBool(_ebcb.Value)
			if _gbeb != nil {
				return _gbeb
			}
			_cfgf.Coherent3DOffAttr = &_fdde
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0075\u0073t\u0054" {
			_ffgf, _fffg := _f.ParseBool(_ebcb.Value)
			if _fffg != nil {
				return _fffg
			}
			_cfgf.CustTAttr = &_ffgf
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065" {
			_ddca, _bbed := _ebcb.Value, error(nil)
			if _bbed != nil {
				return _bbed
			}
			_cfgf.PresNameAttr = &_ddca
			continue
		}
		if _ebcb.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059" {
			_eagc, _cebd := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _cebd != nil {
				return _cebd
			}
			_cfgf.CustLinFactNeighborYAttr = &_eagc
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059" {
			_ceee, _ffbg := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _ffbg != nil {
				return _ffbg
			}
			_cfgf.CustLinFactYAttr = &_ceee
			continue
		}
		if _ebcb.Name.Local == "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064" {
			_bdab, _ffda := _ebcb.Value, error(nil)
			if _ffda != nil {
				return _ffda
			}
			_cfgf.LoTypeIdAttr = &_bdab
			continue
		}
		if _ebcb.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063" {
			_eeef, _gbfgg := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _gbfgg != nil {
				return _gbfgg
			}
			_cfgf.CustRadScaleIncAttr = &_eeef
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0068\u006cd\u0072" {
			_ebeba, _dcgc := _f.ParseBool(_ebcb.Value)
			if _dcgc != nil {
				return _dcgc
			}
			_cfgf.PhldrAttr = &_ebeba
			continue
		}
		if _ebcb.Name.Local == "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_edcec, _degc := _ebcb.Value, error(nil)
			if _degc != nil {
				return _degc
			}
			_cfgf.CsTypeIdAttr = &_edcec
			continue
		}
		if _ebcb.Name.Local == "\u0063s\u0043\u0061\u0074\u0049\u0064" {
			_cfdd, _dbbb := _ebcb.Value, error(nil)
			if _dbbb != nil {
				return _dbbb
			}
			_cfgf.CsCatIdAttr = &_cfdd
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0068\u006c\u0064\u0072\u0054" {
			_gdef, _fcac := _ebcb.Value, error(nil)
			if _fcac != nil {
				return _fcac
			}
			_cfgf.PhldrTAttr = &_gdef
			continue
		}
		if _ebcb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078" {
			_ebgc, _gddfe := _f.ParseInt(_ebcb.Value, 10, 32)
			if _gddfe != nil {
				return _gddfe
			}
			_ebda := int32(_ebgc)
			_cfgf.PresStyleIdxAttr = &_ebda
			continue
		}
		if _ebcb.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058" {
			_eefd, _deac := ParseUnionST_PrSetCustVal(_ebcb.Value)
			if _deac != nil {
				return _deac
			}
			_cfgf.CustLinFactNeighborXAttr = &_eefd
			continue
		}
	}
_ddac:
	for {
		_acgg, _abfa := d.Token()
		if _abfa != nil {
			return _abfa
		}
		switch _bcae := _acgg.(type) {
		case _a.StartElement:
			switch _bcae.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}:
				_cfgf.PresLayoutVars = NewCT_LayoutVariablePropertySet()
				if _bbce := d.DecodeElement(_cfgf.PresLayoutVars, &_bcae); _bbce != nil {
					return _bbce
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_cfgf.Style = _fd.NewCT_ShapeStyle()
				if _gefe := d.DecodeElement(_cfgf.Style, &_bcae); _gefe != nil {
					return _gefe
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072\u006fp\u0053e\u0074\u0020\u0025\u0076", _bcae.Name)
				if _cggcd := d.Skip(); _cggcd != nil {
					return _cggcd
				}
			}
		case _a.EndElement:
			break _ddac
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_TextAnchorVerticalUnset ST_TextAnchorVertical = 0
	ST_TextAnchorVerticalT     ST_TextAnchorVertical = 1
	ST_TextAnchorVerticalMid   ST_TextAnchorVertical = 2
	ST_TextAnchorVerticalB     ST_TextAnchorVertical = 3
)

// Validate validates the CT_CTCategory and its children
func (_egbd *CT_CTCategory) Validate() error {
	return _egbd.ValidateWithPath("\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

func (_egae ST_FunctionType) String() string {
	switch _egae {
	case 0:
		return ""
	case 1:
		return "\u0063\u006e\u0074"
	case 2:
		return "\u0070\u006f\u0073"
	case 3:
		return "\u0072\u0065\u0076\u0050\u006f\u0073"
	case 4:
		return "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case 5:
		return "\u0070\u006f\u0073\u004f\u0064\u0064"
	case 6:
		return "\u0076\u0061\u0072"
	case 7:
		return "\u0064\u0065\u0070t\u0068"
	case 8:
		return "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return ""
}

func NewCT_HierBranchStyle() *CT_HierBranchStyle { _ggfe := &CT_HierBranchStyle{}; return _ggfe }

func (_gb *AG_ConstraintRefAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dc := range start.Attr {
		if _dc.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_gb.RefTypeAttr.UnmarshalXMLAttr(_dc)
			continue
		}
		if _dc.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_gb.RefForAttr.UnmarshalXMLAttr(_dc)
			continue
		}
		if _dc.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_gfc, _bfe := _dc.Value, error(nil)
			if _bfe != nil {
				return _bfe
			}
			_gb.RefForNameAttr = &_gfc
			continue
		}
		if _dc.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_gb.RefPtTypeAttr.UnmarshalXMLAttr(_dc)
			continue
		}
	}
	for {
		_ddb, _bb := d.Token()
		if _bb != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0052\u0065\u0066A\u0074\u0074\u0072\u0069\u0062u\u0074\u0065s\u003a\u0020\u0025\u0073", _bb)
		}
		if _aa, _edb := _ddb.(_a.EndElement); _edb && _aa.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Constraint struct {
	OpAttr         ST_BoolOperator
	ValAttr        *float64
	FactAttr       *float64
	ExtLst         *_fd.CT_OfficeArtExtensionList
	TypeAttr       ST_ConstraintType
	ForAttr        ST_ConstraintRelationship
	ForNameAttr    *string
	PtTypeAttr     ST_ElementType
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}

func (_ccda *CT_Otherwise) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ccda.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_ccda.NameAttr)})
	}
	e.EncodeToken(start)
	if _ccda.Alg != nil {
		_bbca := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		for _, _gdafe := range _ccda.Alg {
			e.EncodeElement(_gdafe, _bbca)
		}
	}
	if _ccda.Shape != nil {
		_daed := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		for _, _deaf := range _ccda.Shape {
			e.EncodeElement(_deaf, _daed)
		}
	}
	if _ccda.PresOf != nil {
		_adfe := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		for _, _ebdae := range _ccda.PresOf {
			e.EncodeElement(_ebdae, _adfe)
		}
	}
	if _ccda.ConstrLst != nil {
		_adbg := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		for _, _fgbb := range _ccda.ConstrLst {
			e.EncodeElement(_fgbb, _adbg)
		}
	}
	if _ccda.RuleLst != nil {
		_beeb := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		for _, _cbfb := range _ccda.RuleLst {
			e.EncodeElement(_cbfb, _beeb)
		}
	}
	if _ccda.ForEach != nil {
		_ecaa := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		for _, _fadb := range _ccda.ForEach {
			e.EncodeElement(_fadb, _ecaa)
		}
	}
	if _ccda.LayoutNode != nil {
		_afag := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		for _, _faegc := range _ccda.LayoutNode {
			e.EncodeElement(_faegc, _afag)
		}
	}
	if _ccda.Choose != nil {
		_afddb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		for _, _fdeb := range _ccda.Choose {
			e.EncodeElement(_fdeb, _afddb)
		}
	}
	if _ccda.ExtLst != nil {
		_dfac := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _eggf := range _ccda.ExtLst {
			e.EncodeElement(_eggf, _dfac)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ColorTransformHeader and its children, prefixing error messages with path
func (_acbd *CT_ColorTransformHeader) ValidateWithPath(path string) error {
	for _egegc, _ddfc := range _acbd.Title {
		if _beda := _ddfc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _egegc)); _beda != nil {
			return _beda
		}
	}
	for _ffb, _ecfc := range _acbd.Desc {
		if _bddd := _ecfc.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _ffb)); _bddd != nil {
			return _bddd
		}
	}
	if _acbd.CatLst != nil {
		if _cdeg := _acbd.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _cdeg != nil {
			return _cdeg
		}
	}
	if _acbd.ExtLst != nil {
		if _aga := _acbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aga != nil {
			return _aga
		}
	}
	return nil
}

func (_ggbg ST_AutoTextRotation) Validate() error { return _ggbg.ValidateWithPath("") }

func NewCT_AnimLvl() *CT_AnimLvl { _egbf := &CT_AnimLvl{}; return _egbf }

type CT_Shape struct {
	RotAttr       *float64
	TypeAttr      *ST_LayoutShapeType
	BlipAttr      *string
	ZOrderOffAttr *int32
	HideGeomAttr  *bool
	LkTxEntryAttr *bool
	BlipPhldrAttr *bool
	AdjLst        *CT_AdjLst
	ExtLst        *_fd.CT_OfficeArtExtensionList
}

func (_fgbff ST_PyramidAccentPosition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgbff.String(), start)
}

const (
	ST_AlgorithmTypeUnset     ST_AlgorithmType = 0
	ST_AlgorithmTypeComposite ST_AlgorithmType = 1
	ST_AlgorithmTypeConn      ST_AlgorithmType = 2
	ST_AlgorithmTypeCycle     ST_AlgorithmType = 3
	ST_AlgorithmTypeHierChild ST_AlgorithmType = 4
	ST_AlgorithmTypeHierRoot  ST_AlgorithmType = 5
	ST_AlgorithmTypePyra      ST_AlgorithmType = 6
	ST_AlgorithmTypeLin       ST_AlgorithmType = 7
	ST_AlgorithmTypeSp        ST_AlgorithmType = 8
	ST_AlgorithmTypeTx        ST_AlgorithmType = 9
	ST_AlgorithmTypeSnake     ST_AlgorithmType = 10
)

func (_dgdb *ST_ResizeHandlesStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dgdb = 0
	case "\u0065\u0078\u0061c\u0074":
		*_dgdb = 1
	case "\u0072\u0065\u006c":
		*_dgdb = 2
	}
	return nil
}

func (_fggg ST_ConnectorPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fggg.String(), start)
}

func (_eagb ST_AxisType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eagb.String(), start)
}

// Validate validates the AG_IteratorAttributes and its children
func (_efg *AG_IteratorAttributes) Validate() error {
	return _efg.ValidateWithPath("A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073")
}

// Validate validates the CT_CTDescription and its children
func (_gbgg *CT_CTDescription) Validate() error {
	return _gbgg.ValidateWithPath("\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}

// Validate validates the CT_ChildMax and its children
func (_bcgg *CT_ChildMax) Validate() error {
	return _bcgg.ValidateWithPath("C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078")
}

func (_afca *ST_CxnType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afca = 0
	case "\u0070\u0061\u0072O\u0066":
		*_afca = 1
	case "\u0070\u0072\u0065\u0073\u004f\u0066":
		*_afca = 2
	case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
		*_afca = 3
	case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
		*_afca = 4
	}
	return nil
}

func (_gdcae ST_ArrowheadStyle) String() string {
	switch _gdcae {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0061\u0072\u0072"
	case 3:
		return "\u006e\u006f\u0041r\u0072"
	}
	return ""
}

const (
	ST_SecondaryLinearDirectionUnset ST_SecondaryLinearDirection = 0
	ST_SecondaryLinearDirectionNone  ST_SecondaryLinearDirection = 1
	ST_SecondaryLinearDirectionFromL ST_SecondaryLinearDirection = 2
	ST_SecondaryLinearDirectionFromR ST_SecondaryLinearDirection = 3
	ST_SecondaryLinearDirectionFromT ST_SecondaryLinearDirection = 4
	ST_SecondaryLinearDirectionFromB ST_SecondaryLinearDirection = 5
)

type CT_Parameter struct {
	TypeAttr ST_ParameterId
	ValAttr  ST_ParameterVal
}

func NewCT_Categories() *CT_Categories { _bfa := &CT_Categories{}; return _bfa }

func (_gbag ST_NodeHorizontalAlignment) Validate() error { return _gbag.ValidateWithPath("") }

func (_egcg *CT_ForEach) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cfgb := range start.Attr {
		if _cfgb.Name.Local == "\u0072\u0065\u0066" {
			_daff, _gccg := _cfgb.Value, error(nil)
			if _gccg != nil {
				return _gccg
			}
			_egcg.RefAttr = &_daff
			continue
		}
		if _cfgb.Name.Local == "\u006e\u0061\u006d\u0065" {
			_cefd, _fdgd := _cfgb.Value, error(nil)
			if _fdgd != nil {
				return _fdgd
			}
			_egcg.NameAttr = &_cefd
			continue
		}
		if _cfgb.Name.Local == "\u0061\u0078\u0069\u0073" {
			_eecd, _afad := ParseSliceST_AxisTypes(_cfgb.Value)
			if _afad != nil {
				return _afad
			}
			_egcg.AxisAttr = &_eecd
			continue
		}
		if _cfgb.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_ceg, _gaad := ParseSliceST_ElementTypes(_cfgb.Value)
			if _gaad != nil {
				return _gaad
			}
			_egcg.PtTypeAttr = &_ceg
			continue
		}
		if _cfgb.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_abcgd, _agfb := ParseSliceST_Booleans(_cfgb.Value)
			if _agfb != nil {
				return _agfb
			}
			_egcg.HideLastTransAttr = &_abcgd
			continue
		}
		if _cfgb.Name.Local == "\u0073\u0074" {
			_ffef, _eega := ParseSliceST_Ints(_cfgb.Value)
			if _eega != nil {
				return _eega
			}
			_egcg.StAttr = &_ffef
			continue
		}
		if _cfgb.Name.Local == "\u0063\u006e\u0074" {
			_ddcaf, _ddgg := ParseSliceST_UnsignedInts(_cfgb.Value)
			if _ddgg != nil {
				return _ddgg
			}
			_egcg.CntAttr = &_ddcaf
			continue
		}
		if _cfgb.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gcbd, _ffee := ParseSliceST_Ints(_cfgb.Value)
			if _ffee != nil {
				return _ffee
			}
			_egcg.StepAttr = &_gcbd
			continue
		}
	}
_egfg:
	for {
		_ccca, _gecda := d.Token()
		if _gecda != nil {
			return _gecda
		}
		switch _ccde := _ccca.(type) {
		case _a.StartElement:
			switch _ccde.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_dbbad := NewCT_Algorithm()
				if _cfbd := d.DecodeElement(_dbbad, &_ccde); _cfbd != nil {
					return _cfbd
				}
				_egcg.Alg = append(_egcg.Alg, _dbbad)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_dffac := NewCT_Shape()
				if _aeff := d.DecodeElement(_dffac, &_ccde); _aeff != nil {
					return _aeff
				}
				_egcg.Shape = append(_egcg.Shape, _dffac)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_fecf := NewCT_PresentationOf()
				if _dgd := d.DecodeElement(_fecf, &_ccde); _dgd != nil {
					return _dgd
				}
				_egcg.PresOf = append(_egcg.PresOf, _fecf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_gegg := NewCT_Constraints()
				if _bcce := d.DecodeElement(_gegg, &_ccde); _bcce != nil {
					return _bcce
				}
				_egcg.ConstrLst = append(_egcg.ConstrLst, _gegg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_ccfd := NewCT_Rules()
				if _agbg := d.DecodeElement(_ccfd, &_ccde); _agbg != nil {
					return _agbg
				}
				_egcg.RuleLst = append(_egcg.RuleLst, _ccfd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_efda := NewCT_ForEach()
				if _dga := d.DecodeElement(_efda, &_ccde); _dga != nil {
					return _dga
				}
				_egcg.ForEach = append(_egcg.ForEach, _efda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_bgbf := NewCT_LayoutNode()
				if _ddbee := d.DecodeElement(_bgbf, &_ccde); _ddbee != nil {
					return _ddbee
				}
				_egcg.LayoutNode = append(_egcg.LayoutNode, _bgbf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_ddba := NewCT_Choose()
				if _dfdf := d.DecodeElement(_ddba, &_ccde); _dfdf != nil {
					return _dfdf
				}
				_egcg.Choose = append(_egcg.Choose, _ddba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eceeg := _fd.NewCT_OfficeArtExtensionList()
				if _cdea := d.DecodeElement(_eceeg, &_ccde); _cdea != nil {
					return _cdea
				}
				_egcg.ExtLst = append(_egcg.ExtLst, _eceeg)
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fF\u006f\u0072\u0045\u0061\u0063\u0068\u0020\u0025\u0076", _ccde.Name)
				if _dgeb := d.Skip(); _dgeb != nil {
					return _dgeb
				}
			}
		case _a.EndElement:
			break _egfg
		case _a.CharData:
		}
	}
	return nil
}

func (_cdgac *ST_ChildOrderType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cdgac = 0
	case "\u0062":
		*_cdgac = 1
	case "\u0074":
		*_cdgac = 2
	}
	return nil
}

func (_cdeae ST_SecondaryLinearDirection) ValidateWithPath(path string) error {
	switch _cdeae {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdeae))
	}
	return nil
}

func (_cca *CT_CTStyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", _cca.NameAttr)})
	e.EncodeToken(start)
	if _cca.FillClrLst != nil {
		_deff := _a.StartElement{Name: _a.Name{Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.FillClrLst, _deff)
	}
	if _cca.LinClrLst != nil {
		_ddea := _a.StartElement{Name: _a.Name{Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}}
		e.EncodeElement(_cca.LinClrLst, _ddea)
	}
	if _cca.EffectClrLst != nil {
		_fbea := _a.StartElement{Name: _a.Name{Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.EffectClrLst, _fbea)
	}
	if _cca.TxLinClrLst != nil {
		_dcg := _a.StartElement{Name: _a.Name{Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.TxLinClrLst, _dcg)
	}
	if _cca.TxFillClrLst != nil {
		_agb := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.TxFillClrLst, _agb)
	}
	if _cca.TxEffectClrLst != nil {
		_egg := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.TxEffectClrLst, _egg)
	}
	if _cca.ExtLst != nil {
		_efc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cca.ExtLst, _efc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ST_LayoutShapeType is a union type
type ST_LayoutShapeType struct {
	ST_ShapeType       _fd.ST_ShapeType
	ST_OutputShapeType ST_OutputShapeType
}

// ValidateWithPath validates the CT_Categories and its children, prefixing error messages with path
func (_gbb *CT_Categories) ValidateWithPath(path string) error {
	for _ded, _dbbe := range _gbb.Cat {
		if _efe := _dbbe.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _ded)); _efe != nil {
			return _efe
		}
	}
	return nil
}

func (_dcbe ST_PyramidAccentTextMargin) ValidateWithPath(path string) error {
	switch _dcbe {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcbe))
	}
	return nil
}

type RelIds struct{ CT_RelIds }

// Validate validates the CT_ElemPropSet and its children
func (_ecgc *CT_ElemPropSet) Validate() error {
	return _ecgc.ValidateWithPath("\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074")
}

func (_dcbfc *ST_TextAnchorVertical) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ecfad, _daabb := d.Token()
	if _daabb != nil {
		return _daabb
	}
	if _fdgea, _bfcadb := _ecfad.(_a.EndElement); _bfcadb && _fdgea.Name == start.Name {
		*_dcbfc = 1
		return nil
	}
	if _ddcc, _dgcd := _ecfad.(_a.CharData); !_dgcd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ecfad)
	} else {
		switch string(_ddcc) {
		case "":
			*_dcbfc = 0
		case "\u0074":
			*_dcbfc = 1
		case "\u006d\u0069\u0064":
			*_dcbfc = 2
		case "\u0062":
			*_dcbfc = 3
		}
	}
	_ecfad, _daabb = d.Token()
	if _daabb != nil {
		return _daabb
	}
	if _ebdaa, _eegacc := _ecfad.(_a.EndElement); _eegacc && _ebdaa.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ecfad)
}

func NewCT_Constraints() *CT_Constraints { _agad := &CT_Constraints{}; return _agad }

type CT_AnimOne struct{ ValAttr ST_AnimOneStr }

const (
	ST_ChildAlignmentUnset ST_ChildAlignment = 0
	ST_ChildAlignmentT     ST_ChildAlignment = 1
	ST_ChildAlignmentB     ST_ChildAlignment = 2
	ST_ChildAlignmentL     ST_ChildAlignment = 3
	ST_ChildAlignmentR     ST_ChildAlignment = 4
)

func (_fc *AG_IteratorAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fc.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.AxisAttr)})
	}
	if _fc.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.PtTypeAttr)})
	}
	if _fc.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.HideLastTransAttr)})
	}
	if _fc.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.StAttr)})
	}
	if _fc.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.CntAttr)})
	}
	if _fc.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _ef.Sprintf("\u0025\u0076", *_fc.StepAttr)})
	}
	return nil
}

func (_becdf ST_AnimLvlStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cgbb := _a.Attr{}
	_cgbb.Name = name
	switch _becdf {
	case ST_AnimLvlStrUnset:
		_cgbb.Value = ""
	case ST_AnimLvlStrNone:
		_cgbb.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimLvlStrLvl:
		_cgbb.Value = "\u006c\u0076\u006c"
	case ST_AnimLvlStrCtr:
		_cgbb.Value = "\u0063\u0074\u0072"
	}
	return _cgbb, nil
}

// ValidateWithPath validates the CT_Description and its children, prefixing error messages with path
func (_bcbb *CT_Description) ValidateWithPath(path string) error { return nil }

func NewCT_RelIds() *CT_RelIds { _bfded := &CT_RelIds{}; return _bfded }

func (_ggffc ST_PtType) String() string {
	switch _ggffc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0061\u0073\u0073\u0074"
	case 3:
		return "\u0064\u006f\u0063"
	case 4:
		return "\u0070\u0072\u0065\u0073"
	case 5:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 6:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}

type ST_FlowDirection byte

type StyleDefHdrLst struct{ CT_StyleDefinitionHeaderLst }

func (_abgb *ST_BoolOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fggcdc, _gaadb := d.Token()
	if _gaadb != nil {
		return _gaadb
	}
	if _edbg, _abcfb := _fggcdc.(_a.EndElement); _abcfb && _edbg.Name == start.Name {
		*_abgb = 1
		return nil
	}
	if _fbed, _bfga := _fggcdc.(_a.CharData); !_bfga {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fggcdc)
	} else {
		switch string(_fbed) {
		case "":
			*_abgb = 0
		case "\u006e\u006f\u006e\u0065":
			*_abgb = 1
		case "\u0065\u0071\u0075":
			*_abgb = 2
		case "\u0067\u0074\u0065":
			*_abgb = 3
		case "\u006c\u0074\u0065":
			*_abgb = 4
		}
	}
	_fggcdc, _gaadb = d.Token()
	if _gaadb != nil {
		return _gaadb
	}
	if _decdc, _afaag := _fggcdc.(_a.EndElement); _afaag && _decdc.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fggcdc)
}

func (_edee ST_FunctionOperator) String() string {
	switch _edee {
	case 0:
		return ""
	case 1:
		return "\u0065\u0071\u0075"
	case 2:
		return "\u006e\u0065\u0071"
	case 3:
		return "\u0067\u0074"
	case 4:
		return "\u006c\u0074"
	case 5:
		return "\u0067\u0074\u0065"
	case 6:
		return "\u006c\u0074\u0065"
	}
	return ""
}

type ST_TextAnchorHorizontal byte

func (_bdfda *CT_Parameter) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_gabbg, _bbgb := _bdfda.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _bbgb != nil {
		return _bbgb
	}
	start.Attr = append(start.Attr, _gabbg)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _bdfda.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func NewCT_PresentationOf() *CT_PresentationOf { _gfeee := &CT_PresentationOf{}; return _gfeee }

func (_bbgbf *ST_TextBlockDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_abfe, _ffag := d.Token()
	if _ffag != nil {
		return _ffag
	}
	if _dafdf, _fead := _abfe.(_a.EndElement); _fead && _dafdf.Name == start.Name {
		*_bbgbf = 1
		return nil
	}
	if _acfdb, _beaa := _abfe.(_a.CharData); !_beaa {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abfe)
	} else {
		switch string(_acfdb) {
		case "":
			*_bbgbf = 0
		case "\u0068\u006f\u0072\u007a":
			*_bbgbf = 1
		case "\u0076\u0065\u0072\u0074":
			*_bbgbf = 2
		}
	}
	_abfe, _ffag = d.Token()
	if _ffag != nil {
		return _ffag
	}
	if _fcga, _bdad := _abfe.(_a.EndElement); _bdad && _fcga.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abfe)
}

type LayoutDefHdrLst struct{ CT_DiagramDefinitionHeaderLst }

func (_eadec *StyleDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074"
	return _eadec.CT_StyleDefinitionHeaderLst.MarshalXML(e, start)
}

// Validate validates the CT_OrgChart and its children
func (_cdgd *CT_OrgChart) Validate() error {
	return _cdgd.ValidateWithPath("C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074")
}

func (_gcbcg ST_StartingElement) Validate() error { return _gcbcg.ValidateWithPath("") }

func (_fgfgg ST_ChildAlignment) ValidateWithPath(path string) error {
	switch _fgfgg {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgfgg))
	}
	return nil
}

func (_dfag *CT_TextProps) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dfag.Sp3d != nil {
		_gbggc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_dfag.Sp3d, _gbggc)
	}
	if _dfag.FlatTx != nil {
		_gdfc := _a.StartElement{Name: _a.Name{Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}}
		e.EncodeElement(_dfag.FlatTx, _gdfc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_UnsignedInts []uint32

// ValidateWithPath validates the CT_CTCategories and its children, prefixing error messages with path
func (_gfgd *CT_CTCategories) ValidateWithPath(path string) error {
	for _eebg, _fae := range _gfgd.Cat {
		if _bba := _fae.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _eebg)); _bba != nil {
			return _bba
		}
	}
	return nil
}

func ParseSliceST_AxisTypes(s string) (ST_AxisTypes, error) { return ST_AxisTypes{}, nil }

func (_fabfg *ST_HueDir) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fabfg = 0
	case "\u0063\u0077":
		*_fabfg = 1
	case "\u0063\u0063\u0077":
		*_fabfg = 2
	}
	return nil
}

type CT_StyleDefinition struct {
	UniqueIdAttr *string
	MinVerAttr   *string
	Title        []*CT_SDName
	Desc         []*CT_SDDescription
	CatLst       *CT_SDCategories
	Scene3d      *_fd.CT_Scene3D
	StyleLbl     []*CT_StyleLabel
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

func (_eagd *ST_PrSetCustVal) Validate() error { return _eagd.ValidateWithPath("") }

// ValidateWithPath validates the CT_PresentationOf and its children, prefixing error messages with path
func (_eadg *CT_PresentationOf) ValidateWithPath(path string) error {
	if _eadg.ExtLst != nil {
		if _dgfa := _eadg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgfa != nil {
			return _dgfa
		}
	}
	return nil
}

func (_eedg *CT_SDCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cdad:
	for {
		_bdcc, _ecaae := d.Token()
		if _ecaae != nil {
			return _ecaae
		}
		switch _cbgbe := _bdcc.(type) {
		case _a.StartElement:
			switch _cbgbe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_dcca := NewCT_SDCategory()
				if _gdbca := d.DecodeElement(_dcca, &_cbgbe); _gdbca != nil {
					return _gdbca
				}
				_eedg.Cat = append(_eedg.Cat, _dcca)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0044\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _cbgbe.Name)
				if _geegg := d.Skip(); _geegg != nil {
					return _geegg
				}
			}
		case _a.EndElement:
			break _cdad
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_HueDirUnset ST_HueDir = 0
	ST_HueDirCw    ST_HueDir = 1
	ST_HueDirCcw   ST_HueDir = 2
)

func (_ffca ST_ParameterVal) String() string {
	if _ffca.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		return _ffca.ST_DiagramHorizontalAlignment.String()
	}
	if _ffca.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		return _ffca.ST_VerticalAlignment.String()
	}
	if _ffca.ST_ChildDirection != ST_ChildDirectionUnset {
		return _ffca.ST_ChildDirection.String()
	}
	if _ffca.ST_ChildAlignment != ST_ChildAlignmentUnset {
		return _ffca.ST_ChildAlignment.String()
	}
	if _ffca.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		return _ffca.ST_SecondaryChildAlignment.String()
	}
	if _ffca.ST_LinearDirection != ST_LinearDirectionUnset {
		return _ffca.ST_LinearDirection.String()
	}
	if _ffca.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		return _ffca.ST_SecondaryLinearDirection.String()
	}
	if _ffca.ST_StartingElement != ST_StartingElementUnset {
		return _ffca.ST_StartingElement.String()
	}
	if _ffca.ST_BendPoint != ST_BendPointUnset {
		return _ffca.ST_BendPoint.String()
	}
	if _ffca.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		return _ffca.ST_ConnectorRouting.String()
	}
	if _ffca.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		return _ffca.ST_ArrowheadStyle.String()
	}
	if _ffca.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		return _ffca.ST_ConnectorDimension.String()
	}
	if _ffca.ST_RotationPath != ST_RotationPathUnset {
		return _ffca.ST_RotationPath.String()
	}
	if _ffca.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		return _ffca.ST_CenterShapeMapping.String()
	}
	if _ffca.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		return _ffca.ST_NodeHorizontalAlignment.String()
	}
	if _ffca.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		return _ffca.ST_NodeVerticalAlignment.String()
	}
	if _ffca.ST_FallbackDimension != ST_FallbackDimensionUnset {
		return _ffca.ST_FallbackDimension.String()
	}
	if _ffca.ST_TextDirection != ST_TextDirectionUnset {
		return _ffca.ST_TextDirection.String()
	}
	if _ffca.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		return _ffca.ST_PyramidAccentPosition.String()
	}
	if _ffca.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		return _ffca.ST_PyramidAccentTextMargin.String()
	}
	if _ffca.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		return _ffca.ST_TextBlockDirection.String()
	}
	if _ffca.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		return _ffca.ST_TextAnchorHorizontal.String()
	}
	if _ffca.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		return _ffca.ST_TextAnchorVertical.String()
	}
	if _ffca.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		return _ffca.ST_DiagramTextAlignment.String()
	}
	if _ffca.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		return _ffca.ST_AutoTextRotation.String()
	}
	if _ffca.ST_GrowDirection != ST_GrowDirectionUnset {
		return _ffca.ST_GrowDirection.String()
	}
	if _ffca.ST_FlowDirection != ST_FlowDirectionUnset {
		return _ffca.ST_FlowDirection.String()
	}
	if _ffca.ST_ContinueDirection != ST_ContinueDirectionUnset {
		return _ffca.ST_ContinueDirection.String()
	}
	if _ffca.ST_Breakpoint != ST_BreakpointUnset {
		return _ffca.ST_Breakpoint.String()
	}
	if _ffca.ST_Offset != ST_OffsetUnset {
		return _ffca.ST_Offset.String()
	}
	if _ffca.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		return _ffca.ST_HierarchyAlignment.String()
	}
	if _ffca.Int32 != nil {
		return _ef.Sprintf("\u0025\u0076", *_ffca.Int32)
	}
	if _ffca.Float64 != nil {
		return _ef.Sprintf("\u0025\u0076", *_ffca.Float64)
	}
	if _ffca.Bool != nil {
		return _ef.Sprintf("\u0025\u0076", *_ffca.Bool)
	}
	if _ffca.StringVal != nil {
		return _ef.Sprintf("\u0025\u0076", *_ffca.StringVal)
	}
	if _ffca.ST_ConnectorPoint != ST_ConnectorPointUnset {
		return _ffca.ST_ConnectorPoint.String()
	}
	return ""
}

func (_eac *CT_AnimLvl) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _eac.ValAttr != ST_AnimLvlStrUnset {
		_aab, _fcc := _eac.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _fcc != nil {
			return _fcc
		}
		start.Attr = append(start.Attr, _aab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_ffe *CT_DiagramDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _ffe.UniqueIdAttr)})
	if _ffe.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_ffe.MinVerAttr)})
	}
	if _ffe.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_ffe.DefStyleAttr)})
	}
	if _ffe.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_ffe.ResIdAttr)})
	}
	e.EncodeToken(start)
	_cga := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _ada := range _ffe.Title {
		e.EncodeElement(_ada, _cga)
	}
	_cefc := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _bfdgb := range _ffe.Desc {
		e.EncodeElement(_bfdgb, _cefc)
	}
	if _ffe.CatLst != nil {
		_ddce := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffe.CatLst, _ddce)
	}
	if _ffe.ExtLst != nil {
		_cbeg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffe.ExtLst, _cbeg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bgfae *CT_StyleDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bgfae.StyleDefHdr != nil {
		_dbbcc := _a.StartElement{Name: _a.Name{Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _eacg := range _bgfae.StyleDefHdr {
			e.EncodeElement(_eacg, _dbbcc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_beedc ST_PyramidAccentTextMargin) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffdc := _a.Attr{}
	_ffdc.Name = name
	switch _beedc {
	case ST_PyramidAccentTextMarginUnset:
		_ffdc.Value = ""
	case ST_PyramidAccentTextMarginStep:
		_ffdc.Value = "\u0073\u0074\u0065\u0070"
	case ST_PyramidAccentTextMarginStack:
		_ffdc.Value = "\u0073\u0074\u0061c\u006b"
	}
	return _ffdc, nil
}

// ValidateWithPath validates the LayoutDefHdr and its children, prefixing error messages with path
func (_ecedc *LayoutDefHdr) ValidateWithPath(path string) error {
	if _febfc := _ecedc.CT_DiagramDefinitionHeader.ValidateWithPath(path); _febfc != nil {
		return _febfc
	}
	return nil
}

func (_agced ST_ElementType) String() string {
	switch _agced {
	case 0:
		return ""
	case 1:
		return "\u0061\u006c\u006c"
	case 2:
		return "\u0064\u006f\u0063"
	case 3:
		return "\u006e\u006f\u0064\u0065"
	case 4:
		return "\u006e\u006f\u0072\u006d"
	case 5:
		return "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case 6:
		return "\u0061\u0073\u0073\u0074"
	case 7:
		return "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case 8:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 9:
		return "\u0070\u0072\u0065\u0073"
	case 10:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}

func NewCT_SDDescription() *CT_SDDescription { _dceeb := &CT_SDDescription{}; return _dceeb }

// ValidateWithPath validates the CT_AnimOne and its children, prefixing error messages with path
func (_bcf *CT_AnimOne) ValidateWithPath(path string) error {
	if _edac := _bcf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _edac != nil {
		return _edac
	}
	return nil
}

func (_bada ST_HierBranchStyle) ValidateWithPath(path string) error {
	switch _bada {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bada))
	}
	return nil
}

func NewCT_Colors() *CT_Colors { _bedag := &CT_Colors{}; return _bedag }

func (_ffccc ST_AnimLvlStr) Validate() error { return _ffccc.ValidateWithPath("") }

// ValidateWithPath validates the CT_ColorTransform and its children, prefixing error messages with path
func (_caabe *CT_ColorTransform) ValidateWithPath(path string) error {
	for _efde, _dbed := range _caabe.Title {
		if _effa := _dbed.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _efde)); _effa != nil {
			return _effa
		}
	}
	for _gadg, _cefg := range _caabe.Desc {
		if _eccc := _cefg.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _gadg)); _eccc != nil {
			return _eccc
		}
	}
	if _caabe.CatLst != nil {
		if _caeg := _caabe.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _caeg != nil {
			return _caeg
		}
	}
	for _fce, _gegb := range _caabe.StyleLbl {
		if _cdd := _gegb.ValidateWithPath(_ef.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _fce)); _cdd != nil {
			return _cdd
		}
	}
	if _caabe.ExtLst != nil {
		if _fbce := _caabe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbce != nil {
			return _fbce
		}
	}
	return nil
}

const (
	ST_ConnectorRoutingUnset     ST_ConnectorRouting = 0
	ST_ConnectorRoutingStra      ST_ConnectorRouting = 1
	ST_ConnectorRoutingBend      ST_ConnectorRouting = 2
	ST_ConnectorRoutingCurve     ST_ConnectorRouting = 3
	ST_ConnectorRoutingLongCurve ST_ConnectorRouting = 4
)

func NewCT_Constraint() *CT_Constraint { _eeac := &CT_Constraint{}; return _eeac }

func (_abgcg ST_ConnectorRouting) Validate() error { return _abgcg.ValidateWithPath("") }

type ST_AlgorithmType byte

const (
	ST_TextAnchorHorizontalUnset ST_TextAnchorHorizontal = 0
	ST_TextAnchorHorizontalNone  ST_TextAnchorHorizontal = 1
	ST_TextAnchorHorizontalCtr   ST_TextAnchorHorizontal = 2
)

type ST_FunctionOperator byte

// Validate validates the CT_Constraint and its children
func (_dbgc *CT_Constraint) Validate() error {
	return _dbgc.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074")
}

func (_bcecf ST_ConnectorPoint) Validate() error { return _bcecf.ValidateWithPath("") }

func (_cagc *ST_TextDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cagc = 0
	case "\u0066\u0072\u006fm\u0054":
		*_cagc = 1
	case "\u0066\u0072\u006fm\u0042":
		*_cagc = 2
	}
	return nil
}

func (_dafgb *ST_FallbackDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gdffa, _ddab := d.Token()
	if _ddab != nil {
		return _ddab
	}
	if _cgge, _cfffg := _gdffa.(_a.EndElement); _cfffg && _cgge.Name == start.Name {
		*_dafgb = 1
		return nil
	}
	if _cadc, _accgda := _gdffa.(_a.CharData); !_accgda {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdffa)
	} else {
		switch string(_cadc) {
		case "":
			*_dafgb = 0
		case "\u0031\u0044":
			*_dafgb = 1
		case "\u0032\u0044":
			*_dafgb = 2
		}
	}
	_gdffa, _ddab = d.Token()
	if _ddab != nil {
		return _ddab
	}
	if _ccgg, _cacbb := _gdffa.(_a.EndElement); _cacbb && _ccgg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdffa)
}

type CT_Algorithm struct {
	TypeAttr ST_AlgorithmType
	RevAttr  *uint32
	Param    []*CT_Parameter
	ExtLst   *_fd.CT_OfficeArtExtensionList
}

func (_becdd *ST_ChildDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_becdd = 0
	case "\u0068\u006f\u0072\u007a":
		*_becdd = 1
	case "\u0076\u0065\u0072\u0074":
		*_becdd = 2
	}
	return nil
}

func NewLayoutDef() *LayoutDef {
	_fdbga := &LayoutDef{}
	_fdbga.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	return _fdbga
}

func (_gfdbe ST_HueDir) ValidateWithPath(path string) error {
	switch _gfdbe {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfdbe))
	}
	return nil
}

func ParseSliceST_Ints(s string) (ST_Ints, error) { return ST_Ints{}, nil }

func (_dbcbc ST_FunctionType) ValidateWithPath(path string) error {
	switch _dbcbc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbcbc))
	}
	return nil
}

const (
	ST_AxisTypeUnset       ST_AxisType = 0
	ST_AxisTypeSelf        ST_AxisType = 1
	ST_AxisTypeCh          ST_AxisType = 2
	ST_AxisTypeDes         ST_AxisType = 3
	ST_AxisTypeDesOrSelf   ST_AxisType = 4
	ST_AxisTypePar         ST_AxisType = 5
	ST_AxisTypeAncst       ST_AxisType = 6
	ST_AxisTypeAncstOrSelf ST_AxisType = 7
	ST_AxisTypeFollowSib   ST_AxisType = 8
	ST_AxisTypePrecedSib   ST_AxisType = 9
	ST_AxisTypeFollow      ST_AxisType = 10
	ST_AxisTypePreced      ST_AxisType = 11
	ST_AxisTypeRoot        ST_AxisType = 12
	ST_AxisTypeNone        ST_AxisType = 13
)

// Validate validates the CT_Description and its children
func (_gbda *CT_Description) Validate() error {
	return _gbda.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_StyleLabel and its children, prefixing error messages with path
func (_bgdd *CT_StyleLabel) ValidateWithPath(path string) error {
	if _bgdd.Scene3d != nil {
		if _gedb := _bgdd.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _gedb != nil {
			return _gedb
		}
	}
	if _bgdd.Sp3d != nil {
		if _gcdg := _bgdd.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _gcdg != nil {
			return _gcdg
		}
	}
	if _bgdd.TxPr != nil {
		if _afeg := _bgdd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _afeg != nil {
			return _afeg
		}
	}
	if _bgdd.Style != nil {
		if _dgcab := _bgdd.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _dgcab != nil {
			return _dgcab
		}
	}
	if _bgdd.ExtLst != nil {
		if _aeafb := _bgdd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aeafb != nil {
			return _aeafb
		}
	}
	return nil
}

const (
	ST_NodeHorizontalAlignmentUnset ST_NodeHorizontalAlignment = 0
	ST_NodeHorizontalAlignmentL     ST_NodeHorizontalAlignment = 1
	ST_NodeHorizontalAlignmentCtr   ST_NodeHorizontalAlignment = 2
	ST_NodeHorizontalAlignmentR     ST_NodeHorizontalAlignment = 3
)

func (_acaae *ST_ChildDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dfccf, _bdgde := d.Token()
	if _bdgde != nil {
		return _bdgde
	}
	if _bbbcfg, _ffba := _dfccf.(_a.EndElement); _ffba && _bbbcfg.Name == start.Name {
		*_acaae = 1
		return nil
	}
	if _fccg, _defeeb := _dfccf.(_a.CharData); !_defeeb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfccf)
	} else {
		switch string(_fccg) {
		case "":
			*_acaae = 0
		case "\u0068\u006f\u0072\u007a":
			*_acaae = 1
		case "\u0076\u0065\u0072\u0074":
			*_acaae = 2
		}
	}
	_dfccf, _bdgde = d.Token()
	if _bdgde != nil {
		return _bdgde
	}
	if _bebef, _cgdf := _dfccf.(_a.EndElement); _cgdf && _bebef.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfccf)
}

func (_bffcg ST_ChildOrderType) Validate() error { return _bffcg.ValidateWithPath("") }

func (_eacbg ST_TextDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eacbg.String(), start)
}

func NewCT_SDName() *CT_SDName { _bdaff := &CT_SDName{}; return _bdaff }

func (_bgcd *CT_ElemPropSet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bgcd.PresAssocIDAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PresAssocIDAttr)})
	}
	if _bgcd.PresNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PresNameAttr)})
	}
	if _bgcd.PresStyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PresStyleLblAttr)})
	}
	if _bgcd.PresStyleIdxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PresStyleIdxAttr)})
	}
	if _bgcd.PresStyleCntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PresStyleCntAttr)})
	}
	if _bgcd.LoTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.LoTypeIdAttr)})
	}
	if _bgcd.LoCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006co\u0043\u0061\u0074\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.LoCatIdAttr)})
	}
	if _bgcd.QsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.QsTypeIdAttr)})
	}
	if _bgcd.QsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071s\u0043\u0061\u0074\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.QsCatIdAttr)})
	}
	if _bgcd.CsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CsTypeIdAttr)})
	}
	if _bgcd.CsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063s\u0043\u0061\u0074\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CsCatIdAttr)})
	}
	if _bgcd.Coherent3DOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_bgcd.Coherent3DOffAttr))})
	}
	if _bgcd.PhldrTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006c\u0064\u0072\u0054"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.PhldrTAttr)})
	}
	if _bgcd.PhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006cd\u0072"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_bgcd.PhldrAttr))})
	}
	if _bgcd.CustAngAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0041\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustAngAttr)})
	}
	if _bgcd.CustFlipVertAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_bgcd.CustFlipVertAttr))})
	}
	if _bgcd.CustFlipHorAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_bgcd.CustFlipHorAttr))})
	}
	if _bgcd.CustSzXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0058"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustSzXAttr)})
	}
	if _bgcd.CustSzYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0059"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustSzYAttr)})
	}
	if _bgcd.CustScaleXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustScaleXAttr)})
	}
	if _bgcd.CustScaleYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustScaleYAttr)})
	}
	if _bgcd.CustTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0054"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_bgcd.CustTAttr))})
	}
	if _bgcd.CustLinFactXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustLinFactXAttr)})
	}
	if _bgcd.CustLinFactYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustLinFactYAttr)})
	}
	if _bgcd.CustLinFactNeighborXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustLinFactNeighborXAttr)})
	}
	if _bgcd.CustLinFactNeighborYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustLinFactNeighborYAttr)})
	}
	if _bgcd.CustRadScaleRadAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustRadScaleRadAttr)})
	}
	if _bgcd.CustRadScaleIncAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063"}, Value: _ef.Sprintf("\u0025\u0076", *_bgcd.CustRadScaleIncAttr)})
	}
	e.EncodeToken(start)
	if _bgcd.PresLayoutVars != nil {
		_dfdd := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}}
		e.EncodeElement(_bgcd.PresLayoutVars, _dfdd)
	}
	if _bgcd.Style != nil {
		_efef := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_bgcd.Style, _efef)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_BendPoint byte

type ST_DiagramHorizontalAlignment byte

const (
	ST_BreakpointUnset  ST_Breakpoint = 0
	ST_BreakpointEndCnv ST_Breakpoint = 1
	ST_BreakpointBal    ST_Breakpoint = 2
	ST_BreakpointFixed  ST_Breakpoint = 3
)

func NewCT_Cxn() *CT_Cxn { _daabf := &CT_Cxn{}; return _daabf }

func (_bdfg ST_PrSetCustVal) String() string {
	if _bdfg.ST_Percentage != nil {
		return _ef.Sprintf("\u0025\u0076", *_bdfg.ST_Percentage)
	}
	if _bdfg.Int32 != nil {
		return _ef.Sprintf("\u0025\u0076", *_bdfg.Int32)
	}
	return ""
}

func (_faf *CT_ChildPref) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bddc := range start.Attr {
		if _bddc.Name.Local == "\u0076\u0061\u006c" {
			_geg, _bbd := _f.ParseInt(_bddc.Value, 10, 32)
			if _bbd != nil {
				return _bbd
			}
			_ebf := int32(_geg)
			_faf.ValAttr = &_ebf
			continue
		}
	}
	for {
		_cbg, _aff := d.Token()
		if _aff != nil {
			return _ef.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068i\u006c\u0064\u0050\u0072\u0065\u0066\u003a\u0020\u0025\u0073", _aff)
		}
		if _abg, _dcdc := _cbg.(_a.EndElement); _dcdc && _abg.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_ConstraintRelationship byte

type ST_HueDir byte

func (_afdde *CT_PresentationOf) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _afdde.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.AxisAttr)})
	}
	if _afdde.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.PtTypeAttr)})
	}
	if _afdde.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.HideLastTransAttr)})
	}
	if _afdde.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.StAttr)})
	}
	if _afdde.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.CntAttr)})
	}
	if _afdde.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _ef.Sprintf("\u0025\u0076", *_afdde.StepAttr)})
	}
	e.EncodeToken(start)
	if _afdde.ExtLst != nil {
		_dedg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afdde.ExtLst, _dedg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bfge *ST_BendPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gfec, _gefbe := d.Token()
	if _gefbe != nil {
		return _gefbe
	}
	if _gdcb, _fbffd := _gfec.(_a.EndElement); _fbffd && _gdcb.Name == start.Name {
		*_bfge = 1
		return nil
	}
	if _egba, _ecfaa := _gfec.(_a.CharData); !_ecfaa {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfec)
	} else {
		switch string(_egba) {
		case "":
			*_bfge = 0
		case "\u0062\u0065\u0067":
			*_bfge = 1
		case "\u0064\u0065\u0066":
			*_bfge = 2
		case "\u0065\u006e\u0064":
			*_bfge = 3
		}
	}
	_gfec, _gefbe = d.Token()
	if _gefbe != nil {
		return _gefbe
	}
	if _fbbdb, _egcdcg := _gfec.(_a.EndElement); _egcdcg && _fbbdb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfec)
}

// Validate validates the CT_CxnList and its children
func (_gaag *CT_CxnList) Validate() error {
	return _gaag.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074")
}

func (_afafc ST_NodeVerticalAlignment) Validate() error { return _afafc.ValidateWithPath("") }

func (_efcabf *ST_SecondaryChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_febad, _abab := d.Token()
	if _abab != nil {
		return _abab
	}
	if _cccga, _dgaaf := _febad.(_a.EndElement); _dgaaf && _cccga.Name == start.Name {
		*_efcabf = 1
		return nil
	}
	if _ccddd, _bgccb := _febad.(_a.CharData); !_bgccb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _febad)
	} else {
		switch string(_ccddd) {
		case "":
			*_efcabf = 0
		case "\u006e\u006f\u006e\u0065":
			*_efcabf = 1
		case "\u0074":
			*_efcabf = 2
		case "\u0062":
			*_efcabf = 3
		case "\u006c":
			*_efcabf = 4
		case "\u0072":
			*_efcabf = 5
		}
	}
	_febad, _abab = d.Token()
	if _abab != nil {
		return _abab
	}
	if _beef, _cgade := _febad.(_a.EndElement); _cgade && _beef.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _febad)
}

func NewLayoutDefHdrLst() *LayoutDefHdrLst {
	_caca := &LayoutDefHdrLst{}
	_caca.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
	return _caca
}

func (_agba *CT_RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0064\u006d"}, Value: _ef.Sprintf("\u0025\u0076", _agba.DmAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u006c\u006f"}, Value: _ef.Sprintf("\u0025\u0076", _agba.LoAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0071\u0073"}, Value: _ef.Sprintf("\u0025\u0076", _agba.QsAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0063\u0073"}, Value: _ef.Sprintf("\u0025\u0076", _agba.CsAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_affda ST_StartingElement) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_egcbf := _a.Attr{}
	_egcbf.Name = name
	switch _affda {
	case ST_StartingElementUnset:
		_egcbf.Value = ""
	case ST_StartingElementNode:
		_egcbf.Value = "\u006e\u006f\u0064\u0065"
	case ST_StartingElementTrans:
		_egcbf.Value = "\u0074\u0072\u0061n\u0073"
	}
	return _egcbf, nil
}

func NewCT_DiagramDefinitionHeader() *CT_DiagramDefinitionHeader {
	_fbfa := &CT_DiagramDefinitionHeader{}
	return _fbfa
}

func (_bbdf *CT_ColorTransformHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", _bbdf.UniqueIdAttr)})
	if _bbdf.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_bbdf.MinVerAttr)})
	}
	if _bbdf.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_bbdf.ResIdAttr)})
	}
	e.EncodeToken(start)
	_ecd := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _dae := range _bbdf.Title {
		e.EncodeElement(_dae, _ecd)
	}
	_gbe := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _gcd := range _bbdf.Desc {
		e.EncodeElement(_gcd, _gbe)
	}
	if _bbdf.CatLst != nil {
		_cbfc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbdf.CatLst, _cbfc)
	}
	if _bbdf.ExtLst != nil {
		_aefa := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbdf.ExtLst, _aefa)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RelIds and its children
func (_fgaa *CT_RelIds) Validate() error {
	return _fgaa.ValidateWithPath("\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s")
}

func ParseSliceST_UnsignedInts(s string) (ST_UnsignedInts, error) { return ST_UnsignedInts{}, nil }

func (_fgbbb ST_HierarchyAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgbbb.String(), start)
}

func NewCT_ColorTransform() *CT_ColorTransform { _cfeg := &CT_ColorTransform{}; return _cfeg }

func (_aacf *CT_TextProps) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ggaf:
	for {
		_aadg, _befge := d.Token()
		if _befge != nil {
			return _befge
		}
		switch _dcbca := _aadg.(type) {
		case _a.StartElement:
			switch _dcbca.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}:
				_aacf.Sp3d = _fd.NewCT_Shape3D()
				if _bbcc := d.DecodeElement(_aacf.Sp3d, &_dcbca); _bbcc != nil {
					return _bbcc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}:
				_aacf.FlatTx = _fd.NewCT_FlatText()
				if _acdaa := d.DecodeElement(_aacf.FlatTx, &_dcbca); _acdaa != nil {
					return _acdaa
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0065\u0078t\u0050\u0072\u006f\u0070\u0073\u0020\u0025\u0076", _dcbca.Name)
				if _cddce := d.Skip(); _cddce != nil {
					return _cddce
				}
			}
		case _a.EndElement:
			break _ggaf
		case _a.CharData:
		}
	}
	return nil
}

type ST_FallbackDimension byte

func (_bfgb *ST_PyramidAccentPosition) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfgb = 0
	case "\u0062\u0065\u0066":
		*_bfgb = 1
	case "\u0061\u0066\u0074":
		*_bfgb = 2
	}
	return nil
}

func (_eaac ST_HueDir) String() string {
	switch _eaac {
	case 0:
		return ""
	case 1:
		return "\u0063\u0077"
	case 2:
		return "\u0063\u0063\u0077"
	}
	return ""
}

func NewCT_AdjLst() *CT_AdjLst { _eba := &CT_AdjLst{}; return _eba }

type ST_VariableType byte

func (_ebfg ST_StartingElement) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebfg.String(), start)
}

func (_ebcd *ST_BoolOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ebcd = 0
	case "\u006e\u006f\u006e\u0065":
		*_ebcd = 1
	case "\u0065\u0071\u0075":
		*_ebcd = 2
	case "\u0067\u0074\u0065":
		*_ebcd = 3
	case "\u006c\u0074\u0065":
		*_ebcd = 4
	}
	return nil
}

func (_geegc ST_AutoTextRotation) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cdgaa := _a.Attr{}
	_cdgaa.Name = name
	switch _geegc {
	case ST_AutoTextRotationUnset:
		_cdgaa.Value = ""
	case ST_AutoTextRotationNone:
		_cdgaa.Value = "\u006e\u006f\u006e\u0065"
	case ST_AutoTextRotationUpr:
		_cdgaa.Value = "\u0075\u0070\u0072"
	case ST_AutoTextRotationGrav:
		_cdgaa.Value = "\u0067\u0072\u0061\u0076"
	}
	return _cdgaa, nil
}

func (_fdac *CT_Constraints) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_acfg:
	for {
		_gcf, _gdac := d.Token()
		if _gdac != nil {
			return _gdac
		}
		switch _gdbd := _gcf.(type) {
		case _a.StartElement:
			switch _gdbd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}:
				_gbgc := NewCT_Constraint()
				if _fab := d.DecodeElement(_gbgc, &_gdbd); _fab != nil {
					return _fab
				}
				_fdac.Constr = append(_fdac.Constr, _gbgc)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061i\u006et\u0073\u0020\u0025\u0076", _gdbd.Name)
				if _bbbd := d.Skip(); _bbbd != nil {
					return _bbbd
				}
			}
		case _a.EndElement:
			break _acfg
		case _a.CharData:
		}
	}
	return nil
}

func (_agbfa *ST_FunctionArgument) ValidateWithPath(path string) error {
	_bgbd := []string{}
	if _agbfa.ST_VariableType != ST_VariableTypeUnset {
		_bgbd = append(_bgbd, "\u0053T\u005fV\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_bgbd) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bgbd)
	}
	return nil
}

// ValidateWithPath validates the CT_Algorithm and its children, prefixing error messages with path
func (_fcg *CT_Algorithm) ValidateWithPath(path string) error {
	if _fcg.TypeAttr == ST_AlgorithmTypeUnset {
		return _ef.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cdab := _fcg.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cdab != nil {
		return _cdab
	}
	for _ddfg, _cfe := range _fcg.Param {
		if _fac := _cfe.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fP\u0061\u0072\u0061\u006d\u005b\u0025\u0064\u005d", path, _ddfg)); _fac != nil {
			return _fac
		}
	}
	if _fcg.ExtLst != nil {
		if _eef := _fcg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eef != nil {
			return _eef
		}
	}
	return nil
}

func (_egadg ST_Breakpoint) ValidateWithPath(path string) error {
	switch _egadg {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egadg))
	}
	return nil
}

func (_gbac *ST_ConstraintRelationship) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gbac = 0
	case "\u0073\u0065\u006c\u0066":
		*_gbac = 1
	case "\u0063\u0068":
		*_gbac = 2
	case "\u0064\u0065\u0073":
		*_gbac = 3
	}
	return nil
}

// ValidateWithPath validates the ColorsDef and its children, prefixing error messages with path
func (_ddbfe *ColorsDef) ValidateWithPath(path string) error {
	if _eebfe := _ddbfe.CT_ColorTransform.ValidateWithPath(path); _eebfe != nil {
		return _eebfe
	}
	return nil
}

func (_debg *CT_Parameter) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_debg.TypeAttr = ST_ParameterId(1)
	for _, _dfcc := range start.Attr {
		if _dfcc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_debg.TypeAttr.UnmarshalXMLAttr(_dfcc)
			continue
		}
		if _dfcc.Name.Local == "\u0076\u0061\u006c" {
			_cfce, _cabgd := ParseUnionST_ParameterVal(_dfcc.Value)
			if _cabgd != nil {
				return _cabgd
			}
			_debg.ValAttr = _cfce
			continue
		}
	}
	for {
		_agfbe, _daaa := d.Token()
		if _daaa != nil {
			return _ef.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u003a\u0020\u0025\u0073", _daaa)
		}
		if _bfeg, _adbcg := _agfbe.(_a.EndElement); _adbcg && _bfeg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bdbg *RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bdbg.CT_RelIds = *NewCT_RelIds()
	for _, _cdfea := range start.Attr {
		if _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0064\u006d" || _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0064\u006d" {
			_eegda, _geae := _cdfea.Value, error(nil)
			if _geae != nil {
				return _geae
			}
			_bdbg.DmAttr = _eegda
			continue
		}
		if _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cdfea.Name.Local == "\u006c\u006f" || _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cdfea.Name.Local == "\u006c\u006f" {
			_ccdbb, _dbdcf := _cdfea.Value, error(nil)
			if _dbdcf != nil {
				return _dbdcf
			}
			_bdbg.LoAttr = _ccdbb
			continue
		}
		if _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0071\u0073" || _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0071\u0073" {
			_dfgfg, _cdbfa := _cdfea.Value, error(nil)
			if _cdbfa != nil {
				return _cdbfa
			}
			_bdbg.QsAttr = _dfgfg
			continue
		}
		if _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0063\u0073" || _cdfea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cdfea.Name.Local == "\u0063\u0073" {
			_aaeb, _dadf := _cdfea.Value, error(nil)
			if _dadf != nil {
				return _dadf
			}
			_bdbg.CsAttr = _aaeb
			continue
		}
	}
	for {
		_fegfa, _ggedc := d.Token()
		if _ggedc != nil {
			return _ef.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0052e\u006c\u0049d\u0073\u003a\u0020\u0025\u0073", _ggedc)
		}
		if _febfe, _dgdf := _fegfa.(_a.EndElement); _dgdf && _febfe.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_VerticalAlignment byte

func (_ceeee *CT_OrgChart) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ceeee.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_ceeee.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_dca *CT_ColorTransform) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _afe := range start.Attr {
		if _afe.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_affe, _bgba := _afe.Value, error(nil)
			if _bgba != nil {
				return _bgba
			}
			_dca.UniqueIdAttr = &_affe
			continue
		}
		if _afe.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_afdb, _dded := _afe.Value, error(nil)
			if _dded != nil {
				return _dded
			}
			_dca.MinVerAttr = &_afdb
			continue
		}
	}
_aeaf:
	for {
		_ebdg, _bdcf := d.Token()
		if _bdcf != nil {
			return _bdcf
		}
		switch _ceb := _ebdg.(type) {
		case _a.StartElement:
			switch _ceb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_dcdcg := NewCT_CTName()
				if _egeg := d.DecodeElement(_dcdcg, &_ceb); _egeg != nil {
					return _egeg
				}
				_dca.Title = append(_dca.Title, _dcdcg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gaba := NewCT_CTDescription()
				if _gafbca := d.DecodeElement(_gaba, &_ceb); _gafbca != nil {
					return _gafbca
				}
				_dca.Desc = append(_dca.Desc, _gaba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dca.CatLst = NewCT_CTCategories()
				if _cbf := d.DecodeElement(_dca.CatLst, &_ceb); _cbf != nil {
					return _cbf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_bedd := NewCT_CTStyleLabel()
				if _bda := d.DecodeElement(_bedd, &_ceb); _bda != nil {
					return _bda
				}
				_dca.StyleLbl = append(_dca.StyleLbl, _bedd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dca.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _cad := d.DecodeElement(_dca.ExtLst, &_ceb); _cad != nil {
					return _cad
				}
			default:
				_c.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0020\u0025\u0076", _ceb.Name)
				if _eed := d.Skip(); _eed != nil {
					return _eed
				}
			}
		case _a.EndElement:
			break _aeaf
		case _a.CharData:
		}
	}
	return nil
}

func (_gabee *ST_ContinueDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cefbc, _agfg := d.Token()
	if _agfg != nil {
		return _agfg
	}
	if _gadgb, _acee := _cefbc.(_a.EndElement); _acee && _gadgb.Name == start.Name {
		*_gabee = 1
		return nil
	}
	if _ggdefe, _ggbeg := _cefbc.(_a.CharData); !_ggbeg {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cefbc)
	} else {
		switch string(_ggdefe) {
		case "":
			*_gabee = 0
		case "\u0072\u0065\u0076\u0044\u0069\u0072":
			*_gabee = 1
		case "\u0073a\u006d\u0065\u0044\u0069\u0072":
			*_gabee = 2
		}
	}
	_cefbc, _agfg = d.Token()
	if _agfg != nil {
		return _agfg
	}
	if _aaagb, _cagdg := _cefbc.(_a.EndElement); _cagdg && _aaagb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cefbc)
}

func (_efgae *ST_FlowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_efgae = 0
	case "\u0072\u006f\u0077":
		*_efgae = 1
	case "\u0063\u006f\u006c":
		*_efgae = 2
	}
	return nil
}

func (_befgd *ColorsDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_befgd.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
_afafg:
	for {
		_dgda, _afdg := d.Token()
		if _afdg != nil {
			return _afdg
		}
		switch _gfge := _dgda.(type) {
		case _a.StartElement:
			switch _gfge.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_gaega := NewCT_ColorTransformHeader()
				if _dfcce := d.DecodeElement(_gaega, &_gfge); _dfcce != nil {
					return _dfcce
				}
				_befgd.ColorsDefHdr = append(_befgd.ColorsDefHdr, _gaega)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _gfge.Name)
				if _cecgb := d.Skip(); _cecgb != nil {
					return _cecgb
				}
			}
		case _a.EndElement:
			break _afafg
		case _a.CharData:
		}
	}
	return nil
}

type CT_SDName struct {
	LangAttr *string
	ValAttr  string
}

type ST_AnimLvlStr byte

func (_adefg *CT_LayoutVariablePropertySet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_caaac:
	for {
		_fgeg, _dbgcf := d.Token()
		if _dbgcf != nil {
			return _dbgcf
		}
		switch _fagaa := _fgeg.(type) {
		case _a.StartElement:
			switch _fagaa.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}:
				_adefg.OrgChart = NewCT_OrgChart()
				if _ccad := d.DecodeElement(_adefg.OrgChart, &_fagaa); _ccad != nil {
					return _ccad
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u004da\u0078"}:
				_adefg.ChMax = NewCT_ChildMax()
				if _bdeg := d.DecodeElement(_adefg.ChMax, &_fagaa); _bdeg != nil {
					return _bdeg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}:
				_adefg.ChPref = NewCT_ChildPref()
				if _fedd := d.DecodeElement(_adefg.ChPref, &_fagaa); _fedd != nil {
					return _fedd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}:
				_adefg.BulletEnabled = NewCT_BulletEnabled()
				if _dccd := d.DecodeElement(_adefg.BulletEnabled, &_fagaa); _dccd != nil {
					return _dccd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0069\u0072"}:
				_adefg.Dir = NewCT_Direction()
				if _febag := d.DecodeElement(_adefg.Dir, &_fagaa); _febag != nil {
					return _febag
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}:
				_adefg.HierBranch = NewCT_HierBranchStyle()
				if _bffbg := d.DecodeElement(_adefg.HierBranch, &_fagaa); _bffbg != nil {
					return _bffbg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}:
				_adefg.AnimOne = NewCT_AnimOne()
				if _gbdag := d.DecodeElement(_adefg.AnimOne, &_fagaa); _gbdag != nil {
					return _gbdag
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}:
				_adefg.AnimLvl = NewCT_AnimLvl()
				if _cgaa := d.DecodeElement(_adefg.AnimLvl, &_fagaa); _cgaa != nil {
					return _cgaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}:
				_adefg.ResizeHandles = NewCT_ResizeHandles()
				if _cagg := d.DecodeElement(_adefg.ResizeHandles, &_fagaa); _cagg != nil {
					return _cagg
				}
			default:
				_c.Log("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020C\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062\u006c\u0065P\u0072\u006fpe\u0072\u0074\u0079S\u0065\u0074\u0020\u0025\u0076", _fagaa.Name)
				if _ddec := d.Skip(); _ddec != nil {
					return _ddec
				}
			}
		case _a.EndElement:
			break _caaac
		case _a.CharData:
		}
	}
	return nil
}

func (_aecb *ST_ArrowheadStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aacfb, _bdac := d.Token()
	if _bdac != nil {
		return _bdac
	}
	if _dgdbc, _bfcad := _aacfb.(_a.EndElement); _bfcad && _dgdbc.Name == start.Name {
		*_aecb = 1
		return nil
	}
	if _gdfb, _ffgc := _aacfb.(_a.CharData); !_ffgc {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aacfb)
	} else {
		switch string(_gdfb) {
		case "":
			*_aecb = 0
		case "\u0061\u0075\u0074\u006f":
			*_aecb = 1
		case "\u0061\u0072\u0072":
			*_aecb = 2
		case "\u006e\u006f\u0041r\u0072":
			*_aecb = 3
		}
	}
	_aacfb, _bdac = d.Token()
	if _bdac != nil {
		return _bdac
	}
	if _fdffc, _eacga := _aacfb.(_a.EndElement); _eacga && _fdffc.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aacfb)
}

func (_bbgbc *ST_ConstraintRelationship) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aeafc, _fcgc := d.Token()
	if _fcgc != nil {
		return _fcgc
	}
	if _ebbac, _gcbda := _aeafc.(_a.EndElement); _gcbda && _ebbac.Name == start.Name {
		*_bbgbc = 1
		return nil
	}
	if _adea, _eafd := _aeafc.(_a.CharData); !_eafd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeafc)
	} else {
		switch string(_adea) {
		case "":
			*_bbgbc = 0
		case "\u0073\u0065\u006c\u0066":
			*_bbgbc = 1
		case "\u0063\u0068":
			*_bbgbc = 2
		case "\u0064\u0065\u0073":
			*_bbgbc = 3
		}
	}
	_aeafc, _fcgc = d.Token()
	if _fcgc != nil {
		return _fcgc
	}
	if _abaf, _addd := _aeafc.(_a.EndElement); _addd && _abaf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeafc)
}

type CT_TextProps struct {
	Sp3d   *_fd.CT_Shape3D
	FlatTx *_fd.CT_FlatText
}

func (_dbeb *CT_StyleDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dbeb.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_dbeb.UniqueIdAttr)})
	}
	if _dbeb.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_dbeb.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _dbeb.Title != nil {
		_fdda := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _fcfd := range _dbeb.Title {
			e.EncodeElement(_fcfd, _fdda)
		}
	}
	if _dbeb.Desc != nil {
		_edbfe := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _faee := range _dbeb.Desc {
			e.EncodeElement(_faee, _edbfe)
		}
	}
	if _dbeb.CatLst != nil {
		_fafe := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbeb.CatLst, _fafe)
	}
	if _dbeb.Scene3d != nil {
		_aedca := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_dbeb.Scene3d, _aedca)
	}
	_bdafc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
	for _, _bbcfc := range _dbeb.StyleLbl {
		e.EncodeElement(_bbcfc, _bdafc)
	}
	if _dbeb.ExtLst != nil {
		_dbdc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbeb.ExtLst, _dbdc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bdffb ST_CxnType) Validate() error { return _bdffb.ValidateWithPath("") }

type CT_DiagramDefinitionHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	DefStyleAttr *string
	ResIdAttr    *int32
	Title        []*CT_Name
	Desc         []*CT_Description
	CatLst       *CT_Categories
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

// Validate validates the CT_Direction and its children
func (_egegf *CT_Direction) Validate() error {
	return _egegf.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
}

func (_aaf *CT_DiagramDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aaf.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_aaf.UniqueIdAttr)})
	}
	if _aaf.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_aaf.MinVerAttr)})
	}
	if _aaf.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_aaf.DefStyleAttr)})
	}
	e.EncodeToken(start)
	if _aaf.Title != nil {
		_befe := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _ceag := range _aaf.Title {
			e.EncodeElement(_ceag, _befe)
		}
	}
	if _aaf.Desc != nil {
		_ffff := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _ecda := range _aaf.Desc {
			e.EncodeElement(_ecda, _ffff)
		}
	}
	if _aaf.CatLst != nil {
		_bcee := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aaf.CatLst, _bcee)
	}
	if _aaf.SampData != nil {
		_faab := _a.StartElement{Name: _a.Name{Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_aaf.SampData, _faab)
	}
	if _aaf.StyleData != nil {
		_feda := _a.StartElement{Name: _a.Name{Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}}
		e.EncodeElement(_aaf.StyleData, _feda)
	}
	if _aaf.ClrData != nil {
		_acda := _a.StartElement{Name: _a.Name{Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_aaf.ClrData, _acda)
	}
	_edab := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
	e.EncodeElement(_aaf.LayoutNode, _edab)
	if _aaf.ExtLst != nil {
		_dee := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aaf.ExtLst, _dee)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bege ST_ChildDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bgaf := _a.Attr{}
	_bgaf.Name = name
	switch _bege {
	case ST_ChildDirectionUnset:
		_bgaf.Value = ""
	case ST_ChildDirectionHorz:
		_bgaf.Value = "\u0068\u006f\u0072\u007a"
	case ST_ChildDirectionVert:
		_bgaf.Value = "\u0076\u0065\u0072\u0074"
	}
	return _bgaf, nil
}

// Validate validates the CT_LayoutNode and its children
func (_ccgb *CT_LayoutNode) Validate() error {
	return _ccgb.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065")
}

// Validate validates the CT_ColorTransformHeader and its children
func (_gfa *CT_ColorTransformHeader) Validate() error {
	return _gfa.ValidateWithPath("\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072")
}

func (_ffbea ST_AnimOneStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dagf := _a.Attr{}
	_dagf.Name = name
	switch _ffbea {
	case ST_AnimOneStrUnset:
		_dagf.Value = ""
	case ST_AnimOneStrNone:
		_dagf.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimOneStrOne:
		_dagf.Value = "\u006f\u006e\u0065"
	case ST_AnimOneStrBranch:
		_dagf.Value = "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return _dagf, nil
}

func (_gddd ST_PyramidAccentTextMargin) String() string {
	switch _gddd {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0065\u0070"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	}
	return ""
}

func (_cfdg ST_ElementType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cfdg.String(), start)
}

func (_eceff ST_CenterShapeMapping) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eceff.String(), start)
}

func (_ddga ST_ChildDirection) Validate() error { return _ddga.ValidateWithPath("") }

func NewCT_SDCategories() *CT_SDCategories { _eddf := &CT_SDCategories{}; return _eddf }

func (_eedfb ST_HueDir) Validate() error { return _eedfb.ValidateWithPath("") }

func (_bbea ST_DiagramHorizontalAlignment) ValidateWithPath(path string) error {
	switch _bbea {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbea))
	}
	return nil
}

func (_adbb *ST_ElementType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_adbb = 0
	case "\u0061\u006c\u006c":
		*_adbb = 1
	case "\u0064\u006f\u0063":
		*_adbb = 2
	case "\u006e\u006f\u0064\u0065":
		*_adbb = 3
	case "\u006e\u006f\u0072\u006d":
		*_adbb = 4
	case "\u006eo\u006e\u004e\u006f\u0072\u006d":
		*_adbb = 5
	case "\u0061\u0073\u0073\u0074":
		*_adbb = 6
	case "\u006eo\u006e\u0041\u0073\u0073\u0074":
		*_adbb = 7
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_adbb = 8
	case "\u0070\u0072\u0065\u0073":
		*_adbb = 9
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_adbb = 10
	}
	return nil
}

type CT_PtList struct{ Pt []*CT_Pt }

func (_bcegd *ST_VariableType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bcegd = 0
	case "\u006e\u006f\u006e\u0065":
		*_bcegd = 1
	case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
		*_bcegd = 2
	case "\u0063\u0068\u004da\u0078":
		*_bcegd = 3
	case "\u0063\u0068\u0050\u0072\u0065\u0066":
		*_bcegd = 4
	case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
		*_bcegd = 5
	case "\u0064\u0069\u0072":
		*_bcegd = 6
	case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
		*_bcegd = 7
	case "\u0061n\u0069\u006d\u004f\u006e\u0065":
		*_bcegd = 8
	case "\u0061n\u0069\u006d\u004c\u0076\u006c":
		*_bcegd = 9
	case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
		*_bcegd = 10
	}
	return nil
}

func (_gbf *CT_CTName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gbf.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_gbf.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _gbf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func NewCT_Parameter() *CT_Parameter {
	_gffgg := &CT_Parameter{}
	_gffgg.TypeAttr = ST_ParameterId(1)
	return _gffgg
}

// ST_ModelId is a union type
type ST_ModelId struct {
	Int32   *int32
	ST_Guid *string
}

func (_gdag ST_TextDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdbec := _a.Attr{}
	_gdbec.Name = name
	switch _gdag {
	case ST_TextDirectionUnset:
		_gdbec.Value = ""
	case ST_TextDirectionFromT:
		_gdbec.Value = "\u0066\u0072\u006fm\u0054"
	case ST_TextDirectionFromB:
		_gdbec.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _gdbec, nil
}

const (
	ST_AutoTextRotationUnset ST_AutoTextRotation = 0
	ST_AutoTextRotationNone  ST_AutoTextRotation = 1
	ST_AutoTextRotationUpr   ST_AutoTextRotation = 2
	ST_AutoTextRotationGrav  ST_AutoTextRotation = 3
)

func (_dbbbd *ST_Offset) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fdaa, _dgcda := d.Token()
	if _dgcda != nil {
		return _dgcda
	}
	if _fcfg, _egbge := _fdaa.(_a.EndElement); _egbge && _fcfg.Name == start.Name {
		*_dbbbd = 1
		return nil
	}
	if _aafgg, _ecgg := _fdaa.(_a.CharData); !_ecgg {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdaa)
	} else {
		switch string(_aafgg) {
		case "":
			*_dbbbd = 0
		case "\u0063\u0074\u0072":
			*_dbbbd = 1
		case "\u006f\u0066\u0066":
			*_dbbbd = 2
		}
	}
	_fdaa, _dgcda = d.Token()
	if _dgcda != nil {
		return _dgcda
	}
	if _agaf, _fbdae := _fdaa.(_a.EndElement); _fbdae && _agaf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdaa)
}

func (_dgdfd ST_DiagramTextAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dgdfd.String(), start)
}

// ValidateWithPath validates the CT_ColorTransformHeaderLst and its children, prefixing error messages with path
func (_ade *CT_ColorTransformHeaderLst) ValidateWithPath(path string) error {
	for _dfa, _bcbf := range _ade.ColorsDefHdr {
		if _gge := _bcbf.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043ol\u006f\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _dfa)); _gge != nil {
			return _gge
		}
	}
	return nil
}

type CT_ElemPropSet struct {
	PresAssocIDAttr          *ST_ModelId
	PresNameAttr             *string
	PresStyleLblAttr         *string
	PresStyleIdxAttr         *int32
	PresStyleCntAttr         *int32
	LoTypeIdAttr             *string
	LoCatIdAttr              *string
	QsTypeIdAttr             *string
	QsCatIdAttr              *string
	CsTypeIdAttr             *string
	CsCatIdAttr              *string
	Coherent3DOffAttr        *bool
	PhldrTAttr               *string
	PhldrAttr                *bool
	CustAngAttr              *int32
	CustFlipVertAttr         *bool
	CustFlipHorAttr          *bool
	CustSzXAttr              *int32
	CustSzYAttr              *int32
	CustScaleXAttr           *ST_PrSetCustVal
	CustScaleYAttr           *ST_PrSetCustVal
	CustTAttr                *bool
	CustLinFactXAttr         *ST_PrSetCustVal
	CustLinFactYAttr         *ST_PrSetCustVal
	CustLinFactNeighborXAttr *ST_PrSetCustVal
	CustLinFactNeighborYAttr *ST_PrSetCustVal
	CustRadScaleRadAttr      *ST_PrSetCustVal
	CustRadScaleIncAttr      *ST_PrSetCustVal
	PresLayoutVars           *CT_LayoutVariablePropertySet
	Style                    *_fd.CT_ShapeStyle
}

func (_degbf *ST_ArrowheadStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_degbf = 0
	case "\u0061\u0075\u0074\u006f":
		*_degbf = 1
	case "\u0061\u0072\u0072":
		*_degbf = 2
	case "\u006e\u006f\u0041r\u0072":
		*_degbf = 3
	}
	return nil
}

func (_bgff ST_SecondaryChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bfede := _a.Attr{}
	_bfede.Name = name
	switch _bgff {
	case ST_SecondaryChildAlignmentUnset:
		_bfede.Value = ""
	case ST_SecondaryChildAlignmentNone:
		_bfede.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryChildAlignmentT:
		_bfede.Value = "\u0074"
	case ST_SecondaryChildAlignmentB:
		_bfede.Value = "\u0062"
	case ST_SecondaryChildAlignmentL:
		_bfede.Value = "\u006c"
	case ST_SecondaryChildAlignmentR:
		_bfede.Value = "\u0072"
	}
	return _bfede, nil
}

type ST_ElementTypes []ST_ElementType

func (_cdfa *ST_FunctionValue) Validate() error { return _cdfa.ValidateWithPath("") }

func (_ebdd ST_LayoutShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ebdd.ST_ShapeType != _fd.ST_ShapeTypeUnset {
		e.EncodeToken(_a.CharData(_ebdd.ST_ShapeType.String()))
	}
	if _ebdd.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		e.EncodeToken(_a.CharData(_ebdd.ST_OutputShapeType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

func (_gegcb ST_FunctionType) Validate() error { return _gegcb.ValidateWithPath("") }

func (_eadb ST_ConstraintType) ValidateWithPath(path string) error {
	switch _eadb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eadb))
	}
	return nil
}

// ValidateWithPath validates the LayoutDef and its children, prefixing error messages with path
func (_fdaf *LayoutDef) ValidateWithPath(path string) error {
	if _gfgb := _fdaf.CT_DiagramDefinition.ValidateWithPath(path); _gfgb != nil {
		return _gfgb
	}
	return nil
}

const (
	ST_VerticalAlignmentUnset ST_VerticalAlignment = 0
	ST_VerticalAlignmentT     ST_VerticalAlignment = 1
	ST_VerticalAlignmentMid   ST_VerticalAlignment = 2
	ST_VerticalAlignmentB     ST_VerticalAlignment = 3
	ST_VerticalAlignmentNone  ST_VerticalAlignment = 4
)

func (_daeg *ST_CxnType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bbff, _feddb := d.Token()
	if _feddb != nil {
		return _feddb
	}
	if _beea, _dagec := _bbff.(_a.EndElement); _dagec && _beea.Name == start.Name {
		*_daeg = 1
		return nil
	}
	if _ebbf, _fafb := _bbff.(_a.CharData); !_fafb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bbff)
	} else {
		switch string(_ebbf) {
		case "":
			*_daeg = 0
		case "\u0070\u0061\u0072O\u0066":
			*_daeg = 1
		case "\u0070\u0072\u0065\u0073\u004f\u0066":
			*_daeg = 2
		case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
			*_daeg = 3
		case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
			*_daeg = 4
		}
	}
	_bbff, _feddb = d.Token()
	if _feddb != nil {
		return _feddb
	}
	if _eccg, _bcfa := _bbff.(_a.EndElement); _bcfa && _eccg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bbff)
}

func (_cddba *ST_StartingElement) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_adde, _bdcd := d.Token()
	if _bdcd != nil {
		return _bdcd
	}
	if _eccda, _gagg := _adde.(_a.EndElement); _gagg && _eccda.Name == start.Name {
		*_cddba = 1
		return nil
	}
	if _gdda, _aacd := _adde.(_a.CharData); !_aacd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adde)
	} else {
		switch string(_gdda) {
		case "":
			*_cddba = 0
		case "\u006e\u006f\u0064\u0065":
			*_cddba = 1
		case "\u0074\u0072\u0061n\u0073":
			*_cddba = 2
		}
	}
	_adde, _bdcd = d.Token()
	if _bdcd != nil {
		return _bdcd
	}
	if _aagg, _bgfaf := _adde.(_a.EndElement); _bgfaf && _aagg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adde)
}

func (_abca ST_ConstraintRelationship) String() string {
	switch _abca {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	}
	return ""
}

func (_agbgd *CT_StyleDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ffaa := range start.Attr {
		if _ffaa.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_defff, _edcf := _ffaa.Value, error(nil)
			if _edcf != nil {
				return _edcf
			}
			_agbgd.UniqueIdAttr = _defff
			continue
		}
		if _ffaa.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_gddb, _bdge := _ffaa.Value, error(nil)
			if _bdge != nil {
				return _bdge
			}
			_agbgd.MinVerAttr = &_gddb
			continue
		}
		if _ffaa.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_fggbc, _baab := _f.ParseInt(_ffaa.Value, 10, 32)
			if _baab != nil {
				return _baab
			}
			_cbccg := int32(_fggbc)
			_agbgd.ResIdAttr = &_cbccg
			continue
		}
	}
_egcdc:
	for {
		_ebec, _adfd := d.Token()
		if _adfd != nil {
			return _adfd
		}
		switch _gbef := _ebec.(type) {
		case _a.StartElement:
			switch _gbef.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_gfcfc := NewCT_SDName()
				if _gbaeg := d.DecodeElement(_gfcfc, &_gbef); _gbaeg != nil {
					return _gbaeg
				}
				_agbgd.Title = append(_agbgd.Title, _gfcfc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gggaf := NewCT_SDDescription()
				if _gdge := d.DecodeElement(_gggaf, &_gbef); _gdge != nil {
					return _gdge
				}
				_agbgd.Desc = append(_agbgd.Desc, _gggaf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_agbgd.CatLst = NewCT_SDCategories()
				if _cbeb := d.DecodeElement(_agbgd.CatLst, &_gbef); _cbeb != nil {
					return _cbeb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agbgd.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fgfg := d.DecodeElement(_agbgd.ExtLst, &_gbef); _fgfg != nil {
					return _fgfg
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048e\u0061\u0064\u0065\u0072\u0020%\u0076", _gbef.Name)
				if _ddgd := d.Skip(); _ddgd != nil {
					return _ddgd
				}
			}
		case _a.EndElement:
			break _egcdc
		case _a.CharData:
		}
	}
	return nil
}

func (_bgbeb ST_PyramidAccentPosition) ValidateWithPath(path string) error {
	switch _bgbeb {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgbeb))
	}
	return nil
}

func (_fgddd ST_BendPoint) Validate() error { return _fgddd.ValidateWithPath("") }

func (_cabfg *ColorsDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _cabfg.CT_ColorTransformHeaderLst.MarshalXML(e, start)
}

func (_cfcaa ST_OutputShapeType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eaebb := _a.Attr{}
	_eaebb.Name = name
	switch _cfcaa {
	case ST_OutputShapeTypeUnset:
		_eaebb.Value = ""
	case ST_OutputShapeTypeNone:
		_eaebb.Value = "\u006e\u006f\u006e\u0065"
	case ST_OutputShapeTypeConn:
		_eaebb.Value = "\u0063\u006f\u006e\u006e"
	}
	return _eaebb, nil
}

// Validate validates the CT_PtList and its children
func (_fedaa *CT_PtList) Validate() error {
	return _fedaa.ValidateWithPath("\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t")
}

func (_acac ST_SecondaryLinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eccdda := _a.Attr{}
	_eccdda.Name = name
	switch _acac {
	case ST_SecondaryLinearDirectionUnset:
		_eccdda.Value = ""
	case ST_SecondaryLinearDirectionNone:
		_eccdda.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryLinearDirectionFromL:
		_eccdda.Value = "\u0066\u0072\u006fm\u004c"
	case ST_SecondaryLinearDirectionFromR:
		_eccdda.Value = "\u0066\u0072\u006fm\u0052"
	case ST_SecondaryLinearDirectionFromT:
		_eccdda.Value = "\u0066\u0072\u006fm\u0054"
	case ST_SecondaryLinearDirectionFromB:
		_eccdda.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _eccdda, nil
}

func (_dfagg *ST_NodeVerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bcdaf, _dfee := d.Token()
	if _dfee != nil {
		return _dfee
	}
	if _eeefa, _cade := _bcdaf.(_a.EndElement); _cade && _eeefa.Name == start.Name {
		*_dfagg = 1
		return nil
	}
	if _gbebf, _bdgda := _bcdaf.(_a.CharData); !_bdgda {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcdaf)
	} else {
		switch string(_gbebf) {
		case "":
			*_dfagg = 0
		case "\u0074":
			*_dfagg = 1
		case "\u006d\u0069\u0064":
			*_dfagg = 2
		case "\u0062":
			*_dfagg = 3
		}
	}
	_bcdaf, _dfee = d.Token()
	if _dfee != nil {
		return _dfee
	}
	if _bddf, _cfddb := _bcdaf.(_a.EndElement); _cfddb && _bddf.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcdaf)
}

func NewStyleDef() *StyleDef {
	_acgb := &StyleDef{}
	_acgb.CT_StyleDefinition = *NewCT_StyleDefinition()
	return _acgb
}

const (
	ST_AnimLvlStrUnset ST_AnimLvlStr = 0
	ST_AnimLvlStrNone  ST_AnimLvlStr = 1
	ST_AnimLvlStrLvl   ST_AnimLvlStr = 2
	ST_AnimLvlStrCtr   ST_AnimLvlStr = 3
)

func NewCT_When() *CT_When {
	_gaddg := &CT_When{}
	_gaddg.FuncAttr = ST_FunctionType(1)
	_gaddg.OpAttr = ST_FunctionOperator(1)
	return _gaddg
}

const (
	ST_TextBlockDirectionUnset ST_TextBlockDirection = 0
	ST_TextBlockDirectionHorz  ST_TextBlockDirection = 1
	ST_TextBlockDirectionVert  ST_TextBlockDirection = 2
)

type ST_ResizeHandlesStr byte

type CT_AnimLvl struct{ ValAttr ST_AnimLvlStr }

// Validate validates the CT_DataModel and its children
func (_ccfe *CT_DataModel) Validate() error {
	return _ccfe.ValidateWithPath("\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c")
}

func (_bgfd ST_NodeHorizontalAlignment) String() string {
	switch _bgfd {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}

type AG_IteratorAttributes struct {
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_acccb ST_ChildDirection) String() string {
	switch _acccb {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}

func (_fgdd *CT_SampleData) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ebdgf := range start.Attr {
		if _ebdgf.Name.Local == "\u0075\u0073\u0065\u0044\u0065\u0066" {
			_gfdd, _dbeg := _f.ParseBool(_ebdgf.Value)
			if _dbeg != nil {
				return _dbeg
			}
			_fgdd.UseDefAttr = &_gfdd
			continue
		}
	}
_ffffcg:
	for {
		_acdc, _gecf := d.Token()
		if _gecf != nil {
			return _gecf
		}
		switch _eggfe := _acdc.(type) {
		case _a.StartElement:
			switch _eggfe.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}:
				_fgdd.DataModel = NewCT_DataModel()
				if _aaee := d.DecodeElement(_fgdd.DataModel, &_eggfe); _aaee != nil {
					return _aaee
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053a\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061 \u0025\u0076", _eggfe.Name)
				if _egfga := d.Skip(); _egfga != nil {
					return _egfga
				}
			}
		case _a.EndElement:
			break _ffffcg
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_ElementTypeUnset    ST_ElementType = 0
	ST_ElementTypeAll      ST_ElementType = 1
	ST_ElementTypeDoc      ST_ElementType = 2
	ST_ElementTypeNode     ST_ElementType = 3
	ST_ElementTypeNorm     ST_ElementType = 4
	ST_ElementTypeNonNorm  ST_ElementType = 5
	ST_ElementTypeAsst     ST_ElementType = 6
	ST_ElementTypeNonAsst  ST_ElementType = 7
	ST_ElementTypeParTrans ST_ElementType = 8
	ST_ElementTypePres     ST_ElementType = 9
	ST_ElementTypeSibTrans ST_ElementType = 10
)

func (_afgad ST_OutputShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_afgad.String(), start)
}

type CT_HierBranchStyle struct{ ValAttr ST_HierBranchStyle }

func (_gab *CT_Choose) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bcgd := range start.Attr {
		if _bcgd.Name.Local == "\u006e\u0061\u006d\u0065" {
			_ddd, _aeeb := _bcgd.Value, error(nil)
			if _aeeb != nil {
				return _aeeb
			}
			_gab.NameAttr = &_ddd
			continue
		}
	}
_cff:
	for {
		_bcb, _cde := d.Token()
		if _cde != nil {
			return _cde
		}
		switch _ccd := _bcb.(type) {
		case _a.StartElement:
			switch _ccd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0069\u0066"}:
				_ebfa := NewCT_When()
				if _adg := d.DecodeElement(_ebfa, &_ccd); _adg != nil {
					return _adg
				}
				_gab.If = append(_gab.If, _ebfa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u006c\u0073\u0065"}:
				_gab.Else = NewCT_Otherwise()
				if _aeb := d.DecodeElement(_gab.Else, &_ccd); _aeb != nil {
					return _aeb
				}
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u0068\u006fo\u0073\u0065 \u0025\u0076", _ccd.Name)
				if _dfde := d.Skip(); _dfde != nil {
					return _dfde
				}
			}
		case _a.EndElement:
			break _cff
		case _a.CharData:
		}
	}
	return nil
}

func (_ddcd ST_AlgorithmType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_geca := _a.Attr{}
	_geca.Name = name
	switch _ddcd {
	case ST_AlgorithmTypeUnset:
		_geca.Value = ""
	case ST_AlgorithmTypeComposite:
		_geca.Value = "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case ST_AlgorithmTypeConn:
		_geca.Value = "\u0063\u006f\u006e\u006e"
	case ST_AlgorithmTypeCycle:
		_geca.Value = "\u0063\u0079\u0063l\u0065"
	case ST_AlgorithmTypeHierChild:
		_geca.Value = "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case ST_AlgorithmTypeHierRoot:
		_geca.Value = "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case ST_AlgorithmTypePyra:
		_geca.Value = "\u0070\u0079\u0072\u0061"
	case ST_AlgorithmTypeLin:
		_geca.Value = "\u006c\u0069\u006e"
	case ST_AlgorithmTypeSp:
		_geca.Value = "\u0073\u0070"
	case ST_AlgorithmTypeTx:
		_geca.Value = "\u0074\u0078"
	case ST_AlgorithmTypeSnake:
		_geca.Value = "\u0073\u006e\u0061k\u0065"
	}
	return _geca, nil
}

func (_dbb *CT_Adj) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbb.IdxAttr = 1
	for _, _ba := range start.Attr {
		if _ba.Name.Local == "\u0069\u0064\u0078" {
			_fdd, _fcd := _f.ParseUint(_ba.Value, 10, 32)
			if _fcd != nil {
				return _fcd
			}
			_dbb.IdxAttr = uint32(_fdd)
			continue
		}
		if _ba.Name.Local == "\u0076\u0061\u006c" {
			_caf, _fbg := _f.ParseFloat(_ba.Value, 64)
			if _fbg != nil {
				return _fbg
			}
			_dbb.ValAttr = _caf
			continue
		}
	}
	for {
		_cgd, _egd := d.Token()
		if _egd != nil {
			return _ef.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0041d\u006a\u003a\u0020\u0025\u0073", _egd)
		}
		if _ac, _bef := _cgd.(_a.EndElement); _bef && _ac.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinitionHeaderLst and its children, prefixing error messages with path
func (_fafa *CT_StyleDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _egec, _edbcb := range _fafa.StyleDefHdr {
		if _cbfaa := _edbcb.ValidateWithPath(_ef.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0048d\u0072\u005b\u0025\u0064\u005d", path, _egec)); _cbfaa != nil {
			return _cbfaa
		}
	}
	return nil
}

func (_cfbf ST_TextAnchorHorizontal) ValidateWithPath(path string) error {
	switch _cfbf {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cfbf))
	}
	return nil
}

func (_febae *CT_NumericRule) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _febae.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", *_febae.ValAttr)})
	}
	if _febae.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _ef.Sprintf("\u0025\u0076", *_febae.FactAttr)})
	}
	if _febae.MaxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0061\u0078"}, Value: _ef.Sprintf("\u0025\u0076", *_febae.MaxAttr)})
	}
	if _febae.TypeAttr != ST_ConstraintTypeUnset {
		_cabee, _cfcba := _febae.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _cfcba != nil {
			return _cfcba
		}
		start.Attr = append(start.Attr, _cabee)
	}
	if _febae.ForAttr != ST_ConstraintRelationshipUnset {
		_bdddf, _bcge := _febae.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _bcge != nil {
			return _bcge
		}
		start.Attr = append(start.Attr, _bdddf)
	}
	if _febae.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_febae.ForNameAttr)})
	}
	if _febae.PtTypeAttr != ST_ElementTypeUnset {
		_fbege, _bcbe := _febae.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _bcbe != nil {
			return _bcbe
		}
		start.Attr = append(start.Attr, _fbege)
	}
	e.EncodeToken(start)
	if _febae.ExtLst != nil {
		_eegg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febae.ExtLst, _eegg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_egde *CT_Description) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _egde.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _ef.Sprintf("\u0025\u0076", *_egde.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _ef.Sprintf("\u0025\u0076", _egde.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Direction and its children, prefixing error messages with path
func (_gffg *CT_Direction) ValidateWithPath(path string) error {
	if _ffcc := _gffg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ffcc != nil {
		return _ffcc
	}
	return nil
}

// ValidateWithPath validates the CT_Parameter and its children, prefixing error messages with path
func (_daaeg *CT_Parameter) ValidateWithPath(path string) error {
	if _daaeg.TypeAttr == ST_ParameterIdUnset {
		return _ef.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bfbd := _daaeg.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _bfbd != nil {
		return _bfbd
	}
	if _agfac := _daaeg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _agfac != nil {
		return _agfac
	}
	return nil
}

type ST_GrowDirection byte

func (_afdc *ST_ModelId) ValidateWithPath(path string) error {
	_ceed := []string{}
	if _afdc.Int32 != nil {
		_ceed = append(_ceed, "\u0049\u006e\u00743\u0032")
	}
	if _afdc.ST_Guid != nil {
		_ceed = append(_ceed, "\u0053T\u005f\u0047\u0075\u0069\u0064")
	}
	if len(_ceed) > 1 {
		return _ef.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ceed)
	}
	return nil
}

type CT_DiagramDefinitionHeaderLst struct{ LayoutDefHdr []*CT_DiagramDefinitionHeader }

func (_fdgba *ST_BendPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fdgba = 0
	case "\u0062\u0065\u0067":
		*_fdgba = 1
	case "\u0064\u0065\u0066":
		*_fdgba = 2
	case "\u0065\u006e\u0064":
		*_fdgba = 3
	}
	return nil
}

func (_ccbb *CT_Rules) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_aeca:
	for {
		_fgde, _caggg := d.Token()
		if _caggg != nil {
			return _caggg
		}
		switch _ebgg := _fgde.(type) {
		case _a.StartElement:
			switch _ebgg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0075\u006c\u0065"}:
				_fee := NewCT_NumericRule()
				if _bfeaa := d.DecodeElement(_fee, &_ebgg); _bfeaa != nil {
					return _bfeaa
				}
				_ccbb.Rule = append(_ccbb.Rule, _fee)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073\u0020\u0025\u0076", _ebgg.Name)
				if _acad := d.Skip(); _acad != nil {
					return _acad
				}
			}
		case _a.EndElement:
			break _aeca
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_NodeVerticalAlignmentUnset ST_NodeVerticalAlignment = 0
	ST_NodeVerticalAlignmentT     ST_NodeVerticalAlignment = 1
	ST_NodeVerticalAlignmentMid   ST_NodeVerticalAlignment = 2
	ST_NodeVerticalAlignmentB     ST_NodeVerticalAlignment = 3
)

func ParseUnionST_ParameterVal(s string) (ST_ParameterVal, error) { return ST_ParameterVal{}, nil }

func (_dbcbf ST_TextBlockDirection) Validate() error { return _dbcbf.ValidateWithPath("") }

// Validate validates the CT_StyleDefinition and its children
func (_ecfed *CT_StyleDefinition) Validate() error {
	return _ecfed.ValidateWithPath("\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_PtList and its children, prefixing error messages with path
func (_bebb *CT_PtList) ValidateWithPath(path string) error {
	for _cdgb, _eddg := range _bebb.Pt {
		if _egad := _eddg.ValidateWithPath(_ef.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _cdgb)); _egad != nil {
			return _egad
		}
	}
	return nil
}

func (_ebeb *CT_DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	_fcee := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074\u004cs\u0074"}}
	e.EncodeElement(_ebeb.PtLst, _fcee)
	if _ebeb.CxnLst != nil {
		_dcf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}}
		e.EncodeElement(_ebeb.CxnLst, _dcf)
	}
	if _ebeb.Bg != nil {
		_afcb := _a.StartElement{Name: _a.Name{Local: "\u0062\u0067"}}
		e.EncodeElement(_ebeb.Bg, _afcb)
	}
	if _ebeb.Whole != nil {
		_dfbf := _a.StartElement{Name: _a.Name{Local: "\u0077\u0068\u006fl\u0065"}}
		e.EncodeElement(_ebeb.Whole, _dfbf)
	}
	if _ebeb.ExtLst != nil {
		_eacb := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebeb.ExtLst, _eacb)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LayoutNode and its children, prefixing error messages with path
func (_gfad *CT_LayoutNode) ValidateWithPath(path string) error {
	if _ggdd := _gfad.ChOrderAttr.ValidateWithPath(path + "\u002f\u0043\u0068O\u0072\u0064\u0065\u0072\u0041\u0074\u0074\u0072"); _ggdd != nil {
		return _ggdd
	}
	for _egdd, _efcff := range _gfad.Alg {
		if _cbfca := _efcff.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0041\u006c\u0067\u005b\u0025\u0064\u005d", path, _egdd)); _cbfca != nil {
			return _cbfca
		}
	}
	for _fbgdb, _cgbg := range _gfad.Shape {
		if _gccab := _cgbg.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fS\u0068\u0061\u0070\u0065\u005b\u0025\u0064\u005d", path, _fbgdb)); _gccab != nil {
			return _gccab
		}
	}
	for _bfgg, _faeg := range _gfad.PresOf {
		if _cccd := _faeg.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0050\u0072\u0065\u0073\u004f\u0066\u005b\u0025\u0064\u005d", path, _bfgg)); _cccd != nil {
			return _cccd
		}
	}
	for _dbea, _bfecb := range _gfad.ConstrLst {
		if _ecdf := _bfecb.ValidateWithPath(_ef.Sprintf("\u0025\u0073/\u0043\u006f\u006es\u0074\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _dbea)); _ecdf != nil {
			return _ecdf
		}
	}
	for _bgcac, _befa := range _gfad.RuleLst {
		if _gdab := _befa.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0052\u0075\u006c\u0065\u004c\u0073t\u005b\u0025\u0064\u005d", path, _bgcac)); _gdab != nil {
			return _gdab
		}
	}
	for _gdad, _abfc := range _gfad.VarLst {
		if _aebf := _abfc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0056\u0061\u0072\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _gdad)); _aebf != nil {
			return _aebf
		}
	}
	for _gcecf, _fcbf := range _gfad.ForEach {
		if _fefb := _fcbf.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0046\u006f\u0072\u0045\u0061\u0063h\u005b\u0025\u0064\u005d", path, _gcecf)); _fefb != nil {
			return _fefb
		}
	}
	for _cgfg, _dcde := range _gfad.LayoutNode {
		if _agee := _dcde.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064e\u005b\u0025\u0064\u005d", path, _cgfg)); _agee != nil {
			return _agee
		}
	}
	for _eecdg, _gefc := range _gfad.Choose {
		if _gfag := _gefc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u006f\u0073\u0065\u005b\u0025\u0064\u005d", path, _eecdg)); _gfag != nil {
			return _gfag
		}
	}
	for _ffgdc, _abgc := range _gfad.ExtLst {
		if _aafg := _abgc.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _ffgdc)); _aafg != nil {
			return _aafg
		}
	}
	return nil
}

func (_agaae ST_PyramidAccentPosition) Validate() error { return _agaae.ValidateWithPath("") }

func (_ccbbg ST_BendPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_aafee := _a.Attr{}
	_aafee.Name = name
	switch _ccbbg {
	case ST_BendPointUnset:
		_aafee.Value = ""
	case ST_BendPointBeg:
		_aafee.Value = "\u0062\u0065\u0067"
	case ST_BendPointDef:
		_aafee.Value = "\u0064\u0065\u0066"
	case ST_BendPointEnd:
		_aafee.Value = "\u0065\u006e\u0064"
	}
	return _aafee, nil
}

type CT_CTDescription struct {
	LangAttr *string
	ValAttr  string
}

func (_feccc ST_HierarchyAlignment) ValidateWithPath(path string) error {
	switch _feccc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feccc))
	}
	return nil
}

func (_gdafdf ST_LinearDirection) ValidateWithPath(path string) error {
	switch _gdafdf {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdafdf))
	}
	return nil
}

func (_agbb *ST_ModelId) Validate() error { return _agbb.ValidateWithPath("") }

type ST_TextBlockDirection byte

func (_aedd ST_PyramidAccentTextMargin) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aedd.String(), start)
}

// ValidateWithPath validates the DataModel and its children, prefixing error messages with path
func (_fdbg *DataModel) ValidateWithPath(path string) error {
	if _dfagd := _fdbg.CT_DataModel.ValidateWithPath(path); _dfagd != nil {
		return _dfagd
	}
	return nil
}

func (_fbfed ST_AutoTextRotation) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fbfed.String(), start)
}

func (_fda *CT_Constraint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _aag := range start.Attr {
		if _aag.Name.Local == "\u006f\u0070" {
			_fda.OpAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0076\u0061\u006c" {
			_aeda, _gec := _f.ParseFloat(_aag.Value, 64)
			if _gec != nil {
				return _gec
			}
			_fda.ValAttr = &_aeda
			continue
		}
		if _aag.Name.Local == "\u0066\u0061\u0063\u0074" {
			_gceb, _ddg := _f.ParseFloat(_aag.Value, 64)
			if _ddg != nil {
				return _ddg
			}
			_fda.FactAttr = &_gceb
			continue
		}
		if _aag.Name.Local == "\u0074\u0079\u0070\u0065" {
			_fda.TypeAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0066\u006f\u0072" {
			_fda.ForAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_aeg, _cdac := _aag.Value, error(nil)
			if _cdac != nil {
				return _cdac
			}
			_fda.ForNameAttr = &_aeg
			continue
		}
		if _aag.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_fda.PtTypeAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_fda.RefTypeAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_fda.RefForAttr.UnmarshalXMLAttr(_aag)
			continue
		}
		if _aag.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_ebab, _dbba := _aag.Value, error(nil)
			if _dbba != nil {
				return _dbba
			}
			_fda.RefForNameAttr = &_ebab
			continue
		}
		if _aag.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_fda.RefPtTypeAttr.UnmarshalXMLAttr(_aag)
			continue
		}
	}
_ebg:
	for {
		_aedc, _cbda := d.Token()
		if _cbda != nil {
			return _cbda
		}
		switch _ecef := _aedc.(type) {
		case _a.StartElement:
			switch _ecef.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fda.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _fbf := d.DecodeElement(_fda.ExtLst, &_ecef); _fbf != nil {
					return _fbf
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043o\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074 \u0025\u0076", _ecef.Name)
				if _bbad := d.Skip(); _bbad != nil {
					return _bbad
				}
			}
		case _a.EndElement:
			break _ebg
		case _a.CharData:
		}
	}
	return nil
}

func (_abbg *DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_abbg.CT_DataModel = *NewCT_DataModel()
_fefe:
	for {
		_cbef, _aaag := d.Token()
		if _aaag != nil {
			return _aaag
		}
		switch _ecccc := _cbef.(type) {
		case _a.StartElement:
			switch _ecccc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _bfdea := d.DecodeElement(_abbg.PtLst, &_ecccc); _bfdea != nil {
					return _bfdea
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_abbg.CxnLst = NewCT_CxnList()
				if _bcaa := d.DecodeElement(_abbg.CxnLst, &_ecccc); _bcaa != nil {
					return _bcaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_abbg.Bg = _fd.NewCT_BackgroundFormatting()
				if _dggbc := d.DecodeElement(_abbg.Bg, &_ecccc); _dggbc != nil {
					return _dggbc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_abbg.Whole = _fd.NewCT_WholeE2oFormatting()
				if _gebe := d.DecodeElement(_abbg.Whole, &_ecccc); _gebe != nil {
					return _gebe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abbg.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _edba := d.DecodeElement(_abbg.ExtLst, &_ecccc); _edba != nil {
					return _edba
				}
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0044\u0061\u0074\u0061\u004d\u006fd\u0065\u006c \u0025\u0076", _ecccc.Name)
				if _bdae := d.Skip(); _bdae != nil {
					return _bdae
				}
			}
		case _a.EndElement:
			break _fefe
		case _a.CharData:
		}
	}
	return nil
}

func (_ggbd *CT_RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dcegd := range start.Attr {
		if _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0064\u006d" || _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0064\u006d" {
			_baed, _fagg := _dcegd.Value, error(nil)
			if _fagg != nil {
				return _fagg
			}
			_ggbd.DmAttr = _baed
			continue
		}
		if _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dcegd.Name.Local == "\u006c\u006f" || _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dcegd.Name.Local == "\u006c\u006f" {
			_cacb, _egcdf := _dcegd.Value, error(nil)
			if _egcdf != nil {
				return _egcdf
			}
			_ggbd.LoAttr = _cacb
			continue
		}
		if _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0071\u0073" || _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0071\u0073" {
			_ccbc, _gbaea := _dcegd.Value, error(nil)
			if _gbaea != nil {
				return _gbaea
			}
			_ggbd.QsAttr = _ccbc
			continue
		}
		if _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0063\u0073" || _dcegd.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _dcegd.Name.Local == "\u0063\u0073" {
			_cgec, _egcga := _dcegd.Value, error(nil)
			if _egcga != nil {
				return _egcga
			}
			_ggbd.CsAttr = _cgec
			continue
		}
	}
	for {
		_bdbd, _ceba := d.Token()
		if _ceba != nil {
			return _ef.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0052\u0065\u006cI\u0064\u0073\u003a\u0020\u0025\u0073", _ceba)
		}
		if _bbdfg, _bfbf := _bdbd.(_a.EndElement); _bfbf && _bbdfg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ebef ST_ModelId) String() string {
	if _ebef.Int32 != nil {
		return _ef.Sprintf("\u0025\u0076", *_ebef.Int32)
	}
	if _ebef.ST_Guid != nil {
		return _ef.Sprintf("\u0025\u0076", *_ebef.ST_Guid)
	}
	return ""
}

// ValidateWithPath validates the CT_DiagramDefinitionHeaderLst and its children, prefixing error messages with path
func (_adda *CT_DiagramDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _gdee, _gaac := range _adda.LayoutDefHdr {
		if _caad := _gaac.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u004cay\u006f\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _gdee)); _caad != nil {
			return _caad
		}
	}
	return nil
}

type ST_ChildDirection byte

func (_cag *CT_ColorTransform) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cag.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _ef.Sprintf("\u0025\u0076", *_cag.UniqueIdAttr)})
	}
	if _cag.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _ef.Sprintf("\u0025\u0076", *_cag.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _cag.Title != nil {
		_bff := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _eea := range _cag.Title {
			e.EncodeElement(_eea, _bff)
		}
	}
	if _cag.Desc != nil {
		_dcdb := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _fed := range _cag.Desc {
			e.EncodeElement(_fed, _dcdb)
		}
	}
	if _cag.CatLst != nil {
		_abcf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cag.CatLst, _abcf)
	}
	if _cag.StyleLbl != nil {
		_ffc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
		for _, _cfaf := range _cag.StyleLbl {
			e.EncodeElement(_cfaf, _ffc)
		}
	}
	if _cag.ExtLst != nil {
		_bdc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cag.ExtLst, _bdc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bcdae ST_ConnectorDimension) Validate() error { return _bcdae.ValidateWithPath("") }

func NewCT_StyleDefinition() *CT_StyleDefinition { _cfgfb := &CT_StyleDefinition{}; return _cfgfb }

func (_fbdg ST_ChildOrderType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gcaba := _a.Attr{}
	_gcaba.Name = name
	switch _fbdg {
	case ST_ChildOrderTypeUnset:
		_gcaba.Value = ""
	case ST_ChildOrderTypeB:
		_gcaba.Value = "\u0062"
	case ST_ChildOrderTypeT:
		_gcaba.Value = "\u0074"
	}
	return _gcaba, nil
}

func (_bcfca ST_BoolOperator) String() string {
	switch _bcfca {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0065\u0071\u0075"
	case 3:
		return "\u0067\u0074\u0065"
	case 4:
		return "\u006c\u0074\u0065"
	}
	return ""
}

func (_dgce ST_GrowDirection) ValidateWithPath(path string) error {
	switch _dgce {
	case 0, 1, 2, 3, 4:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgce))
	}
	return nil
}

func (_bfddg *ST_ChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfddg = 0
	case "\u0074":
		*_bfddg = 1
	case "\u0062":
		*_bfddg = 2
	case "\u006c":
		*_bfddg = 3
	case "\u0072":
		*_bfddg = 4
	}
	return nil
}

type ST_ConnectorPoint byte

func NewCT_Rules() *CT_Rules { _ddfdb := &CT_Rules{}; return _ddfdb }

// ValidateWithPath validates the ColorsDefHdrLst and its children, prefixing error messages with path
func (_dfcf *ColorsDefHdrLst) ValidateWithPath(path string) error {
	if _afgg := _dfcf.CT_ColorTransformHeaderLst.ValidateWithPath(path); _afgg != nil {
		return _afgg
	}
	return nil
}

func (_gegeb ST_AutoTextRotation) String() string {
	switch _gegeb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0075\u0070\u0072"
	case 3:
		return "\u0067\u0072\u0061\u0076"
	}
	return ""
}

const (
	ST_LinearDirectionUnset ST_LinearDirection = 0
	ST_LinearDirectionFromL ST_LinearDirection = 1
	ST_LinearDirectionFromR ST_LinearDirection = 2
	ST_LinearDirectionFromT ST_LinearDirection = 3
	ST_LinearDirectionFromB ST_LinearDirection = 4
)

// Validate validates the CT_SDDescription and its children
func (_dadbc *CT_SDDescription) Validate() error {
	return _dadbc.ValidateWithPath("\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}

func (_caegb ST_ConnectorRouting) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_caegb.String(), start)
}

func (_acg *CT_Constraints) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _acg.Constr != nil {
		_gedf := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}}
		for _, _cdga := range _acg.Constr {
			e.EncodeElement(_cdga, _gedf)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_NodeVerticalAlignment byte

func (_aegeg *ST_TextAnchorHorizontal) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_aegeg = 0
	case "\u006e\u006f\u006e\u0065":
		*_aegeg = 1
	case "\u0063\u0074\u0072":
		*_aegeg = 2
	}
	return nil
}

func NewCT_Adj() *CT_Adj { _cdg := &CT_Adj{}; _cdg.IdxAttr = 1; return _cdg }

func (_bagedg *ST_OutputShapeType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gacg, _acea := d.Token()
	if _acea != nil {
		return _acea
	}
	if _aegc, _aebfe := _gacg.(_a.EndElement); _aebfe && _aegc.Name == start.Name {
		*_bagedg = 1
		return nil
	}
	if _cbccd, _cfbab := _gacg.(_a.CharData); !_cfbab {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gacg)
	} else {
		switch string(_cbccd) {
		case "":
			*_bagedg = 0
		case "\u006e\u006f\u006e\u0065":
			*_bagedg = 1
		case "\u0063\u006f\u006e\u006e":
			*_bagedg = 2
		}
	}
	_gacg, _acea = d.Token()
	if _acea != nil {
		return _acea
	}
	if _ffeea, _bggg := _gacg.(_a.EndElement); _bggg && _ffeea.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gacg)
}

func (_bgbaf ST_ContinueDirection) ValidateWithPath(path string) error {
	switch _bgbaf {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgbaf))
	}
	return nil
}

func (_deba ST_ConnectorDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_deba.String(), start)
}

func (_edaa ST_ParameterId) Validate() error { return _edaa.ValidateWithPath("") }

func NewLayoutDefHdr() *LayoutDefHdr {
	_dccdf := &LayoutDefHdr{}
	_dccdf.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	return _dccdf
}

func (_fdfg ST_SecondaryChildAlignment) String() string {
	switch _fdfg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0074"
	case 3:
		return "\u0062"
	case 4:
		return "\u006c"
	case 5:
		return "\u0072"
	}
	return ""
}

func (_abed *CT_PtList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _abed.Pt != nil {
		_eafb := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074"}}
		for _, _ffga := range _abed.Pt {
			e.EncodeElement(_ffga, _eafb)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_dgcca ST_ResizeHandlesStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dgcca.String(), start)
}

func (_fgdff ST_FallbackDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_efaa := _a.Attr{}
	_efaa.Name = name
	switch _fgdff {
	case ST_FallbackDimensionUnset:
		_efaa.Value = ""
	case ST_FallbackDimension1D:
		_efaa.Value = "\u0031\u0044"
	case ST_FallbackDimension2D:
		_efaa.Value = "\u0032\u0044"
	}
	return _efaa, nil
}

func (_fdffe *ST_ConnectorDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fdffe = 0
	case "\u0031\u0044":
		*_fdffe = 1
	case "\u0032\u0044":
		*_fdffe = 2
	case "\u0063\u0075\u0073\u0074":
		*_fdffe = 3
	}
	return nil
}

func (_cgfe *StyleDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066"
	return _cgfe.CT_StyleDefinition.MarshalXML(e, start)
}

func (_accb ST_ArrowheadStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_accb.String(), start)
}

type CT_SampleData struct {
	UseDefAttr *bool
	DataModel  *CT_DataModel
}

const (
	ST_HierarchyAlignmentUnset   ST_HierarchyAlignment = 0
	ST_HierarchyAlignmentTL      ST_HierarchyAlignment = 1
	ST_HierarchyAlignmentTR      ST_HierarchyAlignment = 2
	ST_HierarchyAlignmentTCtrCh  ST_HierarchyAlignment = 3
	ST_HierarchyAlignmentTCtrDes ST_HierarchyAlignment = 4
	ST_HierarchyAlignmentBL      ST_HierarchyAlignment = 5
	ST_HierarchyAlignmentBR      ST_HierarchyAlignment = 6
	ST_HierarchyAlignmentBCtrCh  ST_HierarchyAlignment = 7
	ST_HierarchyAlignmentBCtrDes ST_HierarchyAlignment = 8
	ST_HierarchyAlignmentLT      ST_HierarchyAlignment = 9
	ST_HierarchyAlignmentLB      ST_HierarchyAlignment = 10
	ST_HierarchyAlignmentLCtrCh  ST_HierarchyAlignment = 11
	ST_HierarchyAlignmentLCtrDes ST_HierarchyAlignment = 12
	ST_HierarchyAlignmentRT      ST_HierarchyAlignment = 13
	ST_HierarchyAlignmentRB      ST_HierarchyAlignment = 14
	ST_HierarchyAlignmentRCtrCh  ST_HierarchyAlignment = 15
	ST_HierarchyAlignmentRCtrDes ST_HierarchyAlignment = 16
)

func (_dcaeb *ST_TextDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dacf, _cfgdf := d.Token()
	if _cfgdf != nil {
		return _cfgdf
	}
	if _baceg, _bcagc := _dacf.(_a.EndElement); _bcagc && _baceg.Name == start.Name {
		*_dcaeb = 1
		return nil
	}
	if _agae, _faef := _dacf.(_a.CharData); !_faef {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dacf)
	} else {
		switch string(_agae) {
		case "":
			*_dcaeb = 0
		case "\u0066\u0072\u006fm\u0054":
			*_dcaeb = 1
		case "\u0066\u0072\u006fm\u0042":
			*_dcaeb = 2
		}
	}
	_dacf, _cfgdf = d.Token()
	if _cfgdf != nil {
		return _cfgdf
	}
	if _dbce, _gbec := _dacf.(_a.EndElement); _gbec && _dbce.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dacf)
}

// Validate validates the CT_AnimLvl and its children
func (_ggd *CT_AnimLvl) Validate() error {
	return _ggd.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c")
}

type ST_RotationPath byte

func (_fafad ST_ConnectorDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gecde := _a.Attr{}
	_gecde.Name = name
	switch _fafad {
	case ST_ConnectorDimensionUnset:
		_gecde.Value = ""
	case ST_ConnectorDimension1D:
		_gecde.Value = "\u0031\u0044"
	case ST_ConnectorDimension2D:
		_gecde.Value = "\u0032\u0044"
	case ST_ConnectorDimensionCust:
		_gecde.Value = "\u0063\u0075\u0073\u0074"
	}
	return _gecde, nil
}

func (_faadc ST_TextAnchorHorizontal) String() string {
	switch _faadc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u0074\u0072"
	}
	return ""
}

func NewCT_ColorTransformHeaderLst() *CT_ColorTransformHeaderLst {
	_gadgg := &CT_ColorTransformHeaderLst{}
	return _gadgg
}

func (_ccfbe ST_TextAnchorVertical) Validate() error { return _ccfbe.ValidateWithPath("") }

// ValidateWithPath validates the CT_DiagramDefinition and its children, prefixing error messages with path
func (_fcae *CT_DiagramDefinition) ValidateWithPath(path string) error {
	for _ffgb, _fge := range _fcae.Title {
		if _gced := _fge.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _ffgb)); _gced != nil {
			return _gced
		}
	}
	for _fbfc, _ddgc := range _fcae.Desc {
		if _cagd := _ddgc.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _fbfc)); _cagd != nil {
			return _cagd
		}
	}
	if _fcae.CatLst != nil {
		if _ffbd := _fcae.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _ffbd != nil {
			return _ffbd
		}
	}
	if _fcae.SampData != nil {
		if _cfdc := _fcae.SampData.ValidateWithPath(path + "\u002fS\u0061\u006d\u0070\u0044\u0061\u0074a"); _cfdc != nil {
			return _cfdc
		}
	}
	if _fcae.StyleData != nil {
		if _cfbc := _fcae.StyleData.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065\u0044\u0061\u0074\u0061"); _cfbc != nil {
			return _cfbc
		}
	}
	if _fcae.ClrData != nil {
		if _afae := _fcae.ClrData.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u0044\u0061\u0074\u0061"); _afae != nil {
			return _afae
		}
	}
	if _dcdfc := _fcae.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _dcdfc != nil {
		return _dcdfc
	}
	if _fcae.ExtLst != nil {
		if _fgf := _fcae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fgf != nil {
			return _fgf
		}
	}
	return nil
}

const (
	ST_TextDirectionUnset ST_TextDirection = 0
	ST_TextDirectionFromT ST_TextDirection = 1
	ST_TextDirectionFromB ST_TextDirection = 2
)

func (_aafd ST_NodeHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eabd := _a.Attr{}
	_eabd.Name = name
	switch _aafd {
	case ST_NodeHorizontalAlignmentUnset:
		_eabd.Value = ""
	case ST_NodeHorizontalAlignmentL:
		_eabd.Value = "\u006c"
	case ST_NodeHorizontalAlignmentCtr:
		_eabd.Value = "\u0063\u0074\u0072"
	case ST_NodeHorizontalAlignmentR:
		_eabd.Value = "\u0072"
	}
	return _eabd, nil
}

func NewCT_Description() *CT_Description { _gaaf := &CT_Description{}; return _gaaf }

func (_daba *CT_CxnList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _daba.Cxn != nil {
		_abga := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e"}}
		for _, _cedg := range _daba.Cxn {
			e.EncodeElement(_cedg, _abga)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_OutputShapeTypeUnset ST_OutputShapeType = 0
	ST_OutputShapeTypeNone  ST_OutputShapeType = 1
	ST_OutputShapeTypeConn  ST_OutputShapeType = 2
)

func (_baadb ST_VerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bddda := _a.Attr{}
	_bddda.Name = name
	switch _baadb {
	case ST_VerticalAlignmentUnset:
		_bddda.Value = ""
	case ST_VerticalAlignmentT:
		_bddda.Value = "\u0074"
	case ST_VerticalAlignmentMid:
		_bddda.Value = "\u006d\u0069\u0064"
	case ST_VerticalAlignmentB:
		_bddda.Value = "\u0062"
	case ST_VerticalAlignmentNone:
		_bddda.Value = "\u006e\u006f\u006e\u0065"
	}
	return _bddda, nil
}

type ST_ConstraintType byte

func (_gefd ST_AxisType) Validate() error { return _gefd.ValidateWithPath("") }

func (_fgbeae ST_OutputShapeType) ValidateWithPath(path string) error {
	switch _fgbeae {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgbeae))
	}
	return nil
}

func (_eggc *ST_ClrAppMethod) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eegc, _dfba := d.Token()
	if _dfba != nil {
		return _dfba
	}
	if _gdfa, _eaae := _eegc.(_a.EndElement); _eaae && _gdfa.Name == start.Name {
		*_eggc = 1
		return nil
	}
	if _defee, _geged := _eegc.(_a.CharData); !_geged {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eegc)
	} else {
		switch string(_defee) {
		case "":
			*_eggc = 0
		case "\u0073\u0070\u0061\u006e":
			*_eggc = 1
		case "\u0063\u0079\u0063l\u0065":
			*_eggc = 2
		case "\u0072\u0065\u0070\u0065\u0061\u0074":
			*_eggc = 3
		}
	}
	_eegc, _dfba = d.Token()
	if _dfba != nil {
		return _dfba
	}
	if _gbdc, _cfca := _eegc.(_a.EndElement); _cfca && _gbdc.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eegc)
}

func (_cgeg *ST_LinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cgeg = 0
	case "\u0066\u0072\u006fm\u004c":
		*_cgeg = 1
	case "\u0066\u0072\u006fm\u0052":
		*_cgeg = 2
	case "\u0066\u0072\u006fm\u0054":
		*_cgeg = 3
	case "\u0066\u0072\u006fm\u0042":
		*_cgeg = 4
	}
	return nil
}

func (_bfb *CT_CTCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ad:
	for {
		_gaa, _gff := d.Token()
		if _gff != nil {
			return _gff
		}
		switch _eee := _gaa.(type) {
		case _a.StartElement:
			switch _eee.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_cae := NewCT_CTCategory()
				if _ccf := d.DecodeElement(_cae, &_eee); _ccf != nil {
					return _ccf
				}
				_bfb.Cat = append(_bfb.Cat, _cae)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _eee.Name)
				if _bcd := d.Skip(); _bcd != nil {
					return _bcd
				}
			}
		case _a.EndElement:
			break _ad
		case _a.CharData:
		}
	}
	return nil
}

func (_gaff *CT_Pt) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fbece := range start.Attr {
		if _fbece.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_gdcd, _dfdag := ParseUnionST_ModelId(_fbece.Value)
			if _dfdag != nil {
				return _dfdag
			}
			_gaff.ModelIdAttr = _gdcd
			continue
		}
		if _fbece.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gaff.TypeAttr.UnmarshalXMLAttr(_fbece)
			continue
		}
		if _fbece.Name.Local == "\u0063\u0078\u006eI\u0064" {
			_aegd, _fdgbd := ParseUnionST_ModelId(_fbece.Value)
			if _fdgbd != nil {
				return _fdgbd
			}
			_gaff.CxnIdAttr = &_aegd
			continue
		}
	}
_efcc:
	for {
		_dafa, _cdfe := d.Token()
		if _cdfe != nil {
			return _cdfe
		}
		switch _efge := _dafa.(type) {
		case _a.StartElement:
			switch _efge.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0053e\u0074"}:
				_gaff.PrSet = NewCT_ElemPropSet()
				if _aagf := d.DecodeElement(_gaff.PrSet, &_efge); _aagf != nil {
					return _aagf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0050\u0072"}:
				_gaff.SpPr = _fd.NewCT_ShapeProperties()
				if _gfb := d.DecodeElement(_gaff.SpPr, &_efge); _gfb != nil {
					return _gfb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074"}:
				_gaff.T = _fd.NewCT_TextBody()
				if _edaf := d.DecodeElement(_gaff.T, &_efge); _edaf != nil {
					return _edaf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaff.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _bffbb := d.DecodeElement(_gaff.ExtLst, &_efge); _bffbb != nil {
					return _bffbb
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fP\u0074 \u0025\u0076", _efge.Name)
				if _gdaca := d.Skip(); _gdaca != nil {
					return _gdaca
				}
			}
		case _a.EndElement:
			break _efcc
		case _a.CharData:
		}
	}
	return nil
}

type LayoutDefHdr struct{ CT_DiagramDefinitionHeader }

func (_eegdg ST_PtType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eegdg.String(), start)
}

func (_dfefe *ST_AutoTextRotation) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffdgg, _cdgec := d.Token()
	if _cdgec != nil {
		return _cdgec
	}
	if _fafed, _dcec := _ffdgg.(_a.EndElement); _dcec && _fafed.Name == start.Name {
		*_dfefe = 1
		return nil
	}
	if _ebfc, _fced := _ffdgg.(_a.CharData); !_fced {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffdgg)
	} else {
		switch string(_ebfc) {
		case "":
			*_dfefe = 0
		case "\u006e\u006f\u006e\u0065":
			*_dfefe = 1
		case "\u0075\u0070\u0072":
			*_dfefe = 2
		case "\u0067\u0072\u0061\u0076":
			*_dfefe = 3
		}
	}
	_ffdgg, _cdgec = d.Token()
	if _cdgec != nil {
		return _cdgec
	}
	if _bdafa, _gffgeb := _ffdgg.(_a.EndElement); _gffgeb && _bdafa.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffdgg)
}

func (_fega ST_NodeHorizontalAlignment) ValidateWithPath(path string) error {
	switch _fega {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fega))
	}
	return nil
}

func (_cacgc *ST_NodeHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bdddc, _ccbd := d.Token()
	if _ccbd != nil {
		return _ccbd
	}
	if _gedda, _egbdc := _bdddc.(_a.EndElement); _egbdc && _gedda.Name == start.Name {
		*_cacgc = 1
		return nil
	}
	if _fafea, _fcef := _bdddc.(_a.CharData); !_fcef {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdddc)
	} else {
		switch string(_fafea) {
		case "":
			*_cacgc = 0
		case "\u006c":
			*_cacgc = 1
		case "\u0063\u0074\u0072":
			*_cacgc = 2
		case "\u0072":
			*_cacgc = 3
		}
	}
	_bdddc, _ccbd = d.Token()
	if _ccbd != nil {
		return _ccbd
	}
	if _degca, _gacb := _bdddc.(_a.EndElement); _gacb && _degca.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdddc)
}

func (_ggge ST_FunctionArgument) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ggge.ST_VariableType != ST_VariableTypeUnset {
		e.EncodeToken(_a.CharData(_ggge.ST_VariableType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

func (_gfbc *CT_ResizeHandles) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gfbc.ValAttr != ST_ResizeHandlesStrUnset {
		_afaf, _dcbbb := _gfbc.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _dcbbb != nil {
			return _dcbbb
		}
		start.Attr = append(start.Attr, _afaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_eadafa *ST_GrowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fbgb, _geadg := d.Token()
	if _geadg != nil {
		return _geadg
	}
	if _aaff, _debc := _fbgb.(_a.EndElement); _debc && _aaff.Name == start.Name {
		*_eadafa = 1
		return nil
	}
	if _fgfgb, _fgggb := _fbgb.(_a.CharData); !_fgggb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbgb)
	} else {
		switch string(_fgfgb) {
		case "":
			*_eadafa = 0
		case "\u0074\u004c":
			*_eadafa = 1
		case "\u0074\u0052":
			*_eadafa = 2
		case "\u0062\u004c":
			*_eadafa = 3
		case "\u0062\u0052":
			*_eadafa = 4
		}
	}
	_fbgb, _geadg = d.Token()
	if _geadg != nil {
		return _geadg
	}
	if _efgbg, _fcgg := _fbgb.(_a.EndElement); _fcgg && _efgbg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbgb)
}

func (_gca *CT_Algorithm) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gca.TypeAttr = ST_AlgorithmType(1)
	for _, _aea := range start.Attr {
		if _aea.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gca.TypeAttr.UnmarshalXMLAttr(_aea)
			continue
		}
		if _aea.Name.Local == "\u0072\u0065\u0076" {
			_abf, _ccc := _f.ParseUint(_aea.Value, 10, 32)
			if _ccc != nil {
				return _ccc
			}
			_cgdd := uint32(_abf)
			_gca.RevAttr = &_cgdd
			continue
		}
	}
_egb:
	for {
		_ddfd, _cfb := d.Token()
		if _cfb != nil {
			return _cfb
		}
		switch _bae := _ddfd.(type) {
		case _a.StartElement:
			switch _bae.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0061\u0072a\u006d"}:
				_fad := NewCT_Parameter()
				if _bdeb := d.DecodeElement(_fad, &_bae); _bdeb != nil {
					return _bdeb
				}
				_gca.Param = append(_gca.Param, _fad)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gca.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _cfg := d.DecodeElement(_gca.ExtLst, &_bae); _cfg != nil {
					return _cfg
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u006c\u0067o\u0072\u0069\u0074\u0068\u006d\u0020\u0025\u0076", _bae.Name)
				if _ecf := d.Skip(); _ecf != nil {
					return _ecf
				}
			}
		case _a.EndElement:
			break _egb
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_FallbackDimensionUnset ST_FallbackDimension = 0
	ST_FallbackDimension1D    ST_FallbackDimension = 1
	ST_FallbackDimension2D    ST_FallbackDimension = 2
)

const (
	ST_SecondaryChildAlignmentUnset ST_SecondaryChildAlignment = 0
	ST_SecondaryChildAlignmentNone  ST_SecondaryChildAlignment = 1
	ST_SecondaryChildAlignmentT     ST_SecondaryChildAlignment = 2
	ST_SecondaryChildAlignmentB     ST_SecondaryChildAlignment = 3
	ST_SecondaryChildAlignmentL     ST_SecondaryChildAlignment = 4
	ST_SecondaryChildAlignmentR     ST_SecondaryChildAlignment = 5
)

func (_dfgb *StyleDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dfgb.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
_afcbb:
	for {
		_ccfbd, _dcfbb := d.Token()
		if _dcfbb != nil {
			return _dcfbb
		}
		switch _febcg := _ccfbd.(type) {
		case _a.StartElement:
			switch _febcg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_eaee := NewCT_StyleDefinitionHeader()
				if _aefef := d.DecodeElement(_eaee, &_febcg); _aefef != nil {
					return _aefef
				}
				_dfgb.StyleDefHdr = append(_dfgb.StyleDefHdr, _eaee)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064r\u004cs\u0074\u0020\u0025\u0076", _febcg.Name)
				if _fgad := d.Skip(); _fgad != nil {
					return _fgad
				}
			}
		case _a.EndElement:
			break _afcbb
		case _a.CharData:
		}
	}
	return nil
}

func (_dbcb ST_LayoutShapeType) String() string {
	if _dbcb.ST_ShapeType != _fd.ST_ShapeTypeUnset {
		return _dbcb.ST_ShapeType.String()
	}
	if _dbcb.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		return _dbcb.ST_OutputShapeType.String()
	}
	return ""
}

func (_cfdde ST_ConstraintRelationship) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffeba := _a.Attr{}
	_ffeba.Name = name
	switch _cfdde {
	case ST_ConstraintRelationshipUnset:
		_ffeba.Value = ""
	case ST_ConstraintRelationshipSelf:
		_ffeba.Value = "\u0073\u0065\u006c\u0066"
	case ST_ConstraintRelationshipCh:
		_ffeba.Value = "\u0063\u0068"
	case ST_ConstraintRelationshipDes:
		_ffeba.Value = "\u0064\u0065\u0073"
	}
	return _ffeba, nil
}

type CT_SDCategories struct{ Cat []*CT_SDCategory }

func (_cb *CT_CTName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _feb := range start.Attr {
		if _feb.Name.Local == "\u006c\u0061\u006e\u0067" {
			_adc, _cfa := _feb.Value, error(nil)
			if _cfa != nil {
				return _cfa
			}
			_cb.LangAttr = &_adc
			continue
		}
		if _feb.Name.Local == "\u0076\u0061\u006c" {
			_bcg, _acb := _feb.Value, error(nil)
			if _acb != nil {
				return _acb
			}
			_cb.ValAttr = _bcg
			continue
		}
	}
	for {
		_adb, _cbd := d.Token()
		if _cbd != nil {
			return _ef.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0043\u0054\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _cbd)
		}
		if _fggb, _fca := _adb.(_a.EndElement); _fca && _fggb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Pt and its children, prefixing error messages with path
func (_degea *CT_Pt) ValidateWithPath(path string) error {
	if _dadb := _degea.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _dadb != nil {
		return _dadb
	}
	if _bfdeb := _degea.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _bfdeb != nil {
		return _bfdeb
	}
	if _degea.CxnIdAttr != nil {
		if _bbcb := _degea.CxnIdAttr.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0049\u0064\u0041\u0074\u0074\u0072"); _bbcb != nil {
			return _bbcb
		}
	}
	if _degea.PrSet != nil {
		if _bbge := _degea.PrSet.ValidateWithPath(path + "\u002f\u0050\u0072\u0053\u0065\u0074"); _bbge != nil {
			return _bbge
		}
	}
	if _degea.SpPr != nil {
		if _bace := _degea.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bace != nil {
			return _bace
		}
	}
	if _degea.T != nil {
		if _gbfgb := _degea.T.ValidateWithPath(path + "\u002f\u0054"); _gbfgb != nil {
			return _gbfgb
		}
	}
	if _degea.ExtLst != nil {
		if _ccdb := _degea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccdb != nil {
			return _ccdb
		}
	}
	return nil
}

func (_feeb *ST_FunctionOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_feeb = 0
	case "\u0065\u0071\u0075":
		*_feeb = 1
	case "\u006e\u0065\u0071":
		*_feeb = 2
	case "\u0067\u0074":
		*_feeb = 3
	case "\u006c\u0074":
		*_feeb = 4
	case "\u0067\u0074\u0065":
		*_feeb = 5
	case "\u006c\u0074\u0065":
		*_feeb = 6
	}
	return nil
}

func (_fdfb *CT_CTCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gef := range start.Attr {
		if _gef.Name.Local == "\u0074\u0079\u0070\u0065" {
			_bed, _bfc := _gef.Value, error(nil)
			if _bfc != nil {
				return _bfc
			}
			_fdfb.TypeAttr = _bed
			continue
		}
		if _gef.Name.Local == "\u0070\u0072\u0069" {
			_gba, _bade := _f.ParseUint(_gef.Value, 10, 32)
			if _bade != nil {
				return _bade
			}
			_fdfb.PriAttr = uint32(_gba)
			continue
		}
	}
	for {
		_gad, _dfb := d.Token()
		if _dfb != nil {
			return _ef.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0043T\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _dfb)
		}
		if _cab, _eag := _gad.(_a.EndElement); _eag && _cab.Name == start.Name {
			break
		}
	}
	return nil
}

func (_begc *CT_StyleDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_gdbf:
	for {
		_dadeb, _bbda := d.Token()
		if _bbda != nil {
			return _bbda
		}
		switch _cead := _dadeb.(type) {
		case _a.StartElement:
			switch _cead.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_dbad := NewCT_StyleDefinitionHeader()
				if _fegdg := d.DecodeElement(_dbad, &_cead); _fegdg != nil {
					return _fegdg
				}
				_begc.StyleDefHdr = append(_begc.StyleDefHdr, _dbad)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _cead.Name)
				if _edea := d.Skip(); _edea != nil {
					return _edea
				}
			}
		case _a.EndElement:
			break _gdbf
		case _a.CharData:
		}
	}
	return nil
}

func (_aeag ST_PtType) ValidateWithPath(path string) error {
	switch _aeag {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aeag))
	}
	return nil
}

// ValidateWithPath validates the CT_CTStyleLabel and its children, prefixing error messages with path
func (_eacd *CT_CTStyleLabel) ValidateWithPath(path string) error {
	if _eacd.FillClrLst != nil {
		if _fbcb := _eacd.FillClrLst.ValidateWithPath(path + "/\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _fbcb != nil {
			return _fbcb
		}
	}
	if _eacd.LinClrLst != nil {
		if _bbb := _eacd.LinClrLst.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _bbb != nil {
			return _bbb
		}
	}
	if _eacd.EffectClrLst != nil {
		if _dccg := _eacd.EffectClrLst.ValidateWithPath(path + "\u002f\u0045\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _dccg != nil {
			return _dccg
		}
	}
	if _eacd.TxLinClrLst != nil {
		if _fff := _eacd.TxLinClrLst.ValidateWithPath(path + "\u002f\u0054\u0078L\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _fff != nil {
			return _fff
		}
	}
	if _eacd.TxFillClrLst != nil {
		if _dbg := _eacd.TxFillClrLst.ValidateWithPath(path + "\u002f\u0054\u0078\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _dbg != nil {
			return _dbg
		}
	}
	if _eacd.TxEffectClrLst != nil {
		if _cac := _eacd.TxEffectClrLst.ValidateWithPath(path + "\u002fT\u0078E\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _cac != nil {
			return _cac
		}
	}
	if _eacd.ExtLst != nil {
		if _gee := _eacd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gee != nil {
			return _gee
		}
	}
	return nil
}

// Validate validates the CT_Choose and its children
func (_cef *CT_Choose) Validate() error {
	return _cef.ValidateWithPath("\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e")
}

func (_cbgce ST_StartingElement) ValidateWithPath(path string) error {
	switch _cbgce {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbgce))
	}
	return nil
}

func NewCT_Algorithm() *CT_Algorithm {
	_bgc := &CT_Algorithm{}
	_bgc.TypeAttr = ST_AlgorithmType(1)
	return _bgc
}

func (_bcef ST_SecondaryLinearDirection) Validate() error { return _bcef.ValidateWithPath("") }

func (_ccegc *CT_StyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", _ccegc.NameAttr)})
	e.EncodeToken(start)
	if _ccegc.Scene3d != nil {
		_cebc := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_ccegc.Scene3d, _cebc)
	}
	if _ccegc.Sp3d != nil {
		_bbcfca := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_ccegc.Sp3d, _bbcfca)
	}
	if _ccegc.TxPr != nil {
		_aafgb := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ccegc.TxPr, _aafgb)
	}
	if _ccegc.Style != nil {
		_cgbdc := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_ccegc.Style, _cgbdc)
	}
	if _ccegc.ExtLst != nil {
		_dfgf := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccegc.ExtLst, _dfgf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_bfdb ST_HierarchyAlignment) String() string {
	switch _bfdb {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0074\u0043\u0074\u0072\u0043\u0068"
	case 4:
		return "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case 5:
		return "\u0062\u004c"
	case 6:
		return "\u0062\u0052"
	case 7:
		return "\u0062\u0043\u0074\u0072\u0043\u0068"
	case 8:
		return "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case 9:
		return "\u006c\u0054"
	case 10:
		return "\u006c\u0042"
	case 11:
		return "\u006c\u0043\u0074\u0072\u0043\u0068"
	case 12:
		return "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case 13:
		return "\u0072\u0054"
	case 14:
		return "\u0072\u0042"
	case 15:
		return "\u0072\u0043\u0074\u0072\u0043\u0068"
	case 16:
		return "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return ""
}

// ValidateWithPath validates the CT_Category and its children, prefixing error messages with path
func (_ggg *CT_Category) ValidateWithPath(path string) error { return nil }

const (
	ST_BendPointUnset ST_BendPoint = 0
	ST_BendPointBeg   ST_BendPoint = 1
	ST_BendPointDef   ST_BendPoint = 2
	ST_BendPointEnd   ST_BendPoint = 3
)

func (_bbec ST_ParameterId) String() string {
	switch _bbec {
	case 0:
		return ""
	case 1:
		return "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case 2:
		return "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case 3:
		return "\u0063\u0068\u0044i\u0072"
	case 4:
		return "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case 5:
		return "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case 6:
		return "\u006c\u0069\u006e\u0044\u0069\u0072"
	case 7:
		return "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case 8:
		return "\u0073\u0074\u0045\u006c\u0065\u006d"
	case 9:
		return "\u0062\u0065\u006e\u0064\u0050\u0074"
	case 10:
		return "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case 11:
		return "\u0062\u0065\u0067\u0053\u0074\u0079"
	case 12:
		return "\u0065\u006e\u0064\u0053\u0074\u0079"
	case 13:
		return "\u0064\u0069\u006d"
	case 14:
		return "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case 15:
		return "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case 16:
		return "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case 17:
		return "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case 18:
		return "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case 19:
		return "\u0074\u0078\u0044i\u0072"
	case 20:
		return "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case 21:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case 22:
		return "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case 23:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case 24:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case 25:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case 26:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case 27:
		return "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case 28:
		return "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case 29:
		return "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 30:
		return "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 31:
		return "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case 32:
		return "\u0067\u0072\u0044i\u0072"
	case 33:
		return "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case 34:
		return "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case 35:
		return "\u0062\u006b\u0070\u0074"
	case 36:
		return "\u006f\u0066\u0066"
	case 37:
		return "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case 38:
		return "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 39:
		return "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case 40:
		return "\u0073\u0074\u0041n\u0067"
	case 41:
		return "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case 42:
		return "\u0061\u0072"
	case 43:
		return "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case 44:
		return "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case 45:
		return "\u006c\u006e\u0053\u0070\u0043\u0068"
	case 46:
		return "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case 47:
		return "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case 48:
		return "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case 49:
		return "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case 50:
		return "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case 51:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case 52:
		return "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case 53:
		return "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case 54:
		return "\u0062\u0065\u0067\u0050\u0074\u0073"
	case 55:
		return "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return ""
}

func NewColorsDefHdrLst() *ColorsDefHdrLst {
	_efafb := &ColorsDefHdrLst{}
	_efafb.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
	return _efafb
}

func (_eccfc ST_FallbackDimension) String() string {
	switch _eccfc {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	}
	return ""
}

func (_bcbc *CT_PresentationOf) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gcfaa := range start.Attr {
		if _gcfaa.Name.Local == "\u0061\u0078\u0069\u0073" {
			_bdbc, _cgbga := ParseSliceST_AxisTypes(_gcfaa.Value)
			if _cgbga != nil {
				return _cgbga
			}
			_bcbc.AxisAttr = &_bdbc
			continue
		}
		if _gcfaa.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_cgeb, _ggcbg := ParseSliceST_ElementTypes(_gcfaa.Value)
			if _ggcbg != nil {
				return _ggcbg
			}
			_bcbc.PtTypeAttr = &_cgeb
			continue
		}
		if _gcfaa.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_bfed, _cfgbd := ParseSliceST_Booleans(_gcfaa.Value)
			if _cfgbd != nil {
				return _cfgbd
			}
			_bcbc.HideLastTransAttr = &_bfed
			continue
		}
		if _gcfaa.Name.Local == "\u0073\u0074" {
			_degf, _acdd := ParseSliceST_Ints(_gcfaa.Value)
			if _acdd != nil {
				return _acdd
			}
			_bcbc.StAttr = &_degf
			continue
		}
		if _gcfaa.Name.Local == "\u0063\u006e\u0074" {
			_aece, _acbb := ParseSliceST_UnsignedInts(_gcfaa.Value)
			if _acbb != nil {
				return _acbb
			}
			_bcbc.CntAttr = &_aece
			continue
		}
		if _gcfaa.Name.Local == "\u0073\u0074\u0065\u0070" {
			_fcce, _bddb := ParseSliceST_Ints(_gcfaa.Value)
			if _bddb != nil {
				return _bddb
			}
			_bcbc.StepAttr = &_fcce
			continue
		}
	}
_ageea:
	for {
		_egce, _adefe := d.Token()
		if _adefe != nil {
			return _adefe
		}
		switch _caga := _egce.(type) {
		case _a.StartElement:
			switch _caga.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcbc.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _afee := d.DecodeElement(_bcbc.ExtLst, &_caga); _afee != nil {
					return _afee
				}
			default:
				_c.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u004f\u0066\u0020\u0025\u0076", _caga.Name)
				if _dcee := d.Skip(); _dcee != nil {
					return _dcee
				}
			}
		case _a.EndElement:
			break _ageea
		case _a.CharData:
		}
	}
	return nil
}

func NewCT_BulletEnabled() *CT_BulletEnabled { _fdc := &CT_BulletEnabled{}; return _fdc }

func (_ffgdg ST_TextAnchorHorizontal) Validate() error { return _ffgdg.ValidateWithPath("") }

// ValidateWithPath validates the CT_Rules and its children, prefixing error messages with path
func (_cbfa *CT_Rules) ValidateWithPath(path string) error {
	for _gaaa, _fcbbc := range _cbfa.Rule {
		if _deef := _fcbbc.ValidateWithPath(_ef.Sprintf("%\u0073\u002f\u0052\u0075\u006c\u0065\u005b\u0025\u0064\u005d", path, _gaaa)); _deef != nil {
			return _deef
		}
	}
	return nil
}

func (_bgcacb ST_Offset) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bgcacb.String(), start)
}

func (_gbfgd *ST_VariableType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gfcce, _gbggd := d.Token()
	if _gbggd != nil {
		return _gbggd
	}
	if _eaaeb, _adfdag := _gfcce.(_a.EndElement); _adfdag && _eaaeb.Name == start.Name {
		*_gbfgd = 1
		return nil
	}
	if _baec, _cbgffd := _gfcce.(_a.CharData); !_cbgffd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfcce)
	} else {
		switch string(_baec) {
		case "":
			*_gbfgd = 0
		case "\u006e\u006f\u006e\u0065":
			*_gbfgd = 1
		case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
			*_gbfgd = 2
		case "\u0063\u0068\u004da\u0078":
			*_gbfgd = 3
		case "\u0063\u0068\u0050\u0072\u0065\u0066":
			*_gbfgd = 4
		case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
			*_gbfgd = 5
		case "\u0064\u0069\u0072":
			*_gbfgd = 6
		case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
			*_gbfgd = 7
		case "\u0061n\u0069\u006d\u004f\u006e\u0065":
			*_gbfgd = 8
		case "\u0061n\u0069\u006d\u004c\u0076\u006c":
			*_gbfgd = 9
		case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
			*_gbfgd = 10
		}
	}
	_gfcce, _gbggd = d.Token()
	if _gbggd != nil {
		return _gbggd
	}
	if _dbffa, _cage := _gfcce.(_a.EndElement); _cage && _dbffa.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfcce)
}

func NewCT_ElemPropSet() *CT_ElemPropSet { _dbd := &CT_ElemPropSet{}; return _dbd }

type ST_ElementType byte

type ST_SecondaryLinearDirection byte

func (_edbb *CT_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _edbb.ValAttr != ST_DirectionUnset {
		_dbfg, _gcca := _edbb.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _gcca != nil {
			return _gcca
		}
		start.Attr = append(start.Attr, _dbfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_agce *ST_AlgorithmType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ggcbf, _aaada := d.Token()
	if _aaada != nil {
		return _aaada
	}
	if _bbde, _adbda := _ggcbf.(_a.EndElement); _adbda && _bbde.Name == start.Name {
		*_agce = 1
		return nil
	}
	if _bdcca, _cgga := _ggcbf.(_a.CharData); !_cgga {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggcbf)
	} else {
		switch string(_bdcca) {
		case "":
			*_agce = 0
		case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
			*_agce = 1
		case "\u0063\u006f\u006e\u006e":
			*_agce = 2
		case "\u0063\u0079\u0063l\u0065":
			*_agce = 3
		case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
			*_agce = 4
		case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
			*_agce = 5
		case "\u0070\u0079\u0072\u0061":
			*_agce = 6
		case "\u006c\u0069\u006e":
			*_agce = 7
		case "\u0073\u0070":
			*_agce = 8
		case "\u0074\u0078":
			*_agce = 9
		case "\u0073\u006e\u0061k\u0065":
			*_agce = 10
		}
	}
	_ggcbf, _aaada = d.Token()
	if _aaada != nil {
		return _aaada
	}
	if _ggdef, _eebd := _ggcbf.(_a.EndElement); _eebd && _ggdef.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggcbf)
}

func (_bfedf *ST_FunctionOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgdg, _eaacd := d.Token()
	if _eaacd != nil {
		return _eaacd
	}
	if _aaaa, _ffegb := _fgdg.(_a.EndElement); _ffegb && _aaaa.Name == start.Name {
		*_bfedf = 1
		return nil
	}
	if _bfdd, _cafcg := _fgdg.(_a.CharData); !_cafcg {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgdg)
	} else {
		switch string(_bfdd) {
		case "":
			*_bfedf = 0
		case "\u0065\u0071\u0075":
			*_bfedf = 1
		case "\u006e\u0065\u0071":
			*_bfedf = 2
		case "\u0067\u0074":
			*_bfedf = 3
		case "\u006c\u0074":
			*_bfedf = 4
		case "\u0067\u0074\u0065":
			*_bfedf = 5
		case "\u006c\u0074\u0065":
			*_bfedf = 6
		}
	}
	_fgdg, _eaacd = d.Token()
	if _eaacd != nil {
		return _eaacd
	}
	if _fgded, _cfcdc := _fgdg.(_a.EndElement); _cfcdc && _fgded.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgdg)
}

type CT_Categories struct{ Cat []*CT_Category }

func (_aedgc ST_NodeVerticalAlignment) ValidateWithPath(path string) error {
	switch _aedgc {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aedgc))
	}
	return nil
}

func (_bccce ST_ChildDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bccce.String(), start)
}

func (_edgg *ST_VerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_edgg = 0
	case "\u0074":
		*_edgg = 1
	case "\u006d\u0069\u0064":
		*_edgg = 2
	case "\u0062":
		*_edgg = 3
	case "\u006e\u006f\u006e\u0065":
		*_edgg = 4
	}
	return nil
}

func (_fged ST_TextDirection) String() string {
	switch _fged {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u0054"
	case 2:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}

func (_ecaaf *ST_PtType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebdfe, _dfeda := d.Token()
	if _dfeda != nil {
		return _dfeda
	}
	if _bdbb, _edec := _ebdfe.(_a.EndElement); _edec && _bdbb.Name == start.Name {
		*_ecaaf = 1
		return nil
	}
	if _aeea, _cbdg := _ebdfe.(_a.CharData); !_cbdg {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebdfe)
	} else {
		switch string(_aeea) {
		case "":
			*_ecaaf = 0
		case "\u006e\u006f\u0064\u0065":
			*_ecaaf = 1
		case "\u0061\u0073\u0073\u0074":
			*_ecaaf = 2
		case "\u0064\u006f\u0063":
			*_ecaaf = 3
		case "\u0070\u0072\u0065\u0073":
			*_ecaaf = 4
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_ecaaf = 5
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_ecaaf = 6
		}
	}
	_ebdfe, _dfeda = d.Token()
	if _dfeda != nil {
		return _dfeda
	}
	if _eege, _bacd := _ebdfe.(_a.EndElement); _bacd && _eege.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebdfe)
}

func (_fdgfd ST_OutputShapeType) Validate() error { return _fdgfd.ValidateWithPath("") }

func (_acbbf ST_AlgorithmType) String() string {
	switch _acbbf {
	case 0:
		return ""
	case 1:
		return "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	case 3:
		return "\u0063\u0079\u0063l\u0065"
	case 4:
		return "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case 5:
		return "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case 6:
		return "\u0070\u0079\u0072\u0061"
	case 7:
		return "\u006c\u0069\u006e"
	case 8:
		return "\u0073\u0070"
	case 9:
		return "\u0074\u0078"
	case 10:
		return "\u0073\u006e\u0061k\u0065"
	}
	return ""
}

func NewCT_AnimOne() *CT_AnimOne { _gdd := &CT_AnimOne{}; return _gdd }

func (_gbedee *ST_ConnectorRouting) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebge, _fcaba := d.Token()
	if _fcaba != nil {
		return _fcaba
	}
	if _dbaga, _fbcec := _ebge.(_a.EndElement); _fbcec && _dbaga.Name == start.Name {
		*_gbedee = 1
		return nil
	}
	if _ccagf, _egddd := _ebge.(_a.CharData); !_egddd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebge)
	} else {
		switch string(_ccagf) {
		case "":
			*_gbedee = 0
		case "\u0073\u0074\u0072\u0061":
			*_gbedee = 1
		case "\u0062\u0065\u006e\u0064":
			*_gbedee = 2
		case "\u0063\u0075\u0072v\u0065":
			*_gbedee = 3
		case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
			*_gbedee = 4
		}
	}
	_ebge, _fcaba = d.Token()
	if _fcaba != nil {
		return _fcaba
	}
	if _gdcbg, _bcfd := _ebge.(_a.EndElement); _bcfd && _gdcbg.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebge)
}

func (_eecca ST_AutoTextRotation) ValidateWithPath(path string) error {
	switch _eecca {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eecca))
	}
	return nil
}

// Validate validates the CT_CTName and its children
func (_afa *CT_CTName) Validate() error {
	return _afa.ValidateWithPath("\u0043T\u005f\u0043\u0054\u004e\u0061\u006de")
}

func (_eaafd ST_TextBlockDirection) ValidateWithPath(path string) error {
	switch _eaafd {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eaafd))
	}
	return nil
}

func NewCT_CTStyleLabel() *CT_CTStyleLabel { _bcfe := &CT_CTStyleLabel{}; return _bcfe }

func NewCT_Choose() *CT_Choose { _gfdb := &CT_Choose{}; return _gfdb }

// Validate validates the CT_SampleData and its children
func (_cbgfd *CT_SampleData) Validate() error {
	return _cbgfd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061")
}

func NewCT_StyleLabel() *CT_StyleLabel { _egada := &CT_StyleLabel{}; return _egada }

// ValidateWithPath validates the CT_TextProps and its children, prefixing error messages with path
func (_fcafb *CT_TextProps) ValidateWithPath(path string) error {
	if _fcafb.Sp3d != nil {
		if _bdcac := _fcafb.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _bdcac != nil {
			return _bdcac
		}
	}
	if _fcafb.FlatTx != nil {
		if _adeea := _fcafb.FlatTx.ValidateWithPath(path + "\u002fF\u006c\u0061\u0074\u0054\u0078"); _adeea != nil {
			return _adeea
		}
	}
	return nil
}

func (_dfdgd *ST_TextBlockDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dfdgd = 0
	case "\u0068\u006f\u0072\u007a":
		*_dfdgd = 1
	case "\u0076\u0065\u0072\u0074":
		*_dfdgd = 2
	}
	return nil
}

func (_ebfcf ST_VariableType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_beade := _a.Attr{}
	_beade.Name = name
	switch _ebfcf {
	case ST_VariableTypeUnset:
		_beade.Value = ""
	case ST_VariableTypeNone:
		_beade.Value = "\u006e\u006f\u006e\u0065"
	case ST_VariableTypeOrgChart:
		_beade.Value = "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case ST_VariableTypeChMax:
		_beade.Value = "\u0063\u0068\u004da\u0078"
	case ST_VariableTypeChPref:
		_beade.Value = "\u0063\u0068\u0050\u0072\u0065\u0066"
	case ST_VariableTypeBulEnabled:
		_beade.Value = "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case ST_VariableTypeDir:
		_beade.Value = "\u0064\u0069\u0072"
	case ST_VariableTypeHierBranch:
		_beade.Value = "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case ST_VariableTypeAnimOne:
		_beade.Value = "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case ST_VariableTypeAnimLvl:
		_beade.Value = "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case ST_VariableTypeResizeHandles:
		_beade.Value = "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return _beade, nil
}

type ST_ClrAppMethod byte

func (_gffdd *ST_SecondaryLinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gffdd = 0
	case "\u006e\u006f\u006e\u0065":
		*_gffdd = 1
	case "\u0066\u0072\u006fm\u004c":
		*_gffdd = 2
	case "\u0066\u0072\u006fm\u0052":
		*_gffdd = 3
	case "\u0066\u0072\u006fm\u0054":
		*_gffdd = 4
	case "\u0066\u0072\u006fm\u0042":
		*_gffdd = 5
	}
	return nil
}

func (_gbeff ST_VerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gbeff.String(), start)
}

func (_bcedd *ST_DiagramTextAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bcedd = 0
	case "\u006c":
		*_bcedd = 1
	case "\u0063\u0074\u0072":
		*_bcedd = 2
	case "\u0072":
		*_bcedd = 3
	}
	return nil
}

func NewRelIds() *RelIds { _ebad := &RelIds{}; _ebad.CT_RelIds = *NewCT_RelIds(); return _ebad }

func (_egdef ST_VerticalAlignment) String() string {
	switch _egdef {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

// ValidateWithPath validates the CT_Choose and its children, prefixing error messages with path
func (_facf *CT_Choose) ValidateWithPath(path string) error {
	for _gega, _fbef := range _facf.If {
		if _ead := _fbef.ValidateWithPath(_ef.Sprintf("\u0025s\u002f\u0049\u0066\u005b\u0025\u0064]", path, _gega)); _ead != nil {
			return _ead
		}
	}
	if _facf.Else != nil {
		if _gafbc := _facf.Else.ValidateWithPath(path + "\u002f\u0045\u006cs\u0065"); _gafbc != nil {
			return _gafbc
		}
	}
	return nil
}

type ST_NodeHorizontalAlignment byte

// Validate validates the StyleDef and its children
func (_deaa *StyleDef) Validate() error {
	return _deaa.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066")
}

func (_gafea *CT_SDDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bdag := range start.Attr {
		if _bdag.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gageg, _fbcfc := _bdag.Value, error(nil)
			if _fbcfc != nil {
				return _fbcfc
			}
			_gafea.LangAttr = &_gageg
			continue
		}
		if _bdag.Name.Local == "\u0076\u0061\u006c" {
			_ebgd, _dccde := _bdag.Value, error(nil)
			if _dccde != nil {
				return _dccde
			}
			_gafea.ValAttr = _ebgd
			continue
		}
	}
	for {
		_fecb, _faggd := d.Token()
		if _faggd != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0044\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _faggd)
		}
		if _ddfac, _eced := _fecb.(_a.EndElement); _eced && _ddfac.Name == start.Name {
			break
		}
	}
	return nil
}

func (_afdfa *ST_NodeHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afdfa = 0
	case "\u006c":
		*_afdfa = 1
	case "\u0063\u0074\u0072":
		*_afdfa = 2
	case "\u0072":
		*_afdfa = 3
	}
	return nil
}

// Validate validates the CT_Category and its children
func (_fgc *CT_Category) Validate() error {
	return _fgc.ValidateWithPath("C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

func (_gefcb ST_CenterShapeMapping) String() string {
	switch _gefcb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u004e\u006fd\u0065"
	}
	return ""
}

func (_aegad ST_VariableType) Validate() error { return _aegad.ValidateWithPath("") }

func (_dbead *ST_FallbackDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dbead = 0
	case "\u0031\u0044":
		*_dbead = 1
	case "\u0032\u0044":
		*_dbead = 2
	}
	return nil
}

func (_aee *CT_ChildMax) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fef := range start.Attr {
		if _fef.Name.Local == "\u0076\u0061\u006c" {
			_cggc, _dge := _f.ParseInt(_fef.Value, 10, 32)
			if _dge != nil {
				return _dge
			}
			_gafb := int32(_cggc)
			_aee.ValAttr = &_gafb
			continue
		}
	}
	for {
		_fgcb, _eecc := d.Token()
		if _eecc != nil {
			return _ef.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078\u003a\u0020\u0025\u0073", _eecc)
		}
		if _egf, _dfc := _fgcb.(_a.EndElement); _dfc && _egf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gegcf *ST_ConnectorPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dacee, _fefbg := d.Token()
	if _fefbg != nil {
		return _fefbg
	}
	if _gddbe, _gbgfa := _dacee.(_a.EndElement); _gbgfa && _gddbe.Name == start.Name {
		*_gegcf = 1
		return nil
	}
	if _fage, _gaeb := _dacee.(_a.CharData); !_gaeb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dacee)
	} else {
		switch string(_fage) {
		case "":
			*_gegcf = 0
		case "\u0061\u0075\u0074\u006f":
			*_gegcf = 1
		case "\u0062\u0043\u0074\u0072":
			*_gegcf = 2
		case "\u0063\u0074\u0072":
			*_gegcf = 3
		case "\u006d\u0069\u0064\u004c":
			*_gegcf = 4
		case "\u006d\u0069\u0064\u0052":
			*_gegcf = 5
		case "\u0074\u0043\u0074\u0072":
			*_gegcf = 6
		case "\u0062\u004c":
			*_gegcf = 7
		case "\u0062\u0052":
			*_gegcf = 8
		case "\u0074\u004c":
			*_gegcf = 9
		case "\u0074\u0052":
			*_gegcf = 10
		case "\u0072\u0061\u0064\u0069\u0061\u006c":
			*_gegcf = 11
		}
	}
	_dacee, _fefbg = d.Token()
	if _fefbg != nil {
		return _fefbg
	}
	if _fdfgd, _dgeed := _dacee.(_a.EndElement); _dgeed && _fdfgd.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dacee)
}

type CT_Direction struct{ ValAttr ST_Direction }

func (_ceef *ST_PyramidAccentTextMargin) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ceef = 0
	case "\u0073\u0074\u0065\u0070":
		*_ceef = 1
	case "\u0073\u0074\u0061c\u006b":
		*_ceef = 2
	}
	return nil
}

func (_bcec *ST_ChildOrderType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gcbc, _fcbg := d.Token()
	if _fcbg != nil {
		return _fcbg
	}
	if _bgcab, _ebce := _gcbc.(_a.EndElement); _ebce && _bgcab.Name == start.Name {
		*_bcec = 1
		return nil
	}
	if _gbce, _dbdca := _gcbc.(_a.CharData); !_dbdca {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gcbc)
	} else {
		switch string(_gbce) {
		case "":
			*_bcec = 0
		case "\u0062":
			*_bcec = 1
		case "\u0074":
			*_bcec = 2
		}
	}
	_gcbc, _fcbg = d.Token()
	if _fcbg != nil {
		return _fcbg
	}
	if _egcge, _ecfcc := _gcbc.(_a.EndElement); _ecfcc && _egcge.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gcbc)
}

const (
	ST_ClrAppMethodUnset  ST_ClrAppMethod = 0
	ST_ClrAppMethodSpan   ST_ClrAppMethod = 1
	ST_ClrAppMethodCycle  ST_ClrAppMethod = 2
	ST_ClrAppMethodRepeat ST_ClrAppMethod = 3
)

type ST_PtType byte

// ST_PrSetCustVal is a union type
type ST_PrSetCustVal struct {
	ST_Percentage *string
	Int32         *int32
}

func (_gbaf ST_ConnectorPoint) ValidateWithPath(path string) error {
	switch _gbaf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbaf))
	}
	return nil
}

// ValidateWithPath validates the AG_ConstraintAttributes and its children, prefixing error messages with path
func (_efa *AG_ConstraintAttributes) ValidateWithPath(path string) error {
	if _ed := _efa.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _ed != nil {
		return _ed
	}
	if _dda := _efa.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _dda != nil {
		return _dda
	}
	if _edc := _efa.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _edc != nil {
		return _edc
	}
	return nil
}

type CT_DataModel struct {
	PtLst  *CT_PtList
	CxnLst *CT_CxnList
	Bg     *_fd.CT_BackgroundFormatting
	Whole  *_fd.CT_WholeE2oFormatting
	ExtLst *_fd.CT_OfficeArtExtensionList
}

func NewAG_IteratorAttributes() *AG_IteratorAttributes { _fg := &AG_IteratorAttributes{}; return _fg }

type ST_TextDirection byte

func (_gadda ST_Offset) String() string {
	switch _gadda {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006f\u0066\u0066"
	}
	return ""
}

func (_dcabb ST_Offset) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fabfgg := _a.Attr{}
	_fabfgg.Name = name
	switch _dcabb {
	case ST_OffsetUnset:
		_fabfgg.Value = ""
	case ST_OffsetCtr:
		_fabfgg.Value = "\u0063\u0074\u0072"
	case ST_OffsetOff:
		_fabfgg.Value = "\u006f\u0066\u0066"
	}
	return _fabfgg, nil
}

type ST_SecondaryChildAlignment byte

func (_afbd ST_ConstraintType) String() string {
	switch _afbd {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case 3:
		return "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case 4:
		return "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case 5:
		return "\u0062\u0065\u0067\u0050\u0061\u0064"
	case 6:
		return "\u0062"
	case 7:
		return "\u0062\u004d\u0061r\u0067"
	case 8:
		return "\u0062\u004f\u0066\u0066"
	case 9:
		return "\u0063\u0074\u0072\u0058"
	case 10:
		return "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case 11:
		return "\u0063\u0074\u0072\u0059"
	case 12:
		return "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case 13:
		return "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case 14:
		return "\u0064\u0069\u0061\u006d"
	case 15:
		return "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case 16:
		return "\u0065\u006e\u0064\u0050\u0061\u0064"
	case 17:
		return "\u0068"
	case 18:
		return "\u0068\u0041\u0072\u0048"
	case 19:
		return "\u0068\u004f\u0066\u0066"
	case 20:
		return "\u006c"
	case 21:
		return "\u006c\u004d\u0061r\u0067"
	case 22:
		return "\u006c\u004f\u0066\u0066"
	case 23:
		return "\u0072"
	case 24:
		return "\u0072\u004d\u0061r\u0067"
	case 25:
		return "\u0072\u004f\u0066\u0066"
	case 26:
		return "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case 27:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case 28:
		return "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case 29:
		return "\u0073\u0069\u0062S\u0070"
	case 30:
		return "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case 31:
		return "\u0073\u0070"
	case 32:
		return "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case 33:
		return "\u0074"
	case 34:
		return "\u0074\u004d\u0061r\u0067"
	case 35:
		return "\u0074\u004f\u0066\u0066"
	case 36:
		return "\u0075\u0073\u0065r\u0041"
	case 37:
		return "\u0075\u0073\u0065r\u0042"
	case 38:
		return "\u0075\u0073\u0065r\u0043"
	case 39:
		return "\u0075\u0073\u0065r\u0044"
	case 40:
		return "\u0075\u0073\u0065r\u0045"
	case 41:
		return "\u0075\u0073\u0065r\u0046"
	case 42:
		return "\u0075\u0073\u0065r\u0047"
	case 43:
		return "\u0075\u0073\u0065r\u0048"
	case 44:
		return "\u0075\u0073\u0065r\u0049"
	case 45:
		return "\u0075\u0073\u0065r\u004a"
	case 46:
		return "\u0075\u0073\u0065r\u004b"
	case 47:
		return "\u0075\u0073\u0065r\u004c"
	case 48:
		return "\u0075\u0073\u0065r\u004d"
	case 49:
		return "\u0075\u0073\u0065r\u004e"
	case 50:
		return "\u0075\u0073\u0065r\u004f"
	case 51:
		return "\u0075\u0073\u0065r\u0050"
	case 52:
		return "\u0075\u0073\u0065r\u0051"
	case 53:
		return "\u0075\u0073\u0065r\u0052"
	case 54:
		return "\u0075\u0073\u0065r\u0053"
	case 55:
		return "\u0075\u0073\u0065r\u0054"
	case 56:
		return "\u0075\u0073\u0065r\u0055"
	case 57:
		return "\u0075\u0073\u0065r\u0056"
	case 58:
		return "\u0075\u0073\u0065r\u0057"
	case 59:
		return "\u0075\u0073\u0065r\u0058"
	case 60:
		return "\u0075\u0073\u0065r\u0059"
	case 61:
		return "\u0075\u0073\u0065r\u005a"
	case 62:
		return "\u0077"
	case 63:
		return "\u0077\u0041\u0072\u0048"
	case 64:
		return "\u0077\u004f\u0066\u0066"
	}
	return ""
}

// ValidateWithPath validates the StyleDefHdrLst and its children, prefixing error messages with path
func (_agffe *StyleDefHdrLst) ValidateWithPath(path string) error {
	if _edef := _agffe.CT_StyleDefinitionHeaderLst.ValidateWithPath(path); _edef != nil {
		return _edef
	}
	return nil
}

type ST_Breakpoint byte

func (_cbgccf *ColorsDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f"
	return _cbgccf.CT_ColorTransform.MarshalXML(e, start)
}

type ST_FunctionType byte

func (_eaeb *ST_TextAnchorVertical) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eaeb = 0
	case "\u0074":
		*_eaeb = 1
	case "\u006d\u0069\u0064":
		*_eaeb = 2
	case "\u0062":
		*_eaeb = 3
	}
	return nil
}

const (
	ST_FlowDirectionUnset ST_FlowDirection = 0
	ST_FlowDirectionRow   ST_FlowDirection = 1
	ST_FlowDirectionCol   ST_FlowDirection = 2
)

func (_fdfcg ST_AlgorithmType) Validate() error { return _fdfcg.ValidateWithPath("") }

func (_agfacc *CT_SDCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", _agfacc.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _ef.Sprintf("\u0025\u0076", _agfacc.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SDDescription and its children, prefixing error messages with path
func (_edff *CT_SDDescription) ValidateWithPath(path string) error { return nil }

func (_ddeb ST_PyramidAccentTextMargin) Validate() error { return _ddeb.ValidateWithPath("") }

func (_b *AG_ConstraintAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _b.TypeAttr != ST_ConstraintTypeUnset {
		_g, _gg := _b.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _gg != nil {
			return _gg
		}
		start.Attr = append(start.Attr, _g)
	}
	if _b.ForAttr != ST_ConstraintRelationshipUnset {
		_d, _bd := _b.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _bd != nil {
			return _bd
		}
		start.Attr = append(start.Attr, _d)
	}
	if _b.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _ef.Sprintf("\u0025\u0076", *_b.ForNameAttr)})
	}
	if _b.PtTypeAttr != ST_ElementTypeUnset {
		_gc, _ge := _b.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _ge != nil {
			return _ge
		}
		start.Attr = append(start.Attr, _gc)
	}
	return nil
}

// Validate validates the ColorsDefHdr and its children
func (_eae *ColorsDefHdr) Validate() error {
	return _eae.ValidateWithPath("\u0043\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072")
}

func (_bgg ST_GrowDirection) Validate() error { return _bgg.ValidateWithPath("") }

// Validate validates the CT_Parameter and its children
func (_dacg *CT_Parameter) Validate() error {
	return _dacg.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072")
}

type CT_RelIds struct {
	DmAttr string
	LoAttr string
	QsAttr string
	CsAttr string
}

type ColorsDefHdr struct{ CT_ColorTransformHeader }

func (_ddacg ST_FallbackDimension) ValidateWithPath(path string) error {
	switch _ddacg {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddacg))
	}
	return nil
}

// Validate validates the CT_ColorTransformHeaderLst and its children
func (_ggcg *CT_ColorTransformHeaderLst) Validate() error {
	return _ggcg.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074")
}

func (_ccee *ST_OutputShapeType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ccee = 0
	case "\u006e\u006f\u006e\u0065":
		*_ccee = 1
	case "\u0063\u006f\u006e\u006e":
		*_ccee = 2
	}
	return nil
}

// Validate validates the CT_Algorithm and its children
func (_caab *CT_Algorithm) Validate() error {
	return _caab.ValidateWithPath("\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d")
}

func (_fbcf *CT_LayoutNode) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ceaa := range start.Attr {
		if _ceaa.Name.Local == "\u006e\u0061\u006d\u0065" {
			_gdfd, _bbbc := _ceaa.Value, error(nil)
			if _bbbc != nil {
				return _bbbc
			}
			_fbcf.NameAttr = &_gdfd
			continue
		}
		if _ceaa.Name.Local == "\u0063h\u004f\u0072\u0064\u0065\u0072" {
			_fbcf.ChOrderAttr.UnmarshalXMLAttr(_ceaa)
			continue
		}
		if _ceaa.Name.Local == "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068" {
			_face, _gded := _ceaa.Value, error(nil)
			if _gded != nil {
				return _gded
			}
			_fbcf.MoveWithAttr = &_face
			continue
		}
		if _ceaa.Name.Local == "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_bbbb, _fegd := _ceaa.Value, error(nil)
			if _fegd != nil {
				return _fegd
			}
			_fbcf.StyleLblAttr = &_bbbb
			continue
		}
	}
_dgab:
	for {
		_gcdd, _cfafe := d.Token()
		if _cfafe != nil {
			return _cfafe
		}
		switch _cgcf := _gcdd.(type) {
		case _a.StartElement:
			switch _cgcf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_cecga := NewCT_Algorithm()
				if _cbgf := d.DecodeElement(_cecga, &_cgcf); _cbgf != nil {
					return _cbgf
				}
				_fbcf.Alg = append(_fbcf.Alg, _cecga)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_deda := NewCT_Shape()
				if _dgcf := d.DecodeElement(_deda, &_cgcf); _dgcf != nil {
					return _dgcf
				}
				_fbcf.Shape = append(_fbcf.Shape, _deda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_dcdg := NewCT_PresentationOf()
				if _bdddd := d.DecodeElement(_dcdg, &_cgcf); _bdddd != nil {
					return _bdddd
				}
				_fbcf.PresOf = append(_fbcf.PresOf, _dcdg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_fbgg := NewCT_Constraints()
				if _egfd := d.DecodeElement(_fbgg, &_cgcf); _egfd != nil {
					return _egfd
				}
				_fbcf.ConstrLst = append(_fbcf.ConstrLst, _fbgg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_cdc := NewCT_Rules()
				if _gaef := d.DecodeElement(_cdc, &_cgcf); _gaef != nil {
					return _gaef
				}
				_fbcf.RuleLst = append(_fbcf.RuleLst, _cdc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}:
				_fdgb := NewCT_LayoutVariablePropertySet()
				if _cbb := d.DecodeElement(_fdgb, &_cgcf); _cbb != nil {
					return _cbb
				}
				_fbcf.VarLst = append(_fbcf.VarLst, _fdgb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_cegac := NewCT_ForEach()
				if _bedcg := d.DecodeElement(_cegac, &_cgcf); _bedcg != nil {
					return _bedcg
				}
				_fbcf.ForEach = append(_fbcf.ForEach, _cegac)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_degg := NewCT_LayoutNode()
				if _dcfb := d.DecodeElement(_degg, &_cgcf); _dcfb != nil {
					return _dcfb
				}
				_fbcf.LayoutNode = append(_fbcf.LayoutNode, _degg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_ddfff := NewCT_Choose()
				if _bafd := d.DecodeElement(_ddfff, &_cgcf); _bafd != nil {
					return _bafd
				}
				_fbcf.Choose = append(_fbcf.Choose, _ddfff)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dgbb := _fd.NewCT_OfficeArtExtensionList()
				if _cefb := d.DecodeElement(_dgbb, &_cgcf); _cefb != nil {
					return _cefb
				}
				_fbcf.ExtLst = append(_fbcf.ExtLst, _dgbb)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065 \u0025\u0076", _cgcf.Name)
				if _efff := d.Skip(); _efff != nil {
					return _efff
				}
			}
		case _a.EndElement:
			break _dgab
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the StyleDefHdr and its children
func (_baef *StyleDefHdr) Validate() error {
	return _baef.ValidateWithPath("S\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072")
}

func (_cgebb *ColorsDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"
	return _cgebb.CT_ColorTransformHeader.MarshalXML(e, start)
}

func (_eggd *ST_RotationPath) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eggd = 0
	case "\u006e\u006f\u006e\u0065":
		*_eggd = 1
	case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
		*_eggd = 2
	}
	return nil
}

func (_agac *ST_LayoutShapeType) Validate() error { return _agac.ValidateWithPath("") }

func (_gce *CT_CTStyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gag := range start.Attr {
		if _gag.Name.Local == "\u006e\u0061\u006d\u0065" {
			_cfc, _gbd := _gag.Value, error(nil)
			if _gbd != nil {
				return _gbd
			}
			_gce.NameAttr = _cfc
			continue
		}
	}
_eca:
	for {
		_acfd, _fdef := d.Token()
		if _fdef != nil {
			return _fdef
		}
		switch _fec := _acfd.(type) {
		case _a.StartElement:
			switch _fec.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gce.FillClrLst = NewCT_Colors()
				if _cba := d.DecodeElement(_gce.FillClrLst, &_fec); _cba != nil {
					return _cba
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}:
				_gce.LinClrLst = NewCT_Colors()
				if _dcge := d.DecodeElement(_gce.LinClrLst, &_fec); _dcge != nil {
					return _dcge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gce.EffectClrLst = NewCT_Colors()
				if _eggb := d.DecodeElement(_gce.EffectClrLst, &_fec); _eggb != nil {
					return _eggb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gce.TxLinClrLst = NewCT_Colors()
				if _edgf := d.DecodeElement(_gce.TxLinClrLst, &_fec); _edgf != nil {
					return _edgf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gce.TxFillClrLst = NewCT_Colors()
				if _ggcb := d.DecodeElement(_gce.TxFillClrLst, &_fec); _ggcb != nil {
					return _ggcb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}:
				_gce.TxEffectClrLst = NewCT_Colors()
				if _cecg := d.DecodeElement(_gce.TxEffectClrLst, &_fec); _cecg != nil {
					return _cecg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gce.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _bdee := d.DecodeElement(_gce.ExtLst, &_fec); _bdee != nil {
					return _bdee
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c\u0020\u0025\u0076", _fec.Name)
				if _fcf := d.Skip(); _fcf != nil {
					return _fcf
				}
			}
		case _a.EndElement:
			break _eca
		case _a.CharData:
		}
	}
	return nil
}

func (_adcdc ST_ContinueDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fgdfd := _a.Attr{}
	_fgdfd.Name = name
	switch _adcdc {
	case ST_ContinueDirectionUnset:
		_fgdfd.Value = ""
	case ST_ContinueDirectionRevDir:
		_fgdfd.Value = "\u0072\u0065\u0076\u0044\u0069\u0072"
	case ST_ContinueDirectionSameDir:
		_fgdfd.Value = "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return _fgdfd, nil
}

// ValidateWithPath validates the CT_LayoutVariablePropertySet and its children, prefixing error messages with path
func (_accf *CT_LayoutVariablePropertySet) ValidateWithPath(path string) error {
	if _accf.OrgChart != nil {
		if _cadd := _accf.OrgChart.ValidateWithPath(path + "\u002fO\u0072\u0067\u0043\u0068\u0061\u0072t"); _cadd != nil {
			return _cadd
		}
	}
	if _accf.ChMax != nil {
		if _adae := _accf.ChMax.ValidateWithPath(path + "\u002f\u0043\u0068\u004d\u0061\u0078"); _adae != nil {
			return _adae
		}
	}
	if _accf.ChPref != nil {
		if _efgff := _accf.ChPref.ValidateWithPath(path + "\u002fC\u0068\u0050\u0072\u0065\u0066"); _efgff != nil {
			return _efgff
		}
	}
	if _accf.BulletEnabled != nil {
		if _fdcd := _accf.BulletEnabled.ValidateWithPath(path + "\u002f\u0042\u0075\u006c\u006c\u0065\u0074\u0045\u006ea\u0062\u006c\u0065\u0064"); _fdcd != nil {
			return _fdcd
		}
	}
	if _accf.Dir != nil {
		if _gcda := _accf.Dir.ValidateWithPath(path + "\u002f\u0044\u0069\u0072"); _gcda != nil {
			return _gcda
		}
	}
	if _accf.HierBranch != nil {
		if _becg := _accf.HierBranch.ValidateWithPath(path + "/\u0048\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"); _becg != nil {
			return _becg
		}
	}
	if _accf.AnimOne != nil {
		if _faea := _accf.AnimOne.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004f\u006e\u0065"); _faea != nil {
			return _faea
		}
	}
	if _accf.AnimLvl != nil {
		if _efgd := _accf.AnimLvl.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004c\u0076\u006c"); _efgd != nil {
			return _efgd
		}
	}
	if _accf.ResizeHandles != nil {
		if _cabgf := _accf.ResizeHandles.ValidateWithPath(path + "\u002f\u0052\u0065\u0073\u0069\u007a\u0065\u0048\u0061n\u0064\u006c\u0065\u0073"); _cabgf != nil {
			return _cabgf
		}
	}
	return nil
}

func (_fcgf ST_HueDir) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_daca := _a.Attr{}
	_daca.Name = name
	switch _fcgf {
	case ST_HueDirUnset:
		_daca.Value = ""
	case ST_HueDirCw:
		_daca.Value = "\u0063\u0077"
	case ST_HueDirCcw:
		_daca.Value = "\u0063\u0063\u0077"
	}
	return _daca, nil
}

const (
	ST_StartingElementUnset ST_StartingElement = 0
	ST_StartingElementNode  ST_StartingElement = 1
	ST_StartingElementTrans ST_StartingElement = 2
)

// ValidateWithPath validates the CT_ElemPropSet and its children, prefixing error messages with path
func (_agcb *CT_ElemPropSet) ValidateWithPath(path string) error {
	if _agcb.PresAssocIDAttr != nil {
		if _cbdf := _agcb.PresAssocIDAttr.ValidateWithPath(path + "\u002f\u0050r\u0065\u0073\u0041s\u0073\u006f\u0063\u0049\u0044\u0041\u0074\u0074\u0072"); _cbdf != nil {
			return _cbdf
		}
	}
	if _agcb.CustScaleXAttr != nil {
		if _fggc := _agcb.CustScaleXAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0058\u0041\u0074\u0074\u0072"); _fggc != nil {
			return _fggc
		}
	}
	if _agcb.CustScaleYAttr != nil {
		if _gga := _agcb.CustScaleYAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0059\u0041\u0074\u0074\u0072"); _gga != nil {
			return _gga
		}
	}
	if _agcb.CustLinFactXAttr != nil {
		if _gbedd := _agcb.CustLinFactXAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074X\u0041\u0074\u0074\u0072"); _gbedd != nil {
			return _gbedd
		}
	}
	if _agcb.CustLinFactYAttr != nil {
		if _fgae := _agcb.CustLinFactYAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074Y\u0041\u0074\u0074\u0072"); _fgae != nil {
			return _fgae
		}
	}
	if _agcb.CustLinFactNeighborXAttr != nil {
		if _defe := _agcb.CustLinFactNeighborXAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0058\u0041\u0074\u0074r"); _defe != nil {
			return _defe
		}
	}
	if _agcb.CustLinFactNeighborYAttr != nil {
		if _daea := _agcb.CustLinFactNeighborYAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0059\u0041\u0074\u0074r"); _daea != nil {
			return _daea
		}
	}
	if _agcb.CustRadScaleRadAttr != nil {
		if _fabe := _agcb.CustRadScaleRadAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0052\u0061\u0064At\u0074\u0072"); _fabe != nil {
			return _fabe
		}
	}
	if _agcb.CustRadScaleIncAttr != nil {
		if _dafg := _agcb.CustRadScaleIncAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0049\u006e\u0063At\u0074\u0072"); _dafg != nil {
			return _dafg
		}
	}
	if _agcb.PresLayoutVars != nil {
		if _dabab := _agcb.PresLayoutVars.ValidateWithPath(path + "\u002fP\u0072e\u0073\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0073"); _dabab != nil {
			return _dabab
		}
	}
	if _agcb.Style != nil {
		if _bbbf := _agcb.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _bbbf != nil {
			return _bbbf
		}
	}
	return nil
}

type ST_Offset byte

func (_ede *CT_AnimOne) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ede.ValAttr != ST_AnimOneStrUnset {
		_ddfa, _faa := _ede.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _faa != nil {
			return _faa
		}
		start.Attr = append(start.Attr, _ddfa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_ddgdg *LayoutDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _ddgdg.CT_DiagramDefinitionHeaderLst.MarshalXML(e, start)
}

func (_ebbc ST_FlowDirection) String() string {
	switch _ebbc {
	case 0:
		return ""
	case 1:
		return "\u0072\u006f\u0077"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}

func (_gefgg ST_StartingElement) String() string {
	switch _gefgg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0074\u0072\u0061n\u0073"
	}
	return ""
}

func (_aae *CT_AdjLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ce:
	for {
		_bce, _ecca := d.Token()
		if _ecca != nil {
			return _ecca
		}
		switch _ggc := _bce.(type) {
		case _a.StartElement:
			switch _ggc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a"}:
				_gda := NewCT_Adj()
				if _edcc := d.DecodeElement(_gda, &_ggc); _edcc != nil {
					return _edcc
				}
				_aae.Adj = append(_aae.Adj, _gda)
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0041\u0064\u006aL\u0073\u0074 \u0025\u0076", _ggc.Name)
				if _fgg := d.Skip(); _fgg != nil {
					return _fgg
				}
			}
		case _a.EndElement:
			break _ce
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the StyleDef and its children, prefixing error messages with path
func (_acba *StyleDef) ValidateWithPath(path string) error {
	if _gddbg := _acba.CT_StyleDefinition.ValidateWithPath(path); _gddbg != nil {
		return _gddbg
	}
	return nil
}

func (_baad ST_ClrAppMethod) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_baad.String(), start)
}

type ST_ParameterId byte

func (_dada ST_Offset) ValidateWithPath(path string) error {
	switch _dada {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dada))
	}
	return nil
}

func (_gfgec ST_FlowDirection) ValidateWithPath(path string) error {
	switch _gfgec {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfgec))
	}
	return nil
}

func (_debdg *LayoutDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_debdg.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
_eace:
	for {
		_bdebg, _fagd := d.Token()
		if _fagd != nil {
			return _fagd
		}
		switch _dafda := _bdebg.(type) {
		case _a.StartElement:
			switch _dafda.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_adbgd := NewCT_DiagramDefinitionHeader()
				if _cbfcb := d.DecodeElement(_adbgd, &_dafda); _cbfcb != nil {
					return _cbfcb
				}
				_debdg.LayoutDefHdr = append(_debdg.LayoutDefHdr, _adbgd)
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _dafda.Name)
				if _decd := d.Skip(); _decd != nil {
					return _decd
				}
			}
		case _a.EndElement:
			break _eace
		case _a.CharData:
		}
	}
	return nil
}

func (_feec *ST_ConnectorDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgff, _gfef := d.Token()
	if _gfef != nil {
		return _gfef
	}
	if _ccagb, _cabb := _fgff.(_a.EndElement); _cabb && _ccagb.Name == start.Name {
		*_feec = 1
		return nil
	}
	if _fgge, _acgdb := _fgff.(_a.CharData); !_acgdb {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgff)
	} else {
		switch string(_fgge) {
		case "":
			*_feec = 0
		case "\u0031\u0044":
			*_feec = 1
		case "\u0032\u0044":
			*_feec = 2
		case "\u0063\u0075\u0073\u0074":
			*_feec = 3
		}
	}
	_fgff, _gfef = d.Token()
	if _gfef != nil {
		return _gfef
	}
	if _cada, _aedg := _fgff.(_a.EndElement); _aedg && _cada.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgff)
}

func (_befg *CT_DiagramDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ggdf := range start.Attr {
		if _ggdf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fcabe, _gccd := _ggdf.Value, error(nil)
			if _gccd != nil {
				return _gccd
			}
			_befg.UniqueIdAttr = _fcabe
			continue
		}
		if _ggdf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cgbd, _bebd := _ggdf.Value, error(nil)
			if _bebd != nil {
				return _bebd
			}
			_befg.MinVerAttr = &_cgbd
			continue
		}
		if _ggdf.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_agbf, _fdeca := _ggdf.Value, error(nil)
			if _fdeca != nil {
				return _fdeca
			}
			_befg.DefStyleAttr = &_agbf
			continue
		}
		if _ggdf.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_dabb, _aec := _f.ParseInt(_ggdf.Value, 10, 32)
			if _aec != nil {
				return _aec
			}
			_ffgd := int32(_dabb)
			_befg.ResIdAttr = &_ffgd
			continue
		}
	}
_bceef:
	for {
		_bffb, _bedc := d.Token()
		if _bedc != nil {
			return _bedc
		}
		switch _cdff := _bffb.(type) {
		case _a.StartElement:
			switch _cdff.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_defd := NewCT_Name()
				if _bfdcd := d.DecodeElement(_defd, &_cdff); _bfdcd != nil {
					return _bfdcd
				}
				_befg.Title = append(_befg.Title, _defd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_aebb := NewCT_Description()
				if _bec := d.DecodeElement(_aebb, &_cdff); _bec != nil {
					return _bec
				}
				_befg.Desc = append(_befg.Desc, _aebb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_befg.CatLst = NewCT_Categories()
				if _cecd := d.DecodeElement(_befg.CatLst, &_cdff); _cecd != nil {
					return _cecd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_befg.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _ccfb := d.DecodeElement(_befg.ExtLst, &_cdff); _ccfb != nil {
					return _ccfb
				}
			default:
				_c.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0044\u0069a\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072\u0020\u0025\u0076", _cdff.Name)
				if _gcec := d.Skip(); _gcec != nil {
					return _gcec
				}
			}
		case _a.EndElement:
			break _bceef
		case _a.CharData:
		}
	}
	return nil
}

func (_cegg *ST_ClrAppMethod) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cegg = 0
	case "\u0073\u0070\u0061\u006e":
		*_cegg = 1
	case "\u0063\u0079\u0063l\u0065":
		*_cegg = 2
	case "\u0072\u0065\u0070\u0065\u0061\u0074":
		*_cegg = 3
	}
	return nil
}

func (_gcebc ST_FunctionArgument) String() string {
	if _gcebc.ST_VariableType != ST_VariableTypeUnset {
		return _gcebc.ST_VariableType.String()
	}
	return ""
}

func (_dggcc *LayoutDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dggcc.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	for _, _gecec := range start.Attr {
		if _gecec.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dcbcc, _cbce := _gecec.Value, error(nil)
			if _cbce != nil {
				return _cbce
			}
			_dggcc.UniqueIdAttr = &_dcbcc
			continue
		}
		if _gecec.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cdabb, _egcb := _gecec.Value, error(nil)
			if _egcb != nil {
				return _egcb
			}
			_dggcc.MinVerAttr = &_cdabb
			continue
		}
		if _gecec.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_bbgg, _cfabc := _gecec.Value, error(nil)
			if _cfabc != nil {
				return _cfabc
			}
			_dggcc.DefStyleAttr = &_bbgg
			continue
		}
	}
_cegc:
	for {
		_gggfe, _adba := d.Token()
		if _adba != nil {
			return _adba
		}
		switch _edde := _gggfe.(type) {
		case _a.StartElement:
			switch _edde.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_defc := NewCT_Name()
				if _bgfea := d.DecodeElement(_defc, &_edde); _bgfea != nil {
					return _bgfea
				}
				_dggcc.Title = append(_dggcc.Title, _defc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_cgcda := NewCT_Description()
				if _dabc := d.DecodeElement(_cgcda, &_edde); _dabc != nil {
					return _dabc
				}
				_dggcc.Desc = append(_dggcc.Desc, _cgcda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dggcc.CatLst = NewCT_Categories()
				if _addb := d.DecodeElement(_dggcc.CatLst, &_edde); _addb != nil {
					return _addb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_dggcc.SampData = NewCT_SampleData()
				if _dgee := d.DecodeElement(_dggcc.SampData, &_edde); _dgee != nil {
					return _dgee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_dggcc.StyleData = NewCT_SampleData()
				if _babe := d.DecodeElement(_dggcc.StyleData, &_edde); _babe != nil {
					return _babe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_dggcc.ClrData = NewCT_SampleData()
				if _dfga := d.DecodeElement(_dggcc.ClrData, &_edde); _dfga != nil {
					return _dfga
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _eceba := d.DecodeElement(_dggcc.LayoutNode, &_edde); _eceba != nil {
					return _eceba
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dggcc.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _gegf := d.DecodeElement(_dggcc.ExtLst, &_edde); _gegf != nil {
					return _gegf
				}
			default:
				_c.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066 \u0025\u0076", _edde.Name)
				if _aabaa := d.Skip(); _aabaa != nil {
					return _aabaa
				}
			}
		case _a.EndElement:
			break _cegc
		case _a.CharData:
		}
	}
	return nil
}

func (_aeffe *StyleDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aeffe.CT_StyleDefinition = *NewCT_StyleDefinition()
	for _, _agffa := range start.Attr {
		if _agffa.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cafe, _gcbe := _agffa.Value, error(nil)
			if _gcbe != nil {
				return _gcbe
			}
			_aeffe.UniqueIdAttr = &_cafe
			continue
		}
		if _agffa.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bgbac, _cdbg := _agffa.Value, error(nil)
			if _cdbg != nil {
				return _cdbg
			}
			_aeffe.MinVerAttr = &_bgbac
			continue
		}
	}
_abec:
	for {
		_cacg, _gafc := d.Token()
		if _gafc != nil {
			return _gafc
		}
		switch _aebg := _cacg.(type) {
		case _a.StartElement:
			switch _aebg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_ceda := NewCT_SDName()
				if _ecdb := d.DecodeElement(_ceda, &_aebg); _ecdb != nil {
					return _ecdb
				}
				_aeffe.Title = append(_aeffe.Title, _ceda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_acdac := NewCT_SDDescription()
				if _fbfe := d.DecodeElement(_acdac, &_aebg); _fbfe != nil {
					return _fbfe
				}
				_aeffe.Desc = append(_aeffe.Desc, _acdac)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_aeffe.CatLst = NewCT_SDCategories()
				if _bfdedg := d.DecodeElement(_aeffe.CatLst, &_aebg); _bfdedg != nil {
					return _bfdedg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_aeffe.Scene3d = _fd.NewCT_Scene3D()
				if _bbfb := d.DecodeElement(_aeffe.Scene3d, &_aebg); _bbfb != nil {
					return _bbfb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_bage := NewCT_StyleLabel()
				if _ddfcd := d.DecodeElement(_bage, &_aebg); _ddfcd != nil {
					return _ddfcd
				}
				_aeffe.StyleLbl = append(_aeffe.StyleLbl, _bage)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeffe.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _efed := d.DecodeElement(_aeffe.ExtLst, &_aebg); _efed != nil {
					return _efed
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0020\u0025\u0076", _aebg.Name)
				if _dbbag := d.Skip(); _dbbag != nil {
					return _dbbag
				}
			}
		case _a.EndElement:
			break _abec
		case _a.CharData:
		}
	}
	return nil
}

func (_cacdb ST_ChildOrderType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cacdb.String(), start)
}

// ValidateWithPath validates the CT_SampleData and its children, prefixing error messages with path
func (_gefcc *CT_SampleData) ValidateWithPath(path string) error {
	if _gefcc.DataModel != nil {
		if _ccdg := _gefcc.DataModel.ValidateWithPath(path + "\u002f\u0044\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c"); _ccdg != nil {
			return _ccdg
		}
	}
	return nil
}

func NewCT_Pt() *CT_Pt { _gafe := &CT_Pt{}; return _gafe }

type CT_SDDescription struct {
	LangAttr *string
	ValAttr  string
}

func (_dddb ST_ConstraintRelationship) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dddb.String(), start)
}

func (_ace *CT_ColorTransformHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dcdf := range start.Attr {
		if _dcdf.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cddb, _gbbg := _dcdf.Value, error(nil)
			if _gbbg != nil {
				return _gbbg
			}
			_ace.UniqueIdAttr = _cddb
			continue
		}
		if _dcdf.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_gddf, _ece := _dcdf.Value, error(nil)
			if _ece != nil {
				return _ece
			}
			_ace.MinVerAttr = &_gddf
			continue
		}
		if _dcdf.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_baf, _bfdc := _f.ParseInt(_dcdf.Value, 10, 32)
			if _bfdc != nil {
				return _bfdc
			}
			_cfae := int32(_baf)
			_ace.ResIdAttr = &_cfae
			continue
		}
	}
_gddff:
	for {
		_fcdg, _cafc := d.Token()
		if _cafc != nil {
			return _cafc
		}
		switch _dba := _fcdg.(type) {
		case _a.StartElement:
			switch _dba.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cfdb := NewCT_CTName()
				if _eaf := d.DecodeElement(_cfdb, &_dba); _eaf != nil {
					return _eaf
				}
				_ace.Title = append(_ace.Title, _cfdb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_cbge := NewCT_CTDescription()
				if _ecfe := d.DecodeElement(_cbge, &_dba); _ecfe != nil {
					return _ecfe
				}
				_ace.Desc = append(_ace.Desc, _cbge)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_ace.CatLst = NewCT_CTCategories()
				if _dedd := d.DecodeElement(_ace.CatLst, &_dba); _dedd != nil {
					return _dedd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ace.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _dcgb := d.DecodeElement(_ace.ExtLst, &_dba); _dcgb != nil {
					return _dcgb
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d\u0048\u0065a\u0064\u0065\u0072 \u0025\u0076", _dba.Name)
				if _eaa := d.Skip(); _eaa != nil {
					return _eaa
				}
			}
		case _a.EndElement:
			break _gddff
		case _a.CharData:
		}
	}
	return nil
}

func (_egcd *CT_NumericRule) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cce := range start.Attr {
		if _cce.Name.Local == "\u0076\u0061\u006c" {
			_cdde, _dedf := _f.ParseFloat(_cce.Value, 64)
			if _dedf != nil {
				return _dedf
			}
			_egcd.ValAttr = &_cdde
			continue
		}
		if _cce.Name.Local == "\u0066\u0061\u0063\u0074" {
			_cfgd, _gbgf := _f.ParseFloat(_cce.Value, 64)
			if _gbgf != nil {
				return _gbgf
			}
			_egcd.FactAttr = &_cfgd
			continue
		}
		if _cce.Name.Local == "\u006d\u0061\u0078" {
			_afcf, _gcab := _f.ParseFloat(_cce.Value, 64)
			if _gcab != nil {
				return _gcab
			}
			_egcd.MaxAttr = &_afcf
			continue
		}
		if _cce.Name.Local == "\u0074\u0079\u0070\u0065" {
			_egcd.TypeAttr.UnmarshalXMLAttr(_cce)
			continue
		}
		if _cce.Name.Local == "\u0066\u006f\u0072" {
			_egcd.ForAttr.UnmarshalXMLAttr(_cce)
			continue
		}
		if _cce.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_cdaf, _ggbe := _cce.Value, error(nil)
			if _ggbe != nil {
				return _ggbe
			}
			_egcd.ForNameAttr = &_cdaf
			continue
		}
		if _cce.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_egcd.PtTypeAttr.UnmarshalXMLAttr(_cce)
			continue
		}
	}
_gbdg:
	for {
		_bece, _deec := d.Token()
		if _deec != nil {
			return _deec
		}
		switch _dcgea := _bece.(type) {
		case _a.StartElement:
			switch _dcgea.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egcd.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _bbebc := d.DecodeElement(_egcd.ExtLst, &_dcgea); _bbebc != nil {
					return _bbebc
				}
			default:
				_c.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069\u0063R\u0075l\u0065\u0020\u0025\u0076", _dcgea.Name)
				if _aeed := d.Skip(); _aeed != nil {
					return _aeed
				}
			}
		case _a.EndElement:
			break _gbdg
		case _a.CharData:
		}
	}
	return nil
}

type CT_ColorTransformHeader struct {
	UniqueIdAttr string
	MinVerAttr   *string
	ResIdAttr    *int32
	Title        []*CT_CTName
	Desc         []*CT_CTDescription
	CatLst       *CT_CTCategories
	ExtLst       *_fd.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_Name and its children, prefixing error messages with path
func (_gcdb *CT_Name) ValidateWithPath(path string) error { return nil }

func (_bedcc *CT_ResizeHandles) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ecea := range start.Attr {
		if _ecea.Name.Local == "\u0076\u0061\u006c" {
			_bedcc.ValAttr.UnmarshalXMLAttr(_ecea)
			continue
		}
	}
	for {
		_egeb, _fbaeg := d.Token()
		if _fbaeg != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0052\u0065\u0073\u0069z\u0065H\u0061\u006e\u0064\u006c\u0065\u0073\u003a \u0025\u0073", _fbaeg)
		}
		if _dfg, _cgde := _egeb.(_a.EndElement); _cgde && _dfg.Name == start.Name {
			break
		}
	}
	return nil
}

func _gdfe(_baefa bool) uint8 {
	if _baefa {
		return 1
	}
	return 0
}

// Validate validates the AG_ConstraintAttributes and its children
func (_bdg *AG_ConstraintAttributes) Validate() error {
	return _bdg.ValidateWithPath("\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073")
}

const (
	ST_DiagramTextAlignmentUnset ST_DiagramTextAlignment = 0
	ST_DiagramTextAlignmentL     ST_DiagramTextAlignment = 1
	ST_DiagramTextAlignmentCtr   ST_DiagramTextAlignment = 2
	ST_DiagramTextAlignmentR     ST_DiagramTextAlignment = 3
)

func (_cgbc ST_RotationPath) String() string {
	switch _cgbc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return ""
}

func (_beafe ST_ArrowheadStyle) ValidateWithPath(path string) error {
	switch _beafe {
	case 0, 1, 2, 3:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_beafe))
	}
	return nil
}

func (_acafd ST_ConstraintType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_acafd.String(), start)
}

func (_egbab ST_ContinueDirection) Validate() error { return _egbab.ValidateWithPath("") }

func (_cffce ST_Breakpoint) Validate() error { return _cffce.ValidateWithPath("") }

func (_bfbe ST_Direction) ValidateWithPath(path string) error {
	switch _bfbe {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfbe))
	}
	return nil
}

func (_facfb *DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"
	return _facfb.CT_DataModel.MarshalXML(e, start)
}

func (_cdfc *ST_HierarchyAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aaeg, _faegf := d.Token()
	if _faegf != nil {
		return _faegf
	}
	if _abgbg, _bdgbd := _aaeg.(_a.EndElement); _bdgbd && _abgbg.Name == start.Name {
		*_cdfc = 1
		return nil
	}
	if _dfbb, _caag := _aaeg.(_a.CharData); !_caag {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aaeg)
	} else {
		switch string(_dfbb) {
		case "":
			*_cdfc = 0
		case "\u0074\u004c":
			*_cdfc = 1
		case "\u0074\u0052":
			*_cdfc = 2
		case "\u0074\u0043\u0074\u0072\u0043\u0068":
			*_cdfc = 3
		case "\u0074C\u0074\u0072\u0044\u0065\u0073":
			*_cdfc = 4
		case "\u0062\u004c":
			*_cdfc = 5
		case "\u0062\u0052":
			*_cdfc = 6
		case "\u0062\u0043\u0074\u0072\u0043\u0068":
			*_cdfc = 7
		case "\u0062C\u0074\u0072\u0044\u0065\u0073":
			*_cdfc = 8
		case "\u006c\u0054":
			*_cdfc = 9
		case "\u006c\u0042":
			*_cdfc = 10
		case "\u006c\u0043\u0074\u0072\u0043\u0068":
			*_cdfc = 11
		case "\u006cC\u0074\u0072\u0044\u0065\u0073":
			*_cdfc = 12
		case "\u0072\u0054":
			*_cdfc = 13
		case "\u0072\u0042":
			*_cdfc = 14
		case "\u0072\u0043\u0074\u0072\u0043\u0068":
			*_cdfc = 15
		case "\u0072C\u0074\u0072\u0044\u0065\u0073":
			*_cdfc = 16
		}
	}
	_aaeg, _faegf = d.Token()
	if _faegf != nil {
		return _faegf
	}
	if _dbcgb, _fada := _aaeg.(_a.EndElement); _fada && _dbcgb.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aaeg)
}

func (_ababf ST_Offset) Validate() error { return _ababf.ValidateWithPath("") }

func (_dacd *RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0072\u0065\u006c\u0049\u0064\u0073"
	return _dacd.CT_RelIds.MarshalXML(e, start)
}

func (_adfc ST_CxnType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_adfc.String(), start)
}

func (_aaecc ST_DiagramTextAlignment) Validate() error { return _aaecc.ValidateWithPath("") }

func (_bgbae *ST_CenterShapeMapping) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ceaded, _cdbgc := d.Token()
	if _cdbgc != nil {
		return _cdbgc
	}
	if _fgccd, _geeggg := _ceaded.(_a.EndElement); _geeggg && _fgccd.Name == start.Name {
		*_bgbae = 1
		return nil
	}
	if _adbbe, _fffggd := _ceaded.(_a.CharData); !_fffggd {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ceaded)
	} else {
		switch string(_adbbe) {
		case "":
			*_bgbae = 0
		case "\u006e\u006f\u006e\u0065":
			*_bgbae = 1
		case "\u0066\u004e\u006fd\u0065":
			*_bgbae = 2
		}
	}
	_ceaded, _cdbgc = d.Token()
	if _cdbgc != nil {
		return _cdbgc
	}
	if _daga, _ddgaa := _ceaded.(_a.EndElement); _ddgaa && _daga.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ceaded)
}

func (_bfec *CT_AnimOne) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _eec := range start.Attr {
		if _eec.Name.Local == "\u0076\u0061\u006c" {
			_bfec.ValAttr.UnmarshalXMLAttr(_eec)
			continue
		}
	}
	for {
		_fdf, _ff := d.Token()
		if _ff != nil {
			return _ef.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u003a\u0020%\u0073", _ff)
		}
		if _gcb, _eeb := _fdf.(_a.EndElement); _eeb && _gcb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gfaeb *ST_AxisType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gfaeb = 0
	case "\u0073\u0065\u006c\u0066":
		*_gfaeb = 1
	case "\u0063\u0068":
		*_gfaeb = 2
	case "\u0064\u0065\u0073":
		*_gfaeb = 3
	case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
		*_gfaeb = 4
	case "\u0070\u0061\u0072":
		*_gfaeb = 5
	case "\u0061\u006e\u0063s\u0074":
		*_gfaeb = 6
	case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
		*_gfaeb = 7
	case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
		*_gfaeb = 8
	case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
		*_gfaeb = 9
	case "\u0066\u006f\u006c\u006c\u006f\u0077":
		*_gfaeb = 10
	case "\u0070\u0072\u0065\u0063\u0065\u0064":
		*_gfaeb = 11
	case "\u0072\u006f\u006f\u0074":
		*_gfaeb = 12
	case "\u006e\u006f\u006e\u0065":
		*_gfaeb = 13
	}
	return nil
}

type ST_OutputShapeType byte

type ST_DiagramTextAlignment byte

// Validate validates the DataModel and its children
func (_afdfd *DataModel) Validate() error {
	return _afdfd.ValidateWithPath("\u0044a\u0074\u0061\u004d\u006f\u0064\u0065l")
}

func (_abfcg *CT_SampleData) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _abfcg.UseDefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u0073\u0065\u0044\u0065\u0066"}, Value: _ef.Sprintf("\u0025\u0064", _gdfe(*_abfcg.UseDefAttr))})
	}
	e.EncodeToken(start)
	if _abfcg.DataModel != nil {
		_eccdd := _a.StartElement{Name: _a.Name{Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}}
		e.EncodeElement(_abfcg.DataModel, _eccdd)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_ddbb ST_ParameterVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ddbb.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_DiagramHorizontalAlignment.String()))
	}
	if _ddbb.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_VerticalAlignment.String()))
	}
	if _ddbb.ST_ChildDirection != ST_ChildDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ChildDirection.String()))
	}
	if _ddbb.ST_ChildAlignment != ST_ChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ChildAlignment.String()))
	}
	if _ddbb.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_SecondaryChildAlignment.String()))
	}
	if _ddbb.ST_LinearDirection != ST_LinearDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_LinearDirection.String()))
	}
	if _ddbb.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_SecondaryLinearDirection.String()))
	}
	if _ddbb.ST_StartingElement != ST_StartingElementUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_StartingElement.String()))
	}
	if _ddbb.ST_BendPoint != ST_BendPointUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_BendPoint.String()))
	}
	if _ddbb.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ConnectorRouting.String()))
	}
	if _ddbb.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ArrowheadStyle.String()))
	}
	if _ddbb.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ConnectorDimension.String()))
	}
	if _ddbb.ST_RotationPath != ST_RotationPathUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_RotationPath.String()))
	}
	if _ddbb.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_CenterShapeMapping.String()))
	}
	if _ddbb.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_NodeHorizontalAlignment.String()))
	}
	if _ddbb.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_NodeVerticalAlignment.String()))
	}
	if _ddbb.ST_FallbackDimension != ST_FallbackDimensionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_FallbackDimension.String()))
	}
	if _ddbb.ST_TextDirection != ST_TextDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_TextDirection.String()))
	}
	if _ddbb.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_PyramidAccentPosition.String()))
	}
	if _ddbb.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_PyramidAccentTextMargin.String()))
	}
	if _ddbb.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_TextBlockDirection.String()))
	}
	if _ddbb.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_TextAnchorHorizontal.String()))
	}
	if _ddbb.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_TextAnchorVertical.String()))
	}
	if _ddbb.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_DiagramTextAlignment.String()))
	}
	if _ddbb.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_AutoTextRotation.String()))
	}
	if _ddbb.ST_GrowDirection != ST_GrowDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_GrowDirection.String()))
	}
	if _ddbb.ST_FlowDirection != ST_FlowDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_FlowDirection.String()))
	}
	if _ddbb.ST_ContinueDirection != ST_ContinueDirectionUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ContinueDirection.String()))
	}
	if _ddbb.ST_Breakpoint != ST_BreakpointUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_Breakpoint.String()))
	}
	if _ddbb.ST_Offset != ST_OffsetUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_Offset.String()))
	}
	if _ddbb.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_HierarchyAlignment.String()))
	}
	if _ddbb.Int32 != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", *_ddbb.Int32)))
	}
	if _ddbb.Float64 != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0066", *_ddbb.Float64)))
	}
	if _ddbb.Bool != nil {
		e.EncodeToken(_a.CharData(_ef.Sprintf("\u0025\u0064", _gdfe(*_ddbb.Bool))))
	}
	if _ddbb.StringVal != nil {
		e.EncodeToken(_a.CharData(*_ddbb.StringVal))
	}
	if _ddbb.ST_ConnectorPoint != ST_ConnectorPointUnset {
		e.EncodeToken(_a.CharData(_ddbb.ST_ConnectorPoint.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

const (
	ST_ConstraintTypeUnset         ST_ConstraintType = 0
	ST_ConstraintTypeNone          ST_ConstraintType = 1
	ST_ConstraintTypeAlignOff      ST_ConstraintType = 2
	ST_ConstraintTypeBegMarg       ST_ConstraintType = 3
	ST_ConstraintTypeBendDist      ST_ConstraintType = 4
	ST_ConstraintTypeBegPad        ST_ConstraintType = 5
	ST_ConstraintTypeB             ST_ConstraintType = 6
	ST_ConstraintTypeBMarg         ST_ConstraintType = 7
	ST_ConstraintTypeBOff          ST_ConstraintType = 8
	ST_ConstraintTypeCtrX          ST_ConstraintType = 9
	ST_ConstraintTypeCtrXOff       ST_ConstraintType = 10
	ST_ConstraintTypeCtrY          ST_ConstraintType = 11
	ST_ConstraintTypeCtrYOff       ST_ConstraintType = 12
	ST_ConstraintTypeConnDist      ST_ConstraintType = 13
	ST_ConstraintTypeDiam          ST_ConstraintType = 14
	ST_ConstraintTypeEndMarg       ST_ConstraintType = 15
	ST_ConstraintTypeEndPad        ST_ConstraintType = 16
	ST_ConstraintTypeH             ST_ConstraintType = 17
	ST_ConstraintTypeHArH          ST_ConstraintType = 18
	ST_ConstraintTypeHOff          ST_ConstraintType = 19
	ST_ConstraintTypeL             ST_ConstraintType = 20
	ST_ConstraintTypeLMarg         ST_ConstraintType = 21
	ST_ConstraintTypeLOff          ST_ConstraintType = 22
	ST_ConstraintTypeR             ST_ConstraintType = 23
	ST_ConstraintTypeRMarg         ST_ConstraintType = 24
	ST_ConstraintTypeROff          ST_ConstraintType = 25
	ST_ConstraintTypePrimFontSz    ST_ConstraintType = 26
	ST_ConstraintTypePyraAcctRatio ST_ConstraintType = 27
	ST_ConstraintTypeSecFontSz     ST_ConstraintType = 28
	ST_ConstraintTypeSibSp         ST_ConstraintType = 29
	ST_ConstraintTypeSecSibSp      ST_ConstraintType = 30
	ST_ConstraintTypeSp            ST_ConstraintType = 31
	ST_ConstraintTypeStemThick     ST_ConstraintType = 32
	ST_ConstraintTypeT             ST_ConstraintType = 33
	ST_ConstraintTypeTMarg         ST_ConstraintType = 34
	ST_ConstraintTypeTOff          ST_ConstraintType = 35
	ST_ConstraintTypeUserA         ST_ConstraintType = 36
	ST_ConstraintTypeUserB         ST_ConstraintType = 37
	ST_ConstraintTypeUserC         ST_ConstraintType = 38
	ST_ConstraintTypeUserD         ST_ConstraintType = 39
	ST_ConstraintTypeUserE         ST_ConstraintType = 40
	ST_ConstraintTypeUserF         ST_ConstraintType = 41
	ST_ConstraintTypeUserG         ST_ConstraintType = 42
	ST_ConstraintTypeUserH         ST_ConstraintType = 43
	ST_ConstraintTypeUserI         ST_ConstraintType = 44
	ST_ConstraintTypeUserJ         ST_ConstraintType = 45
	ST_ConstraintTypeUserK         ST_ConstraintType = 46
	ST_ConstraintTypeUserL         ST_ConstraintType = 47
	ST_ConstraintTypeUserM         ST_ConstraintType = 48
	ST_ConstraintTypeUserN         ST_ConstraintType = 49
	ST_ConstraintTypeUserO         ST_ConstraintType = 50
	ST_ConstraintTypeUserP         ST_ConstraintType = 51
	ST_ConstraintTypeUserQ         ST_ConstraintType = 52
	ST_ConstraintTypeUserR         ST_ConstraintType = 53
	ST_ConstraintTypeUserS         ST_ConstraintType = 54
	ST_ConstraintTypeUserT         ST_ConstraintType = 55
	ST_ConstraintTypeUserU         ST_ConstraintType = 56
	ST_ConstraintTypeUserV         ST_ConstraintType = 57
	ST_ConstraintTypeUserW         ST_ConstraintType = 58
	ST_ConstraintTypeUserX         ST_ConstraintType = 59
	ST_ConstraintTypeUserY         ST_ConstraintType = 60
	ST_ConstraintTypeUserZ         ST_ConstraintType = 61
	ST_ConstraintTypeW             ST_ConstraintType = 62
	ST_ConstraintTypeWArH          ST_ConstraintType = 63
	ST_ConstraintTypeWOff          ST_ConstraintType = 64
)

func (_cccaa *ST_Offset) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cccaa = 0
	case "\u0063\u0074\u0072":
		*_cccaa = 1
	case "\u006f\u0066\u0066":
		*_cccaa = 2
	}
	return nil
}

func (_dccdb ST_AnimOneStr) Validate() error { return _dccdb.ValidateWithPath("") }

func NewCT_StyleDefinitionHeader() *CT_StyleDefinitionHeader {
	_gfcf := &CT_StyleDefinitionHeader{}
	return _gfcf
}

func (_dccaf ST_ChildAlignment) Validate() error { return _dccaf.ValidateWithPath("") }

// ValidateWithPath validates the CT_CTName and its children, prefixing error messages with path
func (_gedd *CT_CTName) ValidateWithPath(path string) error { return nil }

type ST_AxisType byte

type StyleDefHdr struct{ CT_StyleDefinitionHeader }

func (_dbfd *StyleDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbfd.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	for _, _egdcae := range start.Attr {
		if _egdcae.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cgce, _fgce := _egdcae.Value, error(nil)
			if _fgce != nil {
				return _fgce
			}
			_dbfd.UniqueIdAttr = _cgce
			continue
		}
		if _egdcae.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bcace, _feca := _egdcae.Value, error(nil)
			if _feca != nil {
				return _feca
			}
			_dbfd.MinVerAttr = &_bcace
			continue
		}
		if _egdcae.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_geabe, _abgeg := _f.ParseInt(_egdcae.Value, 10, 32)
			if _abgeg != nil {
				return _abgeg
			}
			_adfbb := int32(_geabe)
			_dbfd.ResIdAttr = &_adfbb
			continue
		}
	}
_agbcbf:
	for {
		_egfdb, _fgcd := d.Token()
		if _fgcd != nil {
			return _fgcd
		}
		switch _dgdc := _egfdb.(type) {
		case _a.StartElement:
			switch _dgdc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cdaea := NewCT_SDName()
				if _fagca := d.DecodeElement(_cdaea, &_dgdc); _fagca != nil {
					return _fagca
				}
				_dbfd.Title = append(_dbfd.Title, _cdaea)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ecgcg := NewCT_SDDescription()
				if _dadg := d.DecodeElement(_ecgcg, &_dgdc); _dadg != nil {
					return _dadg
				}
				_dbfd.Desc = append(_dbfd.Desc, _ecgcg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dbfd.CatLst = NewCT_SDCategories()
				if _aaef := d.DecodeElement(_dbfd.CatLst, &_dgdc); _aaef != nil {
					return _aaef
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbfd.ExtLst = _fd.NewCT_OfficeArtExtensionList()
				if _cefdb := d.DecodeElement(_dbfd.ExtLst, &_dgdc); _cefdb != nil {
					return _cefdb
				}
			default:
				_c.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _dgdc.Name)
				if _cfffd := d.Skip(); _cfffd != nil {
					return _cfffd
				}
			}
		case _a.EndElement:
			break _agbcbf
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_BoolOperatorUnset ST_BoolOperator = 0
	ST_BoolOperatorNone  ST_BoolOperator = 1
	ST_BoolOperatorEqu   ST_BoolOperator = 2
	ST_BoolOperatorGte   ST_BoolOperator = 3
	ST_BoolOperatorLte   ST_BoolOperator = 4
)

func (_afff ST_AnimOneStr) String() string {
	switch _afff {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u006e\u0065"
	case 3:
		return "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return ""
}

func (_bgbag *ST_DiagramHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bgbag = 0
	case "\u006c":
		*_bgbag = 1
	case "\u0063\u0074\u0072":
		*_bgbag = 2
	case "\u0072":
		*_bgbag = 3
	case "\u006e\u006f\u006e\u0065":
		*_bgbag = 4
	}
	return nil
}

func NewCT_ChildPref() *CT_ChildPref { _dgb := &CT_ChildPref{}; return _dgb }

type CT_ResizeHandles struct{ ValAttr ST_ResizeHandlesStr }

type ST_LinearDirection byte

// Validate validates the CT_ColorTransform and its children
func (_dad *CT_ColorTransform) Validate() error {
	return _dad.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d")
}

func (_dced ST_SecondaryChildAlignment) ValidateWithPath(path string) error {
	switch _dced {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dced))
	}
	return nil
}

func (_fdea ST_FunctionOperator) ValidateWithPath(path string) error {
	switch _fdea {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fdea))
	}
	return nil
}

// ValidateWithPath validates the CT_AdjLst and its children, prefixing error messages with path
func (_bg *CT_AdjLst) ValidateWithPath(path string) error {
	for _ddf, _efd := range _bg.Adj {
		if _gaf := _efd.ValidateWithPath(_ef.Sprintf("\u0025\u0073\u002f\u0041\u0064\u006a\u005b\u0025\u0064\u005d", path, _ddf)); _gaf != nil {
			return _gaf
		}
	}
	return nil
}

func (_add *CT_CTCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _ef.Sprintf("\u0025\u0076", _add.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _ef.Sprintf("\u0025\u0076", _add.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LayoutVariablePropertySet and its children
func (_bbcf *CT_LayoutVariablePropertySet) Validate() error {
	return _bbcf.ValidateWithPath("\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074")
}

func (_afaaa ST_ChildDirection) ValidateWithPath(path string) error {
	switch _afaaa {
	case 0, 1, 2:
	default:
		return _ef.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afaaa))
	}
	return nil
}

const (
	ST_RotationPathUnset     ST_RotationPath = 0
	ST_RotationPathNone      ST_RotationPath = 1
	ST_RotationPathAlongPath ST_RotationPath = 2
)

func init() {
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0054\u004e\u0061\u006de", NewCT_CTName)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_CTDescription)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_CTCategory)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_CTCategories)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s", NewCT_Colors)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_CTStyleLabel)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d", NewCT_ColorTransform)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_ColorTransformHeader)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074", NewCT_ColorTransformHeaderLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0074", NewCT_Pt)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t", NewCT_PtList)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e", NewCT_Cxn)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074", NewCT_CxnList)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c", NewCT_DataModel)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074", NewCT_Constraint)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073", NewCT_Constraints)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065", NewCT_NumericRule)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073", NewCT_Rules)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066", NewCT_PresentationOf)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u0064\u006a", NewCT_Adj)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t", NewCT_AdjLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072", NewCT_Parameter)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d", NewCT_Algorithm)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065", NewCT_LayoutNode)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068", NewCT_ForEach)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0057\u0068\u0065\u006e", NewCT_When)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065", NewCT_Otherwise)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e", NewCT_Choose)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061", NewCT_SampleData)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_Category)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_Categories)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u004e\u0061\u006d\u0065", NewCT_Name)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e", NewCT_Description)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e", NewCT_DiagramDefinition)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072", NewCT_DiagramDefinitionHeader)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074", NewCT_DiagramDefinitionHeaderLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s", NewCT_RelIds)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074", NewCT_ElemPropSet)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074", NewCT_OrgChart)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078", NewCT_ChildMax)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066", NewCT_ChildPref)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064", NewCT_BulletEnabled)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Direction)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065", NewCT_HierBranchStyle)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065", NewCT_AnimOne)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c", NewCT_AnimLvl)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073", NewCT_ResizeHandles)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074", NewCT_LayoutVariablePropertySet)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0044\u004e\u0061\u006de", NewCT_SDName)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_SDDescription)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_SDCategory)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_SDCategories)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073", NewCT_TextProps)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_StyleLabel)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e", NewCT_StyleDefinition)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_StyleDefinitionHeader)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074", NewCT_StyleDefinitionHeaderLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f", NewColorsDef)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072", NewColorsDefHdr)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewColorsDefHdrLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l", NewDataModel)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f", NewLayoutDef)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072", NewLayoutDefHdr)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewLayoutDefHdrLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0072\u0065\u006c\u0049\u0064\u0073", NewRelIds)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066", NewStyleDef)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072", NewStyleDefHdr)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074", NewStyleDefHdrLst)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_IteratorAttributes)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_ConstraintAttributes)
	_c.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073", NewAG_ConstraintRefAttributes)
}

func (_fbfbd *CT_LayoutVariablePropertySet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _fbfbd.OrgChart != nil {
		_dgcc := _a.StartElement{Name: _a.Name{Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbfbd.OrgChart, _dgcc)
	}
	if _fbfbd.ChMax != nil {
		_gcfd := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u004da\u0078"}}
		e.EncodeElement(_fbfbd.ChMax, _gcfd)
	}
	if _fbfbd.ChPref != nil {
		_fgdfa := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}}
		e.EncodeElement(_fbfbd.ChPref, _fgdfa)
	}
	if _fbfbd.BulletEnabled != nil {
		_agfa := _a.StartElement{Name: _a.Name{Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}}
		e.EncodeElement(_fbfbd.BulletEnabled, _agfa)
	}
	if _fbfbd.Dir != nil {
		_adef := _a.StartElement{Name: _a.Name{Local: "\u0064\u0069\u0072"}}
		e.EncodeElement(_fbfbd.Dir, _adef)
	}
	if _fbfbd.HierBranch != nil {
		_aabfb := _a.StartElement{Name: _a.Name{Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}}
		e.EncodeElement(_fbfbd.HierBranch, _aabfb)
	}
	if _fbfbd.AnimOne != nil {
		_fecdc := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}}
		e.EncodeElement(_fbfbd.AnimOne, _fecdc)
	}
	if _fbfbd.AnimLvl != nil {
		_edccb := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}}
		e.EncodeElement(_fbfbd.AnimLvl, _edccb)
	}
	if _fbfbd.ResizeHandles != nil {
		_efgf := _a.StartElement{Name: _a.Name{Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}}
		e.EncodeElement(_fbfbd.ResizeHandles, _efgf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

func (_ddggg ST_FlowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fedf := _a.Attr{}
	_fedf.Name = name
	switch _ddggg {
	case ST_FlowDirectionUnset:
		_fedf.Value = ""
	case ST_FlowDirectionRow:
		_fedf.Value = "\u0072\u006f\u0077"
	case ST_FlowDirectionCol:
		_fedf.Value = "\u0063\u006f\u006c"
	}
	return _fedf, nil
}

func (_gagef *ST_AnimLvlStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aeee, _agaa := d.Token()
	if _agaa != nil {
		return _agaa
	}
	if _fbbgc, _edag := _aeee.(_a.EndElement); _edag && _fbbgc.Name == start.Name {
		*_gagef = 1
		return nil
	}
	if _faec, _faba := _aeee.(_a.CharData); !_faba {
		return _ef.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aeee)
	} else {
		switch string(_faec) {
		case "":
			*_gagef = 0
		case "\u006e\u006f\u006e\u0065":
			*_gagef = 1
		case "\u006c\u0076\u006c":
			*_gagef = 2
		case "\u0063\u0074\u0072":
			*_gagef = 3
		}
	}
	_aeee, _agaa = d.Token()
	if _agaa != nil {
		return _agaa
	}
	if _gegfe, _fdffb := _aeee.(_a.EndElement); _fdffb && _gegfe.Name == start.Name {
		return nil
	}
	return _ef.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aeee)
}

func (_bebfg ST_CenterShapeMapping) Validate() error { return _bebfg.ValidateWithPath("") }

func (_ecff ST_FunctionType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_begcc := _a.Attr{}
	_begcc.Name = name
	switch _ecff {
	case ST_FunctionTypeUnset:
		_begcc.Value = ""
	case ST_FunctionTypeCnt:
		_begcc.Value = "\u0063\u006e\u0074"
	case ST_FunctionTypePos:
		_begcc.Value = "\u0070\u006f\u0073"
	case ST_FunctionTypeRevPos:
		_begcc.Value = "\u0072\u0065\u0076\u0050\u006f\u0073"
	case ST_FunctionTypePosEven:
		_begcc.Value = "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case ST_FunctionTypePosOdd:
		_begcc.Value = "\u0070\u006f\u0073\u004f\u0064\u0064"
	case ST_FunctionTypeVar:
		_begcc.Value = "\u0076\u0061\u0072"
	case ST_FunctionTypeDepth:
		_begcc.Value = "\u0064\u0065\u0070t\u0068"
	case ST_FunctionTypeMaxDepth:
		_begcc.Value = "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return _begcc, nil
}
