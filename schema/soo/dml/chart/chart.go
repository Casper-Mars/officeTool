//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart

import (
	_e "encoding/xml"
	_bf "fmt"
	_ba "github.com/Casper-Mars/officeTool"
	_cb "github.com/Casper-Mars/officeTool/schema/soo/dml"
	_d "github.com/Casper-Mars/officeTool/schema/soo/dml/chartDrawing"
	_bd "github.com/Casper-Mars/officeTool/schema/soo/ofc/sharedTypes"
	_ef "regexp"
	_b "strconv"
)

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_egc *CT_BarSer) ValidateWithPath(path string) error {
	if _deac := _egc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _deac != nil {
		return _deac
	}
	if _gfbbd := _egc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gfbbd != nil {
		return _gfbbd
	}
	if _egc.Tx != nil {
		if _cada := _egc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cada != nil {
			return _cada
		}
	}
	if _egc.SpPr != nil {
		if _cgab := _egc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cgab != nil {
			return _cgab
		}
	}
	if _egc.InvertIfNegative != nil {
		if _dcd := _egc.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _dcd != nil {
			return _dcd
		}
	}
	if _egc.PictureOptions != nil {
		if _dbff := _egc.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _dbff != nil {
			return _dbff
		}
	}
	for _decg, _beg := range _egc.DPt {
		if _edbd := _beg.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _decg)); _edbd != nil {
			return _edbd
		}
	}
	if _egc.DLbls != nil {
		if _ebd := _egc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebd != nil {
			return _ebd
		}
	}
	for _aeab, _bbeb := range _egc.Trendline {
		if _dbc := _bbeb.ValidateWithPath(_bf.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _aeab)); _dbc != nil {
			return _dbc
		}
	}
	if _egc.ErrBars != nil {
		if _ccbc := _egc.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _ccbc != nil {
			return _ccbc
		}
	}
	if _egc.Cat != nil {
		if _addd := _egc.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _addd != nil {
			return _addd
		}
	}
	if _egc.Val != nil {
		if _fbcc := _egc.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fbcc != nil {
			return _fbcc
		}
	}
	if _egc.Shape != nil {
		if _cec := _egc.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _cec != nil {
			return _cec
		}
	}
	if _egc.ExtLst != nil {
		if _gaba := _egc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaba != nil {
			return _gaba
		}
	}
	return nil
}

// Validate validates the CT_NumData and its children
func (_eedd *CT_NumData) Validate() error {
	return _eedd.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}

func (_cfffc *CT_MultiLvlStrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ggfb:
	for {
		_cedf, _gbaa := d.Token()
		if _gbaa != nil {
			return _gbaa
		}
		switch _gadfd := _cedf.(type) {
		case _e.StartElement:
			switch _gadfd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _deee := d.DecodeElement(&_cfffc.F, &_gadfd); _deee != nil {
					return _deee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_cfffc.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _dbggg := d.DecodeElement(_cfffc.MultiLvlStrCache, &_gadfd); _dbggg != nil {
					return _dbggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfffc.ExtLst = NewCT_ExtensionList()
				if _ddbb := d.DecodeElement(_cfffc.ExtLst, &_gadfd); _ddbb != nil {
					return _ddbb
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _gadfd.Name)
				if _efggd := d.Skip(); _efggd != nil {
					return _efggd
				}
			}
		case _e.EndElement:
			break _ggfb
		case _e.CharData:
		}
	}
	return nil
}

func (_eaeb *EG_LegendEntryData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eaeb.TxPr != nil {
		_gdcgbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eaeb.TxPr, _gdcgbc)
	}
	return nil
}

type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

type CT_UpDownBar struct{ SpPr *_cb.CT_ShapeProperties }

func NewCT_Double() *CT_Double { _gcdef := &CT_Double{}; return _gcdef }

func (_ecebe *CT_PlotArea) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bcac:
	for {
		_fggc, _gdgc := d.Token()
		if _gdgc != nil {
			return _gdgc
		}
		switch _gage := _fggc.(type) {
		case _e.StartElement:
			switch _gage.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_ecebe.Layout = NewCT_Layout()
				if _ccfgf := d.DecodeElement(_ecebe.Layout, &_gage); _ccfgf != nil {
					return _ccfgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_afdbg := NewCT_PlotAreaChoice()
				if _befbg := d.DecodeElement(&_afdbg.AreaChart, &_gage); _befbg != nil {
					return _befbg
				}
				_ecebe.Choice = append(_ecebe.Choice, _afdbg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cabe := NewCT_PlotAreaChoice()
				if _bdgc := d.DecodeElement(&_cabe.Area3DChart, &_gage); _bdgc != nil {
					return _bdgc
				}
				_ecebe.Choice = append(_ecebe.Choice, _cabe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_ffbgfe := NewCT_PlotAreaChoice()
				if _ggega := d.DecodeElement(&_ffbgfe.LineChart, &_gage); _ggega != nil {
					return _ggega
				}
				_ecebe.Choice = append(_ecebe.Choice, _ffbgfe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gcggf := NewCT_PlotAreaChoice()
				if _dadf := d.DecodeElement(&_gcggf.Line3DChart, &_gage); _dadf != nil {
					return _dadf
				}
				_ecebe.Choice = append(_ecebe.Choice, _gcggf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_fbdfea := NewCT_PlotAreaChoice()
				if _eebaa := d.DecodeElement(&_fbdfea.StockChart, &_gage); _eebaa != nil {
					return _eebaa
				}
				_ecebe.Choice = append(_ecebe.Choice, _fbdfea)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_bfdce := NewCT_PlotAreaChoice()
				if _fbcad := d.DecodeElement(&_bfdce.RadarChart, &_gage); _fbcad != nil {
					return _fbcad
				}
				_ecebe.Choice = append(_ecebe.Choice, _bfdce)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_ebada := NewCT_PlotAreaChoice()
				if _fcdff := d.DecodeElement(&_ebada.ScatterChart, &_gage); _fcdff != nil {
					return _fcdff
				}
				_ecebe.Choice = append(_ecebe.Choice, _ebada)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gbgabb := NewCT_PlotAreaChoice()
				if _bfced := d.DecodeElement(&_gbgabb.PieChart, &_gage); _bfced != nil {
					return _bfced
				}
				_ecebe.Choice = append(_ecebe.Choice, _gbgabb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_feaaa := NewCT_PlotAreaChoice()
				if _edaed := d.DecodeElement(&_feaaa.Pie3DChart, &_gage); _edaed != nil {
					return _edaed
				}
				_ecebe.Choice = append(_ecebe.Choice, _feaaa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_adfag := NewCT_PlotAreaChoice()
				if _ccafd := d.DecodeElement(&_adfag.DoughnutChart, &_gage); _ccafd != nil {
					return _ccafd
				}
				_ecebe.Choice = append(_ecebe.Choice, _adfag)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cdcdd := NewCT_PlotAreaChoice()
				if _fggdb := d.DecodeElement(&_cdcdd.BarChart, &_gage); _fggdb != nil {
					return _fggdb
				}
				_ecebe.Choice = append(_ecebe.Choice, _cdcdd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fdcgf := NewCT_PlotAreaChoice()
				if _dgfdc := d.DecodeElement(&_fdcgf.Bar3DChart, &_gage); _dgfdc != nil {
					return _dgfdc
				}
				_ecebe.Choice = append(_ecebe.Choice, _fdcgf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_dbcbe := NewCT_PlotAreaChoice()
				if _ccdab := d.DecodeElement(&_dbcbe.OfPieChart, &_gage); _ccdab != nil {
					return _ccdab
				}
				_ecebe.Choice = append(_ecebe.Choice, _dbcbe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bade := NewCT_PlotAreaChoice()
				if _ffefa := d.DecodeElement(&_bade.SurfaceChart, &_gage); _ffefa != nil {
					return _ffefa
				}
				_ecebe.Choice = append(_ecebe.Choice, _bade)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_cdbb := NewCT_PlotAreaChoice()
				if _dgbafb := d.DecodeElement(&_cdbb.Surface3DChart, &_gage); _dgbafb != nil {
					return _dgbafb
				}
				_ecebe.Choice = append(_ecebe.Choice, _cdbb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_aeae := NewCT_PlotAreaChoice()
				if _bfgdcd := d.DecodeElement(&_aeae.BubbleChart, &_gage); _bfgdcd != nil {
					return _bfgdcd
				}
				_ecebe.Choice = append(_ecebe.Choice, _aeae)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				if _ecebe.CChoice == nil {
					_ecebe.CChoice = NewCT_PlotAreaChoice1()
				}
				if _ecfdc := d.DecodeElement(&_ecebe.CChoice.ValAx, &_gage); _ecfdc != nil {
					return _ecfdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				if _ecebe.CChoice == nil {
					_ecebe.CChoice = NewCT_PlotAreaChoice1()
				}
				if _eaaeed := d.DecodeElement(&_ecebe.CChoice.CatAx, &_gage); _eaaeed != nil {
					return _eaaeed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				if _ecebe.CChoice == nil {
					_ecebe.CChoice = NewCT_PlotAreaChoice1()
				}
				if _ffeec := d.DecodeElement(&_ecebe.CChoice.DateAx, &_gage); _ffeec != nil {
					return _ffeec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				if _ecebe.CChoice == nil {
					_ecebe.CChoice = NewCT_PlotAreaChoice1()
				}
				if _acce := d.DecodeElement(&_ecebe.CChoice.SerAx, &_gage); _acce != nil {
					return _acce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_ecebe.DTable = NewCT_DTable()
				if _cbca := d.DecodeElement(_ecebe.DTable, &_gage); _cbca != nil {
					return _cbca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecebe.SpPr = _cb.NewCT_ShapeProperties()
				if _efbd := d.DecodeElement(_ecebe.SpPr, &_gage); _efbd != nil {
					return _efbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecebe.ExtLst = NewCT_ExtensionList()
				if _bggac := d.DecodeElement(_ecebe.ExtLst, &_gage); _bggac != nil {
					return _bggac
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _gage.Name)
				if _dedc := d.Skip(); _dedc != nil {
					return _dedc
				}
			}
		case _e.EndElement:
			break _bcac
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_edage *CT_LineChart) ValidateWithPath(path string) error {
	if _adbe := _edage.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _adbe != nil {
		return _adbe
	}
	if _edage.VaryColors != nil {
		if _adad := _edage.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _adad != nil {
			return _adad
		}
	}
	for _dbddd, _caba := range _edage.Ser {
		if _daae := _caba.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dbddd)); _daae != nil {
			return _daae
		}
	}
	if _edage.DLbls != nil {
		if _geeb := _edage.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _geeb != nil {
			return _geeb
		}
	}
	if _edage.DropLines != nil {
		if _aedd := _edage.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _aedd != nil {
			return _aedd
		}
	}
	if _edage.HiLowLines != nil {
		if _adfd := _edage.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _adfd != nil {
			return _adfd
		}
	}
	if _edage.UpDownBars != nil {
		if _febg := _edage.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _febg != nil {
			return _febg
		}
	}
	if _edage.Marker != nil {
		if _ebbd := _edage.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _ebbd != nil {
			return _ebbd
		}
	}
	if _edage.Smooth != nil {
		if _gfgfa := _edage.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _gfgfa != nil {
			return _gfgfa
		}
	}
	for _dfede, _bead := range _edage.AxId {
		if _bfcbd := _bead.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dfede)); _bfcbd != nil {
			return _bfcbd
		}
	}
	if _edage.ExtLst != nil {
		if _ccfge := _edage.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccfge != nil {
			return _ccfge
		}
	}
	return nil
}

func (_ceb *CT_AreaSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ceb.Idx = NewCT_UnsignedInt()
	_ceb.Order = NewCT_UnsignedInt()
_afdb:
	for {
		_cbda, _cce := d.Token()
		if _cce != nil {
			return _cce
		}
		switch _cgfe := _cbda.(type) {
		case _e.StartElement:
			switch _cgfe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bdc := d.DecodeElement(_ceb.Idx, &_cgfe); _bdc != nil {
					return _bdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bdb := d.DecodeElement(_ceb.Order, &_cgfe); _bdb != nil {
					return _bdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ceb.Tx = NewCT_SerTx()
				if _eed := d.DecodeElement(_ceb.Tx, &_cgfe); _eed != nil {
					return _eed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ceb.SpPr = _cb.NewCT_ShapeProperties()
				if _gab := d.DecodeElement(_ceb.SpPr, &_cgfe); _gab != nil {
					return _gab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ceb.PictureOptions = NewCT_PictureOptions()
				if _fdg := d.DecodeElement(_ceb.PictureOptions, &_cgfe); _fdg != nil {
					return _fdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_gee := NewCT_DPt()
				if _dce := d.DecodeElement(_gee, &_cgfe); _dce != nil {
					return _dce
				}
				_ceb.DPt = append(_ceb.DPt, _gee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ceb.DLbls = NewCT_DLbls()
				if _feb := d.DecodeElement(_ceb.DLbls, &_cgfe); _feb != nil {
					return _feb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_fdgg := NewCT_Trendline()
				if _fed := d.DecodeElement(_fdgg, &_cgfe); _fed != nil {
					return _fed
				}
				_ceb.Trendline = append(_ceb.Trendline, _fdgg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_cdd := NewCT_ErrBars()
				if _faf := d.DecodeElement(_cdd, &_cgfe); _faf != nil {
					return _faf
				}
				_ceb.ErrBars = append(_ceb.ErrBars, _cdd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ceb.Cat = NewCT_AxDataSource()
				if _eeb := d.DecodeElement(_ceb.Cat, &_cgfe); _eeb != nil {
					return _eeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ceb.Val = NewCT_NumDataSource()
				if _aff := d.DecodeElement(_ceb.Val, &_cgfe); _aff != nil {
					return _aff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ceb.ExtLst = NewCT_ExtensionList()
				if _dfc := d.DecodeElement(_ceb.ExtLst, &_cgfe); _dfc != nil {
					return _dfc
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _cgfe.Name)
				if _bec := d.Skip(); _bec != nil {
					return _bec
				}
			}
		case _e.EndElement:
			break _afdb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ChartLines and its children
func (_ecff *CT_ChartLines) Validate() error {
	return _ecff.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}

// Validate validates the CT_GapAmount and its children
func (_adag *CT_GapAmount) Validate() error {
	return _adag.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}

func (_acff *CT_Tx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acff.Choice = NewCT_TxChoice()
_eafaae:
	for {
		_ecafg, _dcgdd := d.Token()
		if _dcgdd != nil {
			return _dcgdd
		}
		switch _adecd := _ecafg.(type) {
		case _e.StartElement:
			switch _adecd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_acff.Choice = NewCT_TxChoice()
				if _bbgdgd := d.DecodeElement(&_acff.Choice.StrRef, &_adecd); _bbgdgd != nil {
					return _bbgdgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_acff.Choice = NewCT_TxChoice()
				if _ggfgd := d.DecodeElement(&_acff.Choice.Rich, &_adecd); _ggfgd != nil {
					return _ggfgd
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _adecd.Name)
				if _dbag := d.Skip(); _dbag != nil {
					return _dbag
				}
			}
		case _e.EndElement:
			break _eafaae
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_BarDir() *CT_BarDir { _afcc := &CT_BarDir{}; return _afcc }

type CT_Overlap struct{ ValAttr *ST_Overlap }

func (_baba ST_SplitType) ValidateWithPath(path string) error {
	switch _baba {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baba))
	}
	return nil
}

func (_ddba *CT_NumDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_aefge:
	for {
		_egfaf, _egcd := d.Token()
		if _egcd != nil {
			return _egcd
		}
		switch _bfdg := _egfaf.(type) {
		case _e.StartElement:
			switch _bfdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_ddba.NumRef = NewCT_NumRef()
				if _gadfg := d.DecodeElement(_ddba.NumRef, &_bfdg); _gadfg != nil {
					return _gadfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_ddba.NumLit = NewCT_NumData()
				if _abfab := d.DecodeElement(_ddba.NumLit, &_bfdg); _abfab != nil {
					return _abfab
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bfdg.Name)
				if _gfgeg := d.Skip(); _gfgeg != nil {
					return _gfgeg
				}
			}
		case _e.EndElement:
			break _aefge
		case _e.CharData:
		}
	}
	return nil
}

type CT_LogBase struct{ ValAttr float64 }

func (_bcfdb *ST_TickLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bcfdb = 0
	case "\u0068\u0069\u0067\u0068":
		*_bcfdb = 1
	case "\u006c\u006f\u0077":
		*_bcfdb = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_bcfdb = 3
	case "\u006e\u006f\u006e\u0065":
		*_bcfdb = 4
	}
	return nil
}

type CT_RadarSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_cb.CT_ShapeProperties
	Marker *CT_Marker
	DPt    []*CT_DPt
	DLbls  *CT_DLbls
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_bffg *CT_MultiLvlStrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ffgdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_ba.AddPreserveSpaceAttr(&_ffgdf, _bffg.F)
	e.EncodeElement(_bffg.F, _ffgdf)
	if _bffg.MultiLvlStrCache != nil {
		_fdcg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_bffg.MultiLvlStrCache, _fdcg)
	}
	if _bffg.ExtLst != nil {
		_dbdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bffg.ExtLst, _dbdc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Layout() *CT_Layout { _edfga := &CT_Layout{}; return _edfga }

func (_bacaf *EG_AxShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_geeee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_bacaf.AxId, _geeee)
	_baed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_bacaf.Scaling, _baed)
	if _bacaf.Delete != nil {
		_fdbfed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bacaf.Delete, _fdbfed)
	}
	_fcbgc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_bacaf.AxPos, _fcbgc)
	if _bacaf.MajorGridlines != nil {
		_dbacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bacaf.MajorGridlines, _dbacf)
	}
	if _bacaf.MinorGridlines != nil {
		_cfcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bacaf.MinorGridlines, _cfcc)
	}
	if _bacaf.Title != nil {
		_fgebe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_bacaf.Title, _fgebe)
	}
	if _bacaf.NumFmt != nil {
		_bgea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bacaf.NumFmt, _bgea)
	}
	if _bacaf.MajorTickMark != nil {
		_ceace := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bacaf.MajorTickMark, _ceace)
	}
	if _bacaf.MinorTickMark != nil {
		_bagce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bacaf.MinorTickMark, _bagce)
	}
	if _bacaf.TickLblPos != nil {
		_ecafb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_bacaf.TickLblPos, _ecafb)
	}
	if _bacaf.SpPr != nil {
		_ebbaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bacaf.SpPr, _ebbaa)
	}
	if _bacaf.TxPr != nil {
		_dgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bacaf.TxPr, _dgfb)
	}
	_aadfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_bacaf.CrossAx, _aadfe)
	if _bacaf.Choice != nil {
		_bacaf.Choice.MarshalXML(e, _e.StartElement{})
	}
	return nil
}

func NewCT_PrintSettings() *CT_PrintSettings { _ggda := &CT_PrintSettings{}; return _ggda }

type CT_DLblPos struct{ ValAttr ST_DLblPos }

func (_fcdf *CT_CustSplit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fcdf.SecondPiePt != nil {
		_fbaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _bfag := range _fcdf.SecondPiePt {
			e.EncodeElement(_bfag, _fbaf)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dag *CT_Bar3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dag.BarDir = NewCT_BarDir()
_bfac:
	for {
		_cgc, _edb := d.Token()
		if _edb != nil {
			return _edb
		}
		switch _cac := _cgc.(type) {
		case _e.StartElement:
			switch _cac.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _cdg := d.DecodeElement(_dag.BarDir, &_cac); _cdg != nil {
					return _cdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_dag.Grouping = NewCT_BarGrouping()
				if _ggc := d.DecodeElement(_dag.Grouping, &_cac); _ggc != nil {
					return _ggc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dag.VaryColors = NewCT_Boolean()
				if _abfd := d.DecodeElement(_dag.VaryColors, &_cac); _abfd != nil {
					return _abfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aab := NewCT_BarSer()
				if _eea := d.DecodeElement(_aab, &_cac); _eea != nil {
					return _eea
				}
				_dag.Ser = append(_dag.Ser, _aab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dag.DLbls = NewCT_DLbls()
				if _dacd := d.DecodeElement(_dag.DLbls, &_cac); _dacd != nil {
					return _dacd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_dag.GapWidth = NewCT_GapAmount()
				if _dfg := d.DecodeElement(_dag.GapWidth, &_cac); _dfg != nil {
					return _dfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_dag.GapDepth = NewCT_GapAmount()
				if _bbg := d.DecodeElement(_dag.GapDepth, &_cac); _bbg != nil {
					return _bbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_dag.Shape = NewCT_Shape()
				if _bbde := d.DecodeElement(_dag.Shape, &_cac); _bbde != nil {
					return _bbde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gfaa := NewCT_UnsignedInt()
				if _aea := d.DecodeElement(_gfaa, &_cac); _aea != nil {
					return _aea
				}
				_dag.AxId = append(_dag.AxId, _gfaa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dag.ExtLst = NewCT_ExtensionList()
				if _ceeb := d.DecodeElement(_dag.ExtLst, &_cac); _ceeb != nil {
					return _ceeb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _cac.Name)
				if _gfbb := d.Skip(); _gfbb != nil {
					return _gfbb
				}
			}
		case _e.EndElement:
			break _bfac
		case _e.CharData:
		}
	}
	return nil
}

func (_dbec *CT_Lvl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eggc:
	for {
		_fead, _egcg := d.Token()
		if _egcg != nil {
			return _egcg
		}
		switch _eggbd := _fead.(type) {
		case _e.StartElement:
			switch _eggbd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_fefba := NewCT_StrVal()
				if _egee := d.DecodeElement(_fefba, &_eggbd); _egee != nil {
					return _egee
				}
				_dbec.Pt = append(_dbec.Pt, _fefba)
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _eggbd.Name)
				if _gbafd := d.Skip(); _gbafd != nil {
					return _gbafd
				}
			}
		case _e.EndElement:
			break _eggc
		case _e.CharData:
		}
	}
	return nil
}

type CT_HoleSize struct{ ValAttr *ST_HoleSize }

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_gdgfd *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	for _bgbec, _deae := range _gdgfd.ValAx {
		if _bafeb := _deae.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0078\u005b\u0025\u0064\u005d", path, _bgbec)); _bafeb != nil {
			return _bafeb
		}
	}
	for _cdgc, _gcacb := range _gdgfd.CatAx {
		if _cfbfda := _gcacb.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002fC\u0061\u0074\u0041\u0078\u005b\u0025\u0064\u005d", path, _cdgc)); _cfbfda != nil {
			return _cfbfda
		}
	}
	for _ggaa, _babfbb := range _gdgfd.DateAx {
		if _dfdea := _babfbb.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0061\u0074\u0065\u0041\u0078\u005b\u0025\u0064\u005d", path, _ggaa)); _dfdea != nil {
			return _dfdea
		}
	}
	for _bdbd, _cggbb := range _gdgfd.SerAx {
		if _dgcd := _cggbb.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002fS\u0065\u0072\u0041\u0078\u005b\u0025\u0064\u005d", path, _bdbd)); _dgcd != nil {
			return _dgcd
		}
	}
	return nil
}

func (_gcge *CT_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _adgcc := range start.Attr {
		if _adgcc.Name.Local == "\u0076\u0061\u006c" {
			_gcge.ValAttr.UnmarshalXMLAttr(_adgcc)
			continue
		}
	}
	for {
		_debg, _dgeb := d.Token()
		if _dgeb != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _dgeb)
		}
		if _ddc, _bffb := _debg.(_e.EndElement); _bffb && _ddc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bcgafc *ST_Crosses) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bcgafc = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_bcgafc = 1
	case "\u006d\u0061\u0078":
		*_bcgafc = 2
	case "\u006d\u0069\u006e":
		*_bcgafc = 3
	}
	return nil
}

func NewCT_ScatterChart() *CT_ScatterChart {
	_dabe := &CT_ScatterChart{}
	_dabe.ScatterStyle = NewCT_ScatterStyle()
	return _dabe
}

func (_dde *CT_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _becf := range start.Attr {
		if _becf.Name.Local == "\u0076\u0061\u006c" {
			_dde.ValAttr.UnmarshalXMLAttr(_becf)
			continue
		}
	}
	for {
		_bedca, _cdcc := d.Token()
		if _cdcc != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _cdcc)
		}
		if _eabd, _aee := _bedca.(_e.EndElement); _aee && _eabd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_cdca *CT_RelId) ValidateWithPath(path string) error { return nil }

func (_gddc *ST_DispBlanksAs) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gddc = 0
	case "\u0073\u0070\u0061\u006e":
		*_gddc = 1
	case "\u0067\u0061\u0070":
		*_gddc = 2
	case "\u007a\u0065\u0072\u006f":
		*_gddc = 3
	}
	return nil
}

func NewCT_DLblPos() *CT_DLblPos { _abca := &CT_DLblPos{}; _abca.ValAttr = ST_DLblPos(1); return _abca }

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_dded *CT_LegendEntry) ValidateWithPath(path string) error {
	if _abff := _dded.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _abff != nil {
		return _abff
	}
	if _dded.Choice != nil {
		if _cebd := _dded.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _cebd != nil {
			return _cebd
		}
	}
	if _dded.ExtLst != nil {
		if _dfeb := _dded.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfeb != nil {
			return _dfeb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_gde *CT_BarDir) ValidateWithPath(path string) error {
	if _ebcc := _gde.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ebcc != nil {
		return _ebcc
	}
	return nil
}

func (_bdagg *EG_LegendEntryData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gafe:
	for {
		_ccafb, _bfefa := d.Token()
		if _bfefa != nil {
			return _bfefa
		}
		switch _fdcfb := _ccafb.(type) {
		case _e.StartElement:
			switch _fdcfb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bdagg.TxPr = _cb.NewCT_TextBody()
				if _baacc := d.DecodeElement(_bdagg.TxPr, &_fdcfb); _baacc != nil {
					return _baacc
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fdcfb.Name)
				if _gcabg := d.Skip(); _gcabg != nil {
					return _gcabg
				}
			}
		case _e.EndElement:
			break _gafe
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_eaaee *CT_LblOffset) ValidateWithPath(path string) error {
	if _eaaee.ValAttr != nil {
		if _afbdd := _eaaee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _afbdd != nil {
			return _afbdd
		}
	}
	return nil
}

func (_aeedg *CT_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aeedg.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_aeedg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bgecg *CT_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cdcca := range start.Attr {
		if _cdcca.Name.Local == "\u0076\u0061\u006c" {
			_bgecg.ValAttr.UnmarshalXMLAttr(_cdcca)
			continue
		}
	}
	for {
		_agbb, _fgdc := d.Token()
		if _fgdc != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _fgdc)
		}
		if _dagcg, _gaee := _agbb.(_e.EndElement); _gaee && _dagcg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bdcdb *CT_Pie3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cdbfc:
	for {
		_fbdfe, _ffcgc := d.Token()
		if _ffcgc != nil {
			return _ffcgc
		}
		switch _fecad := _fbdfe.(type) {
		case _e.StartElement:
			switch _fecad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bdcdb.VaryColors = NewCT_Boolean()
				if _dagaf := d.DecodeElement(_bdcdb.VaryColors, &_fecad); _dagaf != nil {
					return _dagaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cbdc := NewCT_PieSer()
				if _fafb := d.DecodeElement(_cbdc, &_fecad); _fafb != nil {
					return _fafb
				}
				_bdcdb.Ser = append(_bdcdb.Ser, _cbdc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bdcdb.DLbls = NewCT_DLbls()
				if _ebfdf := d.DecodeElement(_bdcdb.DLbls, &_fecad); _ebfdf != nil {
					return _ebfdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdcdb.ExtLst = NewCT_ExtensionList()
				if _fgaab := d.DecodeElement(_bdcdb.ExtLst, &_fecad); _fgaab != nil {
					return _fgaab
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fecad.Name)
				if _gfacc := d.Skip(); _gfacc != nil {
					return _gfacc
				}
			}
		case _e.EndElement:
			break _cdbfc
		case _e.CharData:
		}
	}
	return nil
}

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

// Validate validates the CT_LayoutMode and its children
func (_aeed *CT_LayoutMode) Validate() error {
	return _aeed.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}

func NewCT_RadarStyle() *CT_RadarStyle { _eegg := &CT_RadarStyle{}; return _eegg }

func (_acdaa ST_HPercent) String() string {
	if _acdaa.ST_HPercentWithSymbol != nil {
		return _bf.Sprintf("\u0025\u0076", *_acdaa.ST_HPercentWithSymbol)
	}
	if _acdaa.ST_HPercentUShort != nil {
		return _bf.Sprintf("\u0025\u0076", *_acdaa.ST_HPercentUShort)
	}
	return ""
}

func NewCT_BandFmt() *CT_BandFmt {
	_dgcf := &CT_BandFmt{}
	_dgcf.Idx = NewCT_UnsignedInt()
	return _dgcf
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_efg *CT_BandFmts) ValidateWithPath(path string) error {
	for _aagad, _def := range _efg.BandFmt {
		if _adf := _def.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _aagad)); _adf != nil {
			return _adf
		}
	}
	return nil
}

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_bcbc *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _bcbc.Wireframe != nil {
		if _cdda := _bcbc.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _cdda != nil {
			return _cdda
		}
	}
	for _aaafe, _efceb := range _bcbc.Ser {
		if _baebb := _efceb.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aaafe)); _baebb != nil {
			return _baebb
		}
	}
	if _bcbc.BandFmts != nil {
		if _dddbd := _bcbc.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _dddbd != nil {
			return _dddbd
		}
	}
	return nil
}

type CT_NumVal struct {
	IdxAttr        uint32
	FormatCodeAttr *string
	V              string
}

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_cafa *CT_CrossBetween) ValidateWithPath(path string) error {
	if _cafa.ValAttr == ST_CrossBetweenUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bfbbc := _cafa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfbbc != nil {
		return _bfbbc
	}
	return nil
}

func (_efa *CT_BarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efa.BarDir = NewCT_BarDir()
_ecbe:
	for {
		_gefb, _aed := d.Token()
		if _aed != nil {
			return _aed
		}
		switch _fbfb := _gefb.(type) {
		case _e.StartElement:
			switch _fbfb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _dfd := d.DecodeElement(_efa.BarDir, &_fbfb); _dfd != nil {
					return _dfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_efa.Grouping = NewCT_BarGrouping()
				if _ffb := d.DecodeElement(_efa.Grouping, &_fbfb); _ffb != nil {
					return _ffb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_efa.VaryColors = NewCT_Boolean()
				if _dgf := d.DecodeElement(_efa.VaryColors, &_fbfb); _dgf != nil {
					return _dgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cfe := NewCT_BarSer()
				if _cbdb := d.DecodeElement(_cfe, &_fbfb); _cbdb != nil {
					return _cbdb
				}
				_efa.Ser = append(_efa.Ser, _cfe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_efa.DLbls = NewCT_DLbls()
				if _bbgf := d.DecodeElement(_efa.DLbls, &_fbfb); _bbgf != nil {
					return _bbgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_efa.GapWidth = NewCT_GapAmount()
				if _bgd := d.DecodeElement(_efa.GapWidth, &_fbfb); _bgd != nil {
					return _bgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_efa.Overlap = NewCT_Overlap()
				if _faba := d.DecodeElement(_efa.Overlap, &_fbfb); _faba != nil {
					return _faba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fbgb := NewCT_ChartLines()
				if _cbad := d.DecodeElement(_fbgb, &_fbfb); _cbad != nil {
					return _cbad
				}
				_efa.SerLines = append(_efa.SerLines, _fbgb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_efad := NewCT_UnsignedInt()
				if _adg := d.DecodeElement(_efad, &_fbfb); _adg != nil {
					return _adg
				}
				_efa.AxId = append(_efa.AxId, _efad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efa.ExtLst = NewCT_ExtensionList()
				if _eeaa := d.DecodeElement(_efa.ExtLst, &_fbfb); _eeaa != nil {
					return _eeaa
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fbfb.Name)
				if _ccdag := d.Skip(); _ccdag != nil {
					return _ccdag
				}
			}
		case _e.EndElement:
			break _ecbe
		case _e.CharData:
		}
	}
	return nil
}

type CT_TickLblPos struct{ ValAttr ST_TickLblPos }

func (_edbbd *CT_TrendlineLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _edbbd.Layout != nil {
		_gfaee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_edbbd.Layout, _gfaee)
	}
	if _edbbd.Tx != nil {
		_cdcdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_edbbd.Tx, _cdcdf)
	}
	if _edbbd.NumFmt != nil {
		_gfagc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_edbbd.NumFmt, _gfagc)
	}
	if _edbbd.SpPr != nil {
		_efbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_edbbd.SpPr, _efbe)
	}
	if _edbbd.TxPr != nil {
		_bccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_edbbd.TxPr, _bccf)
	}
	if _edbbd.ExtLst != nil {
		_gada := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edbbd.ExtLst, _gada)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Order struct{ ValAttr *uint8 }

func (_fafg *CT_Period) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fafg.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_fafg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_edecf ST_Crosses) String() string {
	switch _edecf {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}

// Validate validates the EG_LineChartShared and its children
func (_fggdg *EG_LineChartShared) Validate() error {
	return _fggdg.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

func (_dafge *CT_GapAmount) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aaab := range start.Attr {
		if _aaab.Name.Local == "\u0076\u0061\u006c" {
			_fgeae, _fgef := ParseUnionST_GapAmount(_aaab.Value)
			if _fgef != nil {
				return _fgef
			}
			_dafge.ValAttr = &_fgeae
			continue
		}
	}
	for {
		_afbcb, _bbgeb := d.Token()
		if _bbgeb != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _bbgeb)
		}
		if _fbba, _aabc := _afbcb.(_e.EndElement); _aabc && _fbba.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ecbb *CT_ManualLayout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dggff:
	for {
		_gdgd, _fafaa := d.Token()
		if _fafaa != nil {
			return _fafaa
		}
		switch _bfea := _gdgd.(type) {
		case _e.StartElement:
			switch _bfea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_ecbb.LayoutTarget = NewCT_LayoutTarget()
				if _fdgaf := d.DecodeElement(_ecbb.LayoutTarget, &_bfea); _fdgaf != nil {
					return _fdgaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_ecbb.XMode = NewCT_LayoutMode()
				if _cgcdc := d.DecodeElement(_ecbb.XMode, &_bfea); _cgcdc != nil {
					return _cgcdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_ecbb.YMode = NewCT_LayoutMode()
				if _egcbb := d.DecodeElement(_ecbb.YMode, &_bfea); _egcbb != nil {
					return _egcbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_ecbb.WMode = NewCT_LayoutMode()
				if _gbecf := d.DecodeElement(_ecbb.WMode, &_bfea); _gbecf != nil {
					return _gbecf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_ecbb.HMode = NewCT_LayoutMode()
				if _gabe := d.DecodeElement(_ecbb.HMode, &_bfea); _gabe != nil {
					return _gabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_ecbb.X = NewCT_Double()
				if _ccaff := d.DecodeElement(_ecbb.X, &_bfea); _ccaff != nil {
					return _ccaff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_ecbb.Y = NewCT_Double()
				if _bdfd := d.DecodeElement(_ecbb.Y, &_bfea); _bdfd != nil {
					return _bdfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_ecbb.W = NewCT_Double()
				if _cabf := d.DecodeElement(_ecbb.W, &_bfea); _cabf != nil {
					return _cabf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_ecbb.H = NewCT_Double()
				if _cdfd := d.DecodeElement(_ecbb.H, &_bfea); _cdfd != nil {
					return _cdfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecbb.ExtLst = NewCT_ExtensionList()
				if _faeff := d.DecodeElement(_ecbb.ExtLst, &_bfea); _faeff != nil {
					return _faeff
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _bfea.Name)
				if _cagcg := d.Skip(); _cagcg != nil {
					return _cagcg
				}
			}
		case _e.EndElement:
			break _dggff
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_cded *CT_Skip) ValidateWithPath(path string) error {
	if _cded.ValAttr < 1 {
		return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _cded.ValAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_dfdda *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }

func (_ddaff *CT_SurfaceChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ddaff.Wireframe != nil {
		_bcgdde := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_ddaff.Wireframe, _bcgdde)
	}
	if _ddaff.Ser != nil {
		_fbcda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _egdfb := range _ddaff.Ser {
			e.EncodeElement(_egdfb, _fbcda)
		}
	}
	if _ddaff.BandFmts != nil {
		_dbced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_ddaff.BandFmts, _dbced)
	}
	_bbggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _aeffb := range _ddaff.AxId {
		e.EncodeElement(_aeffb, _bbggc)
	}
	if _ddaff.ExtLst != nil {
		_dccbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ddaff.ExtLst, _dccbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LineSer() *CT_LineSer {
	_faae := &CT_LineSer{}
	_faae.Idx = NewCT_UnsignedInt()
	_faae.Order = NewCT_UnsignedInt()
	return _faae
}

func (_cabfe *CT_Perspective) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gaefa := range start.Attr {
		if _gaefa.Name.Local == "\u0076\u0061\u006c" {
			_ccdd, _bbce := _b.ParseUint(_gaefa.Value, 10, 8)
			if _bbce != nil {
				return _bbce
			}
			_adea := uint8(_ccdd)
			_cabfe.ValAttr = &_adea
			continue
		}
	}
	for {
		_gacg, _fcea := d.Token()
		if _fcea != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _fcea)
		}
		if _fcff, _eebc := _gacg.(_e.EndElement); _eebc && _fcff.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_PageMargins struct {
	LAttr      float64
	RAttr      float64
	TAttr      float64
	BAttr      float64
	HeaderAttr float64
	FooterAttr float64
}

func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_cedgf, _affgf := _b.ParseUint(s, 10, 16)
	if _affgf != nil {
		return ST_LblOffset{}, _affgf
	}
	_bgfdd := uint16(_cedgf)
	return ST_LblOffset{ST_LblOffsetUShort: &_bgfdd}, nil
}

func (_efgd *CT_ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efgd.Chart = NewCT_Chart()
_ggba:
	for {
		_gcbc, _ffbf := d.Token()
		if _ffbf != nil {
			return _ffbf
		}
		switch _fgad := _gcbc.(type) {
		case _e.StartElement:
			switch _fgad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_efgd.Date1904 = NewCT_Boolean()
				if _febc := d.DecodeElement(_efgd.Date1904, &_fgad); _febc != nil {
					return _febc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_efgd.Lang = NewCT_TextLanguageID()
				if _gdcf := d.DecodeElement(_efgd.Lang, &_fgad); _gdcf != nil {
					return _gdcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_efgd.RoundedCorners = NewCT_Boolean()
				if _bbf := d.DecodeElement(_efgd.RoundedCorners, &_fgad); _bbf != nil {
					return _bbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_efgd.Style = NewCT_Style()
				if _dbcb := d.DecodeElement(_efgd.Style, &_fgad); _dbcb != nil {
					return _dbcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_efgd.ClrMapOvr = _cb.NewCT_ColorMapping()
				if _gff := d.DecodeElement(_efgd.ClrMapOvr, &_fgad); _gff != nil {
					return _gff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_efgd.PivotSource = NewCT_PivotSource()
				if _fad := d.DecodeElement(_efgd.PivotSource, &_fgad); _fad != nil {
					return _fad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_efgd.Protection = NewCT_Protection()
				if _eaag := d.DecodeElement(_efgd.Protection, &_fgad); _eaag != nil {
					return _eaag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _dagg := d.DecodeElement(_efgd.Chart, &_fgad); _dagg != nil {
					return _dagg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efgd.SpPr = _cb.NewCT_ShapeProperties()
				if _agcc := d.DecodeElement(_efgd.SpPr, &_fgad); _agcc != nil {
					return _agcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_efgd.TxPr = _cb.NewCT_TextBody()
				if _cfba := d.DecodeElement(_efgd.TxPr, &_fgad); _cfba != nil {
					return _cfba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_efgd.ExternalData = NewCT_ExternalData()
				if _efff := d.DecodeElement(_efgd.ExternalData, &_fgad); _efff != nil {
					return _efff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_efgd.PrintSettings = NewCT_PrintSettings()
				if _bbee := d.DecodeElement(_efgd.PrintSettings, &_fgad); _bbee != nil {
					return _bbee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_efgd.UserShapes = NewCT_RelId()
				if _aegbf := d.DecodeElement(_efgd.UserShapes, &_fgad); _aegbf != nil {
					return _aegbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efgd.ExtLst = NewCT_ExtensionList()
				if _bfbb := d.DecodeElement(_efgd.ExtLst, &_fgad); _bfbb != nil {
					return _bfbb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _fgad.Name)
				if _fgbe := d.Skip(); _fgbe != nil {
					return _fgbe
				}
			}
		case _e.EndElement:
			break _ggba
		case _e.CharData:
		}
	}
	return nil
}

type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}

func (_abag *CT_Scaling) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gadc:
	for {
		_efab, _bdgae := d.Token()
		if _bdgae != nil {
			return _bdgae
		}
		switch _cbfbe := _efab.(type) {
		case _e.StartElement:
			switch _cbfbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_abag.LogBase = NewCT_LogBase()
				if _gdbag := d.DecodeElement(_abag.LogBase, &_cbfbe); _gdbag != nil {
					return _gdbag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_abag.Orientation = NewCT_Orientation()
				if _bcaac := d.DecodeElement(_abag.Orientation, &_cbfbe); _bcaac != nil {
					return _bcaac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_abag.Max = NewCT_Double()
				if _dcacb := d.DecodeElement(_abag.Max, &_cbfbe); _dcacb != nil {
					return _dcacb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_abag.Min = NewCT_Double()
				if _bbdcd := d.DecodeElement(_abag.Min, &_cbfbe); _bbdcd != nil {
					return _bbdcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abag.ExtLst = NewCT_ExtensionList()
				if _daedg := d.DecodeElement(_abag.ExtLst, &_cbfbe); _daedg != nil {
					return _daedg
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _cbfbe.Name)
				if _aebfd := d.Skip(); _aebfd != nil {
					return _aebfd
				}
			}
		case _e.EndElement:
			break _gadc
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_BubbleChart and its children
func (_gcb *CT_BubbleChart) Validate() error {
	return _gcb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}

func (_bdac *CT_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdac.ValAttr = ST_CrossBetween(1)
	for _, _cgec := range start.Attr {
		if _cgec.Name.Local == "\u0076\u0061\u006c" {
			_bdac.ValAttr.UnmarshalXMLAttr(_cgec)
			continue
		}
	}
	for {
		_aad, _debca := d.Token()
		if _debca != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _debca)
		}
		if _gcbb, _beega := _aad.(_e.EndElement); _beega && _gcbb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_dcbaa ST_SplitType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_edaeg := _e.Attr{}
	_edaeg.Name = name
	switch _dcbaa {
	case ST_SplitTypeUnset:
		_edaeg.Value = ""
	case ST_SplitTypeAuto:
		_edaeg.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_edaeg.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_edaeg.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_edaeg.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_edaeg.Value = "\u0076\u0061\u006c"
	}
	return _edaeg, nil
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_egffg *CT_StockChart) ValidateWithPath(path string) error {
	for _bbged, _bgabf := range _egffg.Ser {
		if _edgf := _bgabf.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bbged)); _edgf != nil {
			return _edgf
		}
	}
	if _egffg.DLbls != nil {
		if _aeecd := _egffg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _aeecd != nil {
			return _aeecd
		}
	}
	if _egffg.DropLines != nil {
		if _dffag := _egffg.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _dffag != nil {
			return _dffag
		}
	}
	if _egffg.HiLowLines != nil {
		if _bacfb := _egffg.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _bacfb != nil {
			return _bacfb
		}
	}
	if _egffg.UpDownBars != nil {
		if _bgcfcd := _egffg.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _bgcfcd != nil {
			return _bgcfcd
		}
	}
	for _ffcfae, _cgce := range _egffg.AxId {
		if _gege := _cgce.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ffcfae)); _gege != nil {
			return _gege
		}
	}
	if _egffg.ExtLst != nil {
		if _bceec := _egffg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bceec != nil {
			return _bceec
		}
	}
	return nil
}

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_ebba *CT_UpDownBar) ValidateWithPath(path string) error {
	if _ebba.SpPr != nil {
		if _dcdebf := _ebba.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dcdebf != nil {
			return _dcdebf
		}
	}
	return nil
}

func (_eebg *CT_NumFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbbca := range start.Attr {
		if _fbbca.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_abaeg, _ccebd := _fbbca.Value, error(nil)
			if _ccebd != nil {
				return _ccebd
			}
			_eebg.FormatCodeAttr = _abaeg
			continue
		}
		if _fbbca.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_fbad, _fcda := _b.ParseBool(_fbbca.Value)
			if _fcda != nil {
				return _fcda
			}
			_eebg.SourceLinkedAttr = &_fbad
			continue
		}
	}
	for {
		_eeeb, _cdabg := d.Token()
		if _cdabg != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _cdabg)
		}
		if _cbff, _bcbd := _eeeb.(_e.EndElement); _bcbd && _cbff.Name == start.Name {
			break
		}
	}
	return nil
}

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

func (_aabafb *CT_NumData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aabafb.FormatCode != nil {
		_gfab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_ba.AddPreserveSpaceAttr(&_gfab, *_aabafb.FormatCode)
		e.EncodeElement(_aabafb.FormatCode, _gfab)
	}
	if _aabafb.PtCount != nil {
		_ddfcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_aabafb.PtCount, _ddfcd)
	}
	if _aabafb.Pt != nil {
		_gcbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _edad := range _aabafb.Pt {
			e.EncodeElement(_edad, _gcbd)
		}
	}
	if _aabafb.ExtLst != nil {
		_dfdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aabafb.ExtLst, _dfdb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Boolean and its children
func (_cdc *CT_Boolean) Validate() error {
	return _cdc.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}

func (_fgcb *CT_DLblsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fgcb.Delete != nil {
		_gafc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_fgcb.Delete, _gafc)
	}
	if _fgcb.NumFmt != nil {
		_daea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fgcb.NumFmt, _daea)
	}
	if _fgcb.SpPr != nil {
		_cgac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fgcb.SpPr, _cgac)
	}
	if _fgcb.TxPr != nil {
		_age := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fgcb.TxPr, _age)
	}
	if _fgcb.DLblPos != nil {
		_gbda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_fgcb.DLblPos, _gbda)
	}
	if _fgcb.ShowLegendKey != nil {
		_decd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_fgcb.ShowLegendKey, _decd)
	}
	if _fgcb.ShowVal != nil {
		_cgeb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_fgcb.ShowVal, _cgeb)
	}
	if _fgcb.ShowCatName != nil {
		_aaaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fgcb.ShowCatName, _aaaf)
	}
	if _fgcb.ShowSerName != nil {
		_eeff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fgcb.ShowSerName, _eeff)
	}
	if _fgcb.ShowPercent != nil {
		_cgdge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_fgcb.ShowPercent, _cgdge)
	}
	if _fgcb.ShowBubbleSize != nil {
		_faad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_fgcb.ShowBubbleSize, _faad)
	}
	if _fgcb.Separator != nil {
		_cdfg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_ba.AddPreserveSpaceAttr(&_cdfg, *_fgcb.Separator)
		e.EncodeElement(_fgcb.Separator, _cdfg)
	}
	if _fgcb.ShowLeaderLines != nil {
		_cdac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgcb.ShowLeaderLines, _cdac)
	}
	if _fgcb.LeaderLines != nil {
		_cgece := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgcb.LeaderLines, _cgece)
	}
	return nil
}

// Validate validates the CT_DLblChoice and its children
func (_ffbgf *CT_DLblChoice) Validate() error {
	return _ffbgf.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

type ST_ErrValType byte

func (_cbfce *EG_BarChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbfce.BarDir = NewCT_BarDir()
_bacd:
	for {
		_bgfeb, _bebdf := d.Token()
		if _bebdf != nil {
			return _bebdf
		}
		switch _cgdgd := _bgfeb.(type) {
		case _e.StartElement:
			switch _cgdgd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _edfca := d.DecodeElement(_cbfce.BarDir, &_cgdgd); _edfca != nil {
					return _edfca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cbfce.Grouping = NewCT_BarGrouping()
				if _feeda := d.DecodeElement(_cbfce.Grouping, &_cgdgd); _feeda != nil {
					return _feeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cbfce.VaryColors = NewCT_Boolean()
				if _ecgfb := d.DecodeElement(_cbfce.VaryColors, &_cgdgd); _ecgfb != nil {
					return _ecgfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cecbe := NewCT_BarSer()
				if _dbcgg := d.DecodeElement(_cecbe, &_cgdgd); _dbcgg != nil {
					return _dbcgg
				}
				_cbfce.Ser = append(_cbfce.Ser, _cecbe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cbfce.DLbls = NewCT_DLbls()
				if _fgbab := d.DecodeElement(_cbfce.DLbls, &_cgdgd); _fgbab != nil {
					return _fgbab
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cgdgd.Name)
				if _bagde := d.Skip(); _bagde != nil {
					return _bagde
				}
			}
		case _e.EndElement:
			break _bacd
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_fbea *CT_NumFmt) ValidateWithPath(path string) error { return nil }

func (_cccba ST_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cccba.String(), start)
}

type CT_HeaderFooter struct {
	AlignWithMarginsAttr *bool
	DifferentOddEvenAttr *bool
	DifferentFirstAttr   *bool
	OddHeader            *string
	OddFooter            *string
	EvenHeader           *string
	EvenFooter           *string
	FirstHeader          *string
	FirstFooter          *string
}

func (_cdacb *CT_Line3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_adagd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_cdacb.Grouping, _adagd)
	if _cdacb.VaryColors != nil {
		_beec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cdacb.VaryColors, _beec)
	}
	if _cdacb.Ser != nil {
		_bbdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gdga := range _cdacb.Ser {
			e.EncodeElement(_gdga, _bbdd)
		}
	}
	if _cdacb.DLbls != nil {
		_cfgcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cdacb.DLbls, _cfgcb)
	}
	if _cdacb.DropLines != nil {
		_gebe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cdacb.DropLines, _gebe)
	}
	if _cdacb.GapDepth != nil {
		_gcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_cdacb.GapDepth, _gcgc)
	}
	_geegg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _befc := range _cdacb.AxId {
		e.EncodeElement(_befc, _geegg)
	}
	if _cdacb.ExtLst != nil {
		_eagb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdacb.ExtLst, _eagb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gcfgf *CT_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bbgbc, _gfgbg := _gcfgf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _gfgbg != nil {
		return _gfgbg
	}
	start.Attr = append(start.Attr, _bbgbc)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type ST_TimeUnit byte

type ST_SizeRepresents byte

func (_gbdeb *ST_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gbdaed, _gaeef := d.Token()
	if _gaeef != nil {
		return _gaeef
	}
	if _ecaea, _bgeeg := _gbdaed.(_e.EndElement); _bgeeg && _ecaea.Name == start.Name {
		*_gbdeb = 1
		return nil
	}
	if _gbfbcc, _fdaef := _gbdaed.(_e.CharData); !_fdaef {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbdaed)
	} else {
		switch string(_gbfbcc) {
		case "":
			*_gbdeb = 0
		case "\u0065\u0064\u0067\u0065":
			*_gbdeb = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_gbdeb = 2
		}
	}
	_gbdaed, _gaeef = d.Token()
	if _gaeef != nil {
		return _gaeef
	}
	if _ebbf, _afgd := _gbdaed.(_e.EndElement); _afgd && _ebbf.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbdaed)
}

// Validate validates the CT_Style and its children
func (_bfdd *CT_Style) Validate() error {
	return _bfdd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}

func (_eefa *CT_Title) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eefa.Tx != nil {
		_cbcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eefa.Tx, _cbcgc)
	}
	if _eefa.Layout != nil {
		_bagea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_eefa.Layout, _bagea)
	}
	if _eefa.Overlay != nil {
		_gggga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_eefa.Overlay, _gggga)
	}
	if _eefa.SpPr != nil {
		_dbffcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eefa.SpPr, _dbffcg)
	}
	if _eefa.TxPr != nil {
		_cfgcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eefa.TxPr, _cfgcc)
	}
	if _eefa.ExtLst != nil {
		_gcged := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eefa.ExtLst, _gcged)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_dcedf *Group_DLbls) ValidateWithPath(path string) error {
	if _dcedf.NumFmt != nil {
		if _dabea := _dcedf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dabea != nil {
			return _dabea
		}
	}
	if _dcedf.SpPr != nil {
		if _cfcab := _dcedf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cfcab != nil {
			return _cfcab
		}
	}
	if _dcedf.TxPr != nil {
		if _eafeg := _dcedf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eafeg != nil {
			return _eafeg
		}
	}
	if _dcedf.DLblPos != nil {
		if _ffagf := _dcedf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _ffagf != nil {
			return _ffagf
		}
	}
	if _dcedf.ShowLegendKey != nil {
		if _gdbac := _dcedf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _gdbac != nil {
			return _gdbac
		}
	}
	if _dcedf.ShowVal != nil {
		if _faddb := _dcedf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _faddb != nil {
			return _faddb
		}
	}
	if _dcedf.ShowCatName != nil {
		if _ebfacd := _dcedf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _ebfacd != nil {
			return _ebfacd
		}
	}
	if _dcedf.ShowSerName != nil {
		if _aegga := _dcedf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _aegga != nil {
			return _aegga
		}
	}
	if _dcedf.ShowPercent != nil {
		if _ecbab := _dcedf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _ecbab != nil {
			return _ecbab
		}
	}
	if _dcedf.ShowBubbleSize != nil {
		if _effcg := _dcedf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _effcg != nil {
			return _effcg
		}
	}
	if _dcedf.ShowLeaderLines != nil {
		if _ccgfed := _dcedf.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _ccgfed != nil {
			return _ccgfed
		}
	}
	if _dcedf.LeaderLines != nil {
		if _cafdc := _dcedf.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _cafdc != nil {
			return _cafdc
		}
	}
	return nil
}

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_cgef *CT_NumRef) ValidateWithPath(path string) error {
	if _cgef.NumCache != nil {
		if _edaa := _cgef.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _edaa != nil {
			return _edaa
		}
	}
	if _cgef.ExtLst != nil {
		if _ggafa := _cgef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ggafa != nil {
			return _ggafa
		}
	}
	return nil
}

func (_dad *CT_AreaChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dad.Grouping != nil {
		_cg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dad.Grouping, _cg)
	}
	if _dad.VaryColors != nil {
		_dd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dad.VaryColors, _dd)
	}
	if _dad.Ser != nil {
		_gg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ecf := range _dad.Ser {
			e.EncodeElement(_ecf, _gg)
		}
	}
	if _dad.DLbls != nil {
		_cad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dad.DLbls, _cad)
	}
	if _dad.DropLines != nil {
		_gef := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dad.DropLines, _gef)
	}
	_abe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ac := range _dad.AxId {
		e.EncodeElement(_ac, _abe)
	}
	if _dad.ExtLst != nil {
		_ce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dad.ExtLst, _ce)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_faafb *CT_NumDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_faafb.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_RotY struct{ ValAttr *uint16 }

func (_aeeca *ST_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ffdab, _defgc := d.Token()
	if _defgc != nil {
		return _defgc
	}
	if _eece, _baae := _ffdab.(_e.EndElement); _baae && _eece.Name == start.Name {
		*_aeeca = 1
		return nil
	}
	if _ebgea, _fdffag := _ffdab.(_e.CharData); !_fdffag {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffdab)
	} else {
		switch string(_ebgea) {
		case "":
			*_aeeca = 0
		case "\u0062":
			*_aeeca = 1
		case "\u006c":
			*_aeeca = 2
		case "\u0072":
			*_aeeca = 3
		case "\u0074":
			*_aeeca = 4
		}
	}
	_ffdab, _defgc = d.Token()
	if _defgc != nil {
		return _defgc
	}
	if _defceg, _cgbfd := _ffdab.(_e.EndElement); _cgbfd && _defceg.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffdab)
}

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

func (_bfga *CT_Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfga.Title != nil {
		_aecge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_bfga.Title, _aecge)
	}
	if _bfga.AutoTitleDeleted != nil {
		_cbdd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_bfga.AutoTitleDeleted, _cbdd)
	}
	if _bfga.PivotFmts != nil {
		_cfcg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_bfga.PivotFmts, _cfcg)
	}
	if _bfga.View3D != nil {
		_dgdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_bfga.View3D, _dgdd)
	}
	if _bfga.Floor != nil {
		_gabg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_bfga.Floor, _gabg)
	}
	if _bfga.SideWall != nil {
		_dgbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_bfga.SideWall, _dgbf)
	}
	if _bfga.BackWall != nil {
		_dfce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_bfga.BackWall, _dfce)
	}
	_beca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_bfga.PlotArea, _beca)
	if _bfga.Legend != nil {
		_gbea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_bfga.Legend, _gbea)
	}
	if _bfga.PlotVisOnly != nil {
		_gaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_bfga.PlotVisOnly, _gaa)
	}
	if _bfga.DispBlanksAs != nil {
		_aggf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_bfga.DispBlanksAs, _aggf)
	}
	if _bfga.ShowDLblsOverMax != nil {
		_bgbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_bfga.ShowDLblsOverMax, _bgbb)
	}
	if _bfga.ExtLst != nil {
		_fddg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfga.ExtLst, _fddg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cdbd *CT_Boolean) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _eca := range start.Attr {
		if _eca.Name.Local == "\u0076\u0061\u006c" {
			_gfge, _addfb := _b.ParseBool(_eca.Value)
			if _addfb != nil {
				return _addfb
			}
			_cdbd.ValAttr = &_gfge
			continue
		}
	}
	for {
		_dcf, _agc := d.Token()
		if _agc != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _agc)
		}
		if _adgg, _bedce := _dcf.(_e.EndElement); _bedce && _adgg.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_CrossBetween() *CT_CrossBetween {
	_gegd := &CT_CrossBetween{}
	_gegd.ValAttr = ST_CrossBetween(1)
	return _gegd
}

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_gcce *CT_Boolean) ValidateWithPath(path string) error { return nil }

func (_febf *CT_RadarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gdce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_febf.RadarStyle, _gdce)
	if _febf.VaryColors != nil {
		_cecda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_febf.VaryColors, _cecda)
	}
	if _febf.Ser != nil {
		_eabce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ddefa := range _febf.Ser {
			e.EncodeElement(_ddefa, _eabce)
		}
	}
	if _febf.DLbls != nil {
		_agfbd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_febf.DLbls, _agfbd)
	}
	_cbcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _gdfe := range _febf.AxId {
		e.EncodeElement(_gdfe, _cbcg)
	}
	if _febf.ExtLst != nil {
		_deec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febf.ExtLst, _deec)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_afgbf ST_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_afgbf.String(), start)
}

type CT_Surface3DChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

func (_ffgdg *CT_PieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_facf:
	for {
		_cfffcc, _fddgd := d.Token()
		if _fddgd != nil {
			return _fddgd
		}
		switch _edcc := _cfffcc.(type) {
		case _e.StartElement:
			switch _edcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ffgdg.VaryColors = NewCT_Boolean()
				if _aedf := d.DecodeElement(_ffgdg.VaryColors, &_edcc); _aedf != nil {
					return _aedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_geef := NewCT_PieSer()
				if _acfa := d.DecodeElement(_geef, &_edcc); _acfa != nil {
					return _acfa
				}
				_ffgdg.Ser = append(_ffgdg.Ser, _geef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ffgdg.DLbls = NewCT_DLbls()
				if _dceag := d.DecodeElement(_ffgdg.DLbls, &_edcc); _dceag != nil {
					return _dceag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_ffgdg.FirstSliceAng = NewCT_FirstSliceAng()
				if _cgbg := d.DecodeElement(_ffgdg.FirstSliceAng, &_edcc); _cgbg != nil {
					return _cgbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffgdg.ExtLst = NewCT_ExtensionList()
				if _fbbdb := d.DecodeElement(_ffgdg.ExtLst, &_edcc); _fbbdb != nil {
					return _fbbdb
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _edcc.Name)
				if _cgfc := d.Skip(); _cgfc != nil {
					return _cgfc
				}
			}
		case _e.EndElement:
			break _facf
		case _e.CharData:
		}
	}
	return nil
}

type CT_LineSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_cb.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   *CT_ErrBars
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

type CT_HPercent struct{ ValAttr *ST_HPercent }

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_bdggf *CT_SerAx) ValidateWithPath(path string) error {
	if _ffaeb := _bdggf.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _ffaeb != nil {
		return _ffaeb
	}
	if _aafb := _bdggf.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _aafb != nil {
		return _aafb
	}
	if _bdggf.Delete != nil {
		if _cefcd := _bdggf.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cefcd != nil {
			return _cefcd
		}
	}
	if _dafc := _bdggf.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _dafc != nil {
		return _dafc
	}
	if _bdggf.MajorGridlines != nil {
		if _abcgd := _bdggf.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _abcgd != nil {
			return _abcgd
		}
	}
	if _bdggf.MinorGridlines != nil {
		if _fgcgb := _bdggf.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fgcgb != nil {
			return _fgcgb
		}
	}
	if _bdggf.Title != nil {
		if _dbbbd := _bdggf.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _dbbbd != nil {
			return _dbbbd
		}
	}
	if _bdggf.NumFmt != nil {
		if _aeead := _bdggf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aeead != nil {
			return _aeead
		}
	}
	if _bdggf.MajorTickMark != nil {
		if _cagbb := _bdggf.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cagbb != nil {
			return _cagbb
		}
	}
	if _bdggf.MinorTickMark != nil {
		if _gcfdg := _bdggf.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gcfdg != nil {
			return _gcfdg
		}
	}
	if _bdggf.TickLblPos != nil {
		if _egafg := _bdggf.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _egafg != nil {
			return _egafg
		}
	}
	if _bdggf.SpPr != nil {
		if _aegbd := _bdggf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aegbd != nil {
			return _aegbd
		}
	}
	if _bdggf.TxPr != nil {
		if _dddda := _bdggf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dddda != nil {
			return _dddda
		}
	}
	if _cgaed := _bdggf.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _cgaed != nil {
		return _cgaed
	}
	if _bdggf.Choice != nil {
		if _cfdb := _bdggf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _cfdb != nil {
			return _cfdb
		}
	}
	if _bdggf.TickLblSkip != nil {
		if _gfec := _bdggf.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _gfec != nil {
			return _gfec
		}
	}
	if _bdggf.TickMarkSkip != nil {
		if _cdbag := _bdggf.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _cdbag != nil {
			return _cdbag
		}
	}
	if _bdggf.ExtLst != nil {
		if _edgaa := _bdggf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edgaa != nil {
			return _edgaa
		}
	}
	return nil
}

func (_bgbc *CT_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bgbc.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_bgbc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}

// Validate validates the CT_AxDataSource and its children
func (_gbd *CT_AxDataSource) Validate() error {
	return _gbd.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_abgbd *CT_Scaling) ValidateWithPath(path string) error {
	if _abgbd.LogBase != nil {
		if _bffbe := _abgbd.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _bffbe != nil {
			return _bffbe
		}
	}
	if _abgbd.Orientation != nil {
		if _geagg := _abgbd.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _geagg != nil {
			return _geagg
		}
	}
	if _abgbd.Max != nil {
		if _fagbb := _abgbd.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _fagbb != nil {
			return _fagbb
		}
	}
	if _abgbd.Min != nil {
		if _ffbb := _abgbd.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _ffbb != nil {
			return _ffbb
		}
	}
	if _abgbd.ExtLst != nil {
		if _eebga := _abgbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eebga != nil {
			return _eebga
		}
	}
	return nil
}

// Validate validates the CT_AreaSer and its children
func (_dgb *CT_AreaSer) Validate() error {
	return _dgb.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}

type CT_AxisUnit struct{ ValAttr float64 }

// Validate validates the CT_FirstSliceAng and its children
func (_dcec *CT_FirstSliceAng) Validate() error {
	return _dcec.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}

// Validate validates the CT_BubbleScale and its children
func (_eceb *CT_BubbleScale) Validate() error {
	return _eceb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_bgfa *CT_HPercent) ValidateWithPath(path string) error {
	if _bgfa.ValAttr != nil {
		if _ddcb := _bgfa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ddcb != nil {
			return _ddcb
		}
	}
	return nil
}

func (_dddbde ST_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dddbde.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_dddbde.ST_DepthPercentWithSymbol))
	}
	if _dddbde.ST_DepthPercentUShort != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_dddbde.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type ST_Shape byte

type CT_DoughnutChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	HoleSize      *CT_HoleSize
	ExtLst        *CT_ExtensionList
}

func NewEG_LegendEntryData() *EG_LegendEntryData { _dcead := &EG_LegendEntryData{}; return _dcead }

type CT_BarSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_cb.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          *CT_ErrBars
	Cat              *CT_AxDataSource
	Val              *CT_NumDataSource
	Shape            *CT_Shape
	ExtLst           *CT_ExtensionList
}

func (_efbfb *CT_DispUnits) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _efbfb.Choice != nil {
		_efbfb.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _efbfb.DispUnitsLbl != nil {
		_aeaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_efbfb.DispUnitsLbl, _aeaf)
	}
	if _efbfb.ExtLst != nil {
		_bgdgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efbfb.ExtLst, _bgdgg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_egacf *CT_LblOffset) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bfgd := range start.Attr {
		if _bfgd.Name.Local == "\u0076\u0061\u006c" {
			_bbfff, _bdcab := ParseUnionST_LblOffset(_bfgd.Value)
			if _bdcab != nil {
				return _bdcab
			}
			_egacf.ValAttr = &_bbfff
			continue
		}
	}
	for {
		_cagb, _ecbf := d.Token()
		if _ecbf != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _ecbf)
		}
		if _fdead, _ddad := _cagb.(_e.EndElement); _ddad && _fdead.Name == start.Name {
			break
		}
	}
	return nil
}

func (_eggfb ST_Grouping) String() string {
	switch _eggfb {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_eaaea *CT_PictureFormat) ValidateWithPath(path string) error {
	if _eaaea.ValAttr == ST_PictureFormatUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cgeg := _eaaea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cgeg != nil {
		return _cgeg
	}
	return nil
}

func (_bfacb ST_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bfacb.String(), start)
}

func (_bfgge *EG_LineChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bfgge.Grouping = NewCT_Grouping()
_acebc:
	for {
		_debeg, _dfbff := d.Token()
		if _dfbff != nil {
			return _dfbff
		}
		switch _fbef := _debeg.(type) {
		case _e.StartElement:
			switch _fbef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _cdaeb := d.DecodeElement(_bfgge.Grouping, &_fbef); _cdaeb != nil {
					return _cdaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bfgge.VaryColors = NewCT_Boolean()
				if _bbef := d.DecodeElement(_bfgge.VaryColors, &_fbef); _bbef != nil {
					return _bbef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggcag := NewCT_LineSer()
				if _egca := d.DecodeElement(_ggcag, &_fbef); _egca != nil {
					return _egca
				}
				_bfgge.Ser = append(_bfgge.Ser, _ggcag)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bfgge.DLbls = NewCT_DLbls()
				if _daaeg := d.DecodeElement(_bfgge.DLbls, &_fbef); _daaeg != nil {
					return _daaeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bfgge.DropLines = NewCT_ChartLines()
				if _gbbg := d.DecodeElement(_bfgge.DropLines, &_fbef); _gbbg != nil {
					return _gbbg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _fbef.Name)
				if _baeafd := d.Skip(); _baeafd != nil {
					return _baeafd
				}
			}
		case _e.EndElement:
			break _acebc
		case _e.CharData:
		}
	}
	return nil
}

func (_eac *CT_AxDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eac.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_PageMargins() *CT_PageMargins { _adffg := &CT_PageMargins{}; return _adffg }

func (_aedad *ST_ErrBarType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_aedad = 0
	case "\u0062\u006f\u0074\u0068":
		*_aedad = 1
	case "\u006d\u0069\u006eu\u0073":
		*_aedad = 2
	case "\u0070\u006c\u0075\u0073":
		*_aedad = 3
	}
	return nil
}

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_eaeec *CT_StrRef) ValidateWithPath(path string) error {
	if _eaeec.StrCache != nil {
		if _dfecb := _eaeec.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _dfecb != nil {
			return _dfecb
		}
	}
	if _eaeec.ExtLst != nil {
		if _dcdebg := _eaeec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcdebg != nil {
			return _dcdebg
		}
	}
	return nil
}

type CT_ScatterChart struct {
	ScatterStyle *CT_ScatterStyle
	VaryColors   *CT_Boolean
	Ser          []*CT_ScatterSer
	DLbls        *CT_DLbls
	AxId         []*CT_UnsignedInt
	ExtLst       *CT_ExtensionList
}

type CT_Extension struct {
	UriAttr *string
	Any     _ba.Any
}

func (_aaefg ST_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_aaefg.String(), start)
}

func (_bccg *ST_TimeUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bccg = 0
	case "\u0064\u0061\u0079\u0073":
		*_bccg = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_bccg = 2
	case "\u0079\u0065\u0061r\u0073":
		*_bccg = 3
	}
	return nil
}

func (_ceega *CT_TextLanguageID) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _ceega.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_aagg ST_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_aagg.String(), start)
}

const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

type CT_DispUnitsLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_cb.CT_ShapeProperties
	TxPr   *_cb.CT_TextBody
}

func NewCT_DLbl() *CT_DLbl { _begc := &CT_DLbl{}; _begc.Idx = NewCT_UnsignedInt(); return _begc }

func (_abgda ST_ErrValType) Validate() error { return _abgda.ValidateWithPath("") }

func (_dgecaa ST_ScatterStyle) Validate() error { return _dgecaa.ValidateWithPath("") }

func NewCT_Perspective() *CT_Perspective { _fbfa := &CT_Perspective{}; return _fbfa }

type CT_PieChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	ExtLst        *CT_ExtensionList
}

func (_addbe *ST_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ffbfg, _ddaebb := d.Token()
	if _ddaebb != nil {
		return _ddaebb
	}
	if _fdffa, _fdaab := _ffbfg.(_e.EndElement); _fdaab && _fdffa.Name == start.Name {
		*_addbe = 1
		return nil
	}
	if _dfega, _efaga := _ffbfg.(_e.CharData); !_efaga {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffbfg)
	} else {
		switch string(_dfega) {
		case "":
			*_addbe = 0
		case "\u0061\u0072\u0065\u0061":
			*_addbe = 1
		case "\u0077":
			*_addbe = 2
		}
	}
	_ffbfg, _ddaebb = d.Token()
	if _ddaebb != nil {
		return _ddaebb
	}
	if _aafc, _ebeaf := _ffbfg.(_e.EndElement); _ebeaf && _aafc.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffbfg)
}

func (_faeffa *CT_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _faeffa.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_faeffa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_SizeRepresents() *CT_SizeRepresents { _bbfb := &CT_SizeRepresents{}; return _bbfb }

func NewCT_RotX() *CT_RotX { _dbefb := &CT_RotX{}; return _dbefb }

func (_gdagc *CT_NumDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdagc.Choice = NewCT_NumDataSourceChoice()
_fgaae:
	for {
		_bfeeb, _aacg := d.Token()
		if _aacg != nil {
			return _aacg
		}
		switch _edcf := _bfeeb.(type) {
		case _e.StartElement:
			switch _edcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_gdagc.Choice = NewCT_NumDataSourceChoice()
				if _beac := d.DecodeElement(&_gdagc.Choice.NumRef, &_edcf); _beac != nil {
					return _beac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_gdagc.Choice = NewCT_NumDataSourceChoice()
				if _deebd := d.DecodeElement(&_gdagc.Choice.NumLit, &_edcf); _deebd != nil {
					return _deebd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _edcf.Name)
				if _dgebd := d.Skip(); _dgebd != nil {
					return _dgebd
				}
			}
		case _e.EndElement:
			break _fgaae
		case _e.CharData:
		}
	}
	return nil
}

func (_gcef ST_OfPieType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cddbf := _e.Attr{}
	_cddbf.Name = name
	switch _gcef {
	case ST_OfPieTypeUnset:
		_cddbf.Value = ""
	case ST_OfPieTypePie:
		_cddbf.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_cddbf.Value = "\u0062\u0061\u0072"
	}
	return _cddbf, nil
}

func (_bbff *CT_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bbff.DLbl != nil {
		_aeagb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _ecg := range _bbff.DLbl {
			e.EncodeElement(_ecg, _aeagb)
		}
	}
	if _bbff.Choice != nil {
		_bbff.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _bbff.ExtLst != nil {
		_abfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbff.ExtLst, _abfb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LogBase() *CT_LogBase { _adfge := &CT_LogBase{}; _adfge.ValAttr = 2; return _adfge }

// Validate validates the CT_DispBlanksAs and its children
func (_eacd *CT_DispBlanksAs) Validate() error {
	return _eacd.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_cb.CT_TextBody
}

func NewCT_OfPieType() *CT_OfPieType { _egga := &CT_OfPieType{}; return _egga }

func NewCT_BuiltInUnit() *CT_BuiltInUnit { _bfed := &CT_BuiltInUnit{}; return _bfed }

func (_ecabg *ST_SecondPieSize) Validate() error { return _ecabg.ValidateWithPath("") }

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_fabe *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _fabe.Delete != nil {
		if _dbde := _fabe.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _dbde != nil {
			return _dbde
		}
	}
	if _fabe.NumFmt != nil {
		if _bdee := _fabe.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bdee != nil {
			return _bdee
		}
	}
	if _fabe.SpPr != nil {
		if _ebdd := _fabe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ebdd != nil {
			return _ebdd
		}
	}
	if _fabe.TxPr != nil {
		if _dbbd := _fabe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dbbd != nil {
			return _dbbd
		}
	}
	if _fabe.DLblPos != nil {
		if _ccgf := _fabe.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _ccgf != nil {
			return _ccgf
		}
	}
	if _fabe.ShowLegendKey != nil {
		if _gfgg := _fabe.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _gfgg != nil {
			return _gfgg
		}
	}
	if _fabe.ShowVal != nil {
		if _dacg := _fabe.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _dacg != nil {
			return _dacg
		}
	}
	if _fabe.ShowCatName != nil {
		if _fccd := _fabe.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _fccd != nil {
			return _fccd
		}
	}
	if _fabe.ShowSerName != nil {
		if _gecf := _fabe.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _gecf != nil {
			return _gecf
		}
	}
	if _fabe.ShowPercent != nil {
		if _cgbd := _fabe.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _cgbd != nil {
			return _cgbd
		}
	}
	if _fabe.ShowBubbleSize != nil {
		if _efgg := _fabe.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _efgg != nil {
			return _efgg
		}
	}
	if _fabe.ShowLeaderLines != nil {
		if _edbg := _fabe.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _edbg != nil {
			return _edbg
		}
	}
	if _fabe.LeaderLines != nil {
		if _fdee := _fabe.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _fdee != nil {
			return _fdee
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsLbl and its children
func (_gggg *CT_DispUnitsLbl) Validate() error {
	return _gggg.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}

func (_defe *CT_BarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_defe.BarDir, _dfe)
	if _defe.Grouping != nil {
		_cfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_defe.Grouping, _cfb)
	}
	if _defe.VaryColors != nil {
		_ead := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_defe.VaryColors, _ead)
	}
	if _defe.Ser != nil {
		_bgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ddf := range _defe.Ser {
			e.EncodeElement(_ddf, _bgf)
		}
	}
	if _defe.DLbls != nil {
		_ffe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_defe.DLbls, _ffe)
	}
	if _defe.GapWidth != nil {
		_ecb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_defe.GapWidth, _ecb)
	}
	if _defe.Overlap != nil {
		_daeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_defe.Overlap, _daeg)
	}
	if _defe.SerLines != nil {
		_baab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _cde := range _defe.SerLines {
			e.EncodeElement(_cde, _baab)
		}
	}
	_babfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _caa := range _defe.AxId {
		e.EncodeElement(_caa, _babfb)
	}
	if _defe.ExtLst != nil {
		_ebc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_defe.ExtLst, _ebc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LineSer and its children
func (_cfdeg *CT_LineSer) Validate() error {
	return _cfdeg.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}

// Validate validates the CT_Grouping and its children
func (_cbbff *CT_Grouping) Validate() error {
	return _cbbff.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}

func (_fgce *CT_PlotArea) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fgce.Layout != nil {
		_feef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fgce.Layout, _feef)
	}
	for _, _cfedf := range _fgce.Choice {
		_cfedf.MarshalXML(e, _e.StartElement{})
	}
	if _fgce.CChoice != nil {
		_fgce.CChoice.MarshalXML(e, _e.StartElement{})
	}
	if _fgce.DTable != nil {
		_cagf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_fgce.DTable, _cagf)
	}
	if _fgce.SpPr != nil {
		_cecfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fgce.SpPr, _cecfa)
	}
	if _fgce.ExtLst != nil {
		_gacfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgce.ExtLst, _gacfa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_RotX and its children
func (_gefa *CT_RotX) Validate() error {
	return _gefa.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}

type CT_LblAlgn struct{ ValAttr ST_LblAlgn }

func NewCT_DTable() *CT_DTable { _gcbeg := &CT_DTable{}; return _gcbeg }

// Validate validates the CT_TickMark and its children
func (_dfada *CT_TickMark) Validate() error {
	return _dfada.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}

func (_fcba *CT_ErrBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fcba.ErrDir != nil {
		_agda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_fcba.ErrDir, _agda)
	}
	_gfbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_fcba.ErrBarType, _gfbf)
	_bbga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_fcba.ErrValType, _bbga)
	if _fcba.NoEndCap != nil {
		_dcdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_fcba.NoEndCap, _dcdb)
	}
	if _fcba.Plus != nil {
		_aabg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_fcba.Plus, _aabg)
	}
	if _fcba.Minus != nil {
		_daag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_fcba.Minus, _daag)
	}
	if _fcba.Val != nil {
		_beabf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fcba.Val, _beabf)
	}
	if _fcba.SpPr != nil {
		_faaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcba.SpPr, _faaf)
	}
	if _fcba.ExtLst != nil {
		_fcgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcba.ExtLst, _fcgb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_MarkerStyle() *CT_MarkerStyle {
	_eeabe := &CT_MarkerStyle{}
	_eeabe.ValAttr = ST_MarkerStyle(1)
	return _eeabe
}

func (_decacf *ST_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_becdg, _bffd := d.Token()
	if _bffd != nil {
		return _bffd
	}
	if _cffeg, _gfgff := _becdg.(_e.EndElement); _gfgff && _cffeg.Name == start.Name {
		*_decacf = 1
		return nil
	}
	if _efdbg, _befcg := _becdg.(_e.CharData); !_befcg {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _becdg)
	} else {
		switch string(_efdbg) {
		case "":
			*_decacf = 0
		case "\u0063\u006f\u006e\u0065":
			*_decacf = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_decacf = 2
		case "\u0062\u006f\u0078":
			*_decacf = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_decacf = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_decacf = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_decacf = 6
		}
	}
	_becdg, _bffd = d.Token()
	if _bffd != nil {
		return _bffd
	}
	if _fdeaf, _fabef := _becdg.(_e.EndElement); _fabef && _fdeaf.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _becdg)
}

// Validate validates the UserShapes and its children
func (_bfccd *UserShapes) Validate() error {
	return _bfccd.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_fddaf *CT_Marker) ValidateWithPath(path string) error {
	if _fddaf.Symbol != nil {
		if _daacg := _fddaf.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _daacg != nil {
			return _daacg
		}
	}
	if _fddaf.Size != nil {
		if _ccga := _fddaf.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _ccga != nil {
			return _ccga
		}
	}
	if _fddaf.SpPr != nil {
		if _cabg := _fddaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cabg != nil {
			return _cabg
		}
	}
	if _fddaf.ExtLst != nil {
		if _cgdcb := _fddaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgdcb != nil {
			return _cgdcb
		}
	}
	return nil
}

type CT_DateAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblOffset      *CT_LblOffset
	BaseTimeUnit   *CT_TimeUnit
	MajorUnit      *CT_AxisUnit
	MajorTimeUnit  *CT_TimeUnit
	MinorUnit      *CT_AxisUnit
	MinorTimeUnit  *CT_TimeUnit
	ExtLst         *CT_ExtensionList
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_aaafg *CT_TickLblPos) ValidateWithPath(path string) error {
	if _eeda := _aaafg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eeda != nil {
		return _eeda
	}
	return nil
}

var ST_SecondPieSizePercentPatternRe = _ef.MustCompile(ST_SecondPieSizePercentPattern)

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_agceb *CT_Trendline) ValidateWithPath(path string) error {
	if _agceb.SpPr != nil {
		if _bgfg := _agceb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgfg != nil {
			return _bgfg
		}
	}
	if _efabg := _agceb.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _efabg != nil {
		return _efabg
	}
	if _agceb.Order != nil {
		if _efefd := _agceb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _efefd != nil {
			return _efefd
		}
	}
	if _agceb.Period != nil {
		if _eddgf := _agceb.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _eddgf != nil {
			return _eddgf
		}
	}
	if _agceb.Forward != nil {
		if _bcecd := _agceb.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _bcecd != nil {
			return _bcecd
		}
	}
	if _agceb.Backward != nil {
		if _befeg := _agceb.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _befeg != nil {
			return _befeg
		}
	}
	if _agceb.Intercept != nil {
		if _febbf := _agceb.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _febbf != nil {
			return _febbf
		}
	}
	if _agceb.DispRSqr != nil {
		if _dgbgd := _agceb.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _dgbgd != nil {
			return _dgbgd
		}
	}
	if _agceb.DispEq != nil {
		if _feaab := _agceb.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _feaab != nil {
			return _feaab
		}
	}
	if _agceb.TrendlineLbl != nil {
		if _becae := _agceb.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _becae != nil {
			return _becae
		}
	}
	if _agceb.ExtLst != nil {
		if _cbbeg := _agceb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbbeg != nil {
			return _cbbeg
		}
	}
	return nil
}

func (_ebeff *ST_LegendPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ebeff = 0
	case "\u0062":
		*_ebeff = 1
	case "\u0074\u0072":
		*_ebeff = 2
	case "\u006c":
		*_ebeff = 3
	case "\u0072":
		*_ebeff = 4
	case "\u0074":
		*_ebeff = 5
	}
	return nil
}

func NewCT_Grouping() *CT_Grouping { _fgcf := &CT_Grouping{}; return _fgcf }

func (_cabgf ST_DLblPos) ValidateWithPath(path string) error {
	switch _cabgf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cabgf))
	}
	return nil
}

type CT_LineChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	Marker     *CT_Boolean
	Smooth     *CT_Boolean
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

type CT_BarGrouping struct{ ValAttr ST_BarGrouping }

type CT_ErrBarType struct{ ValAttr ST_ErrBarType }

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

func (_dccff ST_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dccff.String(), start)
}

func (_edeb *CT_NumVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bcce := range start.Attr {
		if _bcce.Name.Local == "\u0069\u0064\u0078" {
			_caea, _adff := _b.ParseUint(_bcce.Value, 10, 32)
			if _adff != nil {
				return _adff
			}
			_edeb.IdxAttr = uint32(_caea)
			continue
		}
		if _bcce.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_eabde, _debd := _bcce.Value, error(nil)
			if _debd != nil {
				return _debd
			}
			_edeb.FormatCodeAttr = &_eabde
			continue
		}
	}
_bdae:
	for {
		_eafaa, _bdeg := d.Token()
		if _bdeg != nil {
			return _bdeg
		}
		switch _adfea := _eafaa.(type) {
		case _e.StartElement:
			switch _adfea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _agag := d.DecodeElement(&_edeb.V, &_adfea); _agag != nil {
					return _agag
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _adfea.Name)
				if _badgc := d.Skip(); _badgc != nil {
					return _badgc
				}
			}
		case _e.EndElement:
			break _bdae
		case _e.CharData:
		}
	}
	return nil
}

func (_fbab *CT_PlotAreaChoice1) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fbab.ValAx != nil {
		_eebae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		for _, _beff := range _fbab.ValAx {
			e.EncodeElement(_beff, _eebae)
		}
	}
	if _fbab.CatAx != nil {
		_gaeee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		for _, _abde := range _fbab.CatAx {
			e.EncodeElement(_abde, _gaeee)
		}
	}
	if _fbab.DateAx != nil {
		_bccb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		for _, _abbf := range _fbab.DateAx {
			e.EncodeElement(_abbf, _bccb)
		}
	}
	if _fbab.SerAx != nil {
		_bcgdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		for _, _dcce := range _fbab.SerAx {
			e.EncodeElement(_dcce, _bcgdf)
		}
	}
	return nil
}

type CT_PlotArea struct {
	Layout  *CT_Layout
	Choice  []*CT_PlotAreaChoice
	CChoice *CT_PlotAreaChoice1
	DTable  *CT_DTable
	SpPr    *_cb.CT_ShapeProperties
	ExtLst  *CT_ExtensionList
}

func (_agfg *CT_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _agfg.ValAttr != ST_RadarStyleUnset {
		_gcffc, _gbef := _agfg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gbef != nil {
			return _gbef
		}
		start.Attr = append(start.Attr, _gcffc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_UnsignedInt() *CT_UnsignedInt { _gfcg := &CT_UnsignedInt{}; return _gfcg }

func NewCT_NumRef() *CT_NumRef { _cagdg := &CT_NumRef{}; return _cagdg }

func (_eabgb *ST_LblOffset) Validate() error { return _eabgb.ValidateWithPath("") }

// Validate validates the CT_ExtensionList and its children
func (_gfegb *CT_ExtensionList) Validate() error {
	return _gfegb.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}

// Validate validates the CT_Layout and its children
func (_cafd *CT_Layout) Validate() error {
	return _cafd.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}

// Validate validates the CT_AreaChart and its children
func (_effe *CT_AreaChart) Validate() error {
	return _effe.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}

func NewEG_LineChartShared() *EG_LineChartShared {
	_cbecf := &EG_LineChartShared{}
	_cbecf.Grouping = NewCT_Grouping()
	return _cbecf
}

func NewCT_Period() *CT_Period { _ffab := &CT_Period{}; return _ffab }

type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt
	Lvl     []*CT_Lvl
	ExtLst  *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_bcgab *CT_NumVal) ValidateWithPath(path string) error { return nil }

func (_dgagea ST_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dgagea.String(), start)
}

func (_fdbae *CT_PivotSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gegbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_ba.AddPreserveSpaceAttr(&_gegbd, _fdbae.Name)
	e.EncodeElement(_fdbae.Name, _gegbd)
	_ecbd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_fdbae.FmtId, _ecbd)
	if _fdbae.ExtLst != nil {
		_cffg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _bbgga := range _fdbae.ExtLst {
			e.EncodeElement(_bbgga, _cffg)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _efdb := &CT_MultiLvlStrRef{}; return _efdb }

type CT_Scaling struct {
	LogBase     *CT_LogBase
	Orientation *CT_Orientation
	Max         *CT_Double
	Min         *CT_Double
	ExtLst      *CT_ExtensionList
}

// Validate validates the ChartSpace and its children
func (_fffce *ChartSpace) Validate() error {
	return _fffce.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

type CT_Boolean struct{ ValAttr *bool }

func NewChart() *Chart { _ecgb := &Chart{}; _ecgb.CT_RelId = *NewCT_RelId(); return _ecgb }

func NewUserShapes() *UserShapes {
	_fabcg := &UserShapes{}
	_fabcg.CT_Drawing = *_d.NewCT_Drawing()
	return _fabcg
}

func (_afbdc ST_AxPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cafe := _e.Attr{}
	_cafe.Name = name
	switch _afbdc {
	case ST_AxPosUnset:
		_cafe.Value = ""
	case ST_AxPosB:
		_cafe.Value = "\u0062"
	case ST_AxPosL:
		_cafe.Value = "\u006c"
	case ST_AxPosR:
		_cafe.Value = "\u0072"
	case ST_AxPosT:
		_cafe.Value = "\u0074"
	}
	return _cafe, nil
}

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_afcbf *CT_Period) ValidateWithPath(path string) error {
	if _afcbf.ValAttr != nil {
		if *_afcbf.ValAttr < 2 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_afcbf.ValAttr)
		}
	}
	return nil
}

func (_eaeca *EG_PieChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cdaebg:
	for {
		_dcgdg, _baacg := d.Token()
		if _baacg != nil {
			return _baacg
		}
		switch _geeed := _dcgdg.(type) {
		case _e.StartElement:
			switch _geeed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eaeca.VaryColors = NewCT_Boolean()
				if _bcdgc := d.DecodeElement(_eaeca.VaryColors, &_geeed); _bcdgc != nil {
					return _bcdgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ddcfc := NewCT_PieSer()
				if _adgca := d.DecodeElement(_ddcfc, &_geeed); _adgca != nil {
					return _adgca
				}
				_eaeca.Ser = append(_eaeca.Ser, _ddcfc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eaeca.DLbls = NewCT_DLbls()
				if _bddcf := d.DecodeElement(_eaeca.DLbls, &_geeed); _bddcf != nil {
					return _bddcf
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _geeed.Name)
				if _gbgad := d.Skip(); _gbgad != nil {
					return _gbgad
				}
			}
		case _e.EndElement:
			break _cdaebg
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_DispUnits() *CT_DispUnits { _dagge := &CT_DispUnits{}; return _dagge }

func (_ffgd *CT_DLblChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ffgd.Delete != nil {
		_eeacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ffgd.Delete, _eeacg)
	}
	if _ffgd.Layout != nil {
		_gefc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_ffgd.Layout, _gefc)
	}
	if _ffgd.Tx != nil {
		_deaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ffgd.Tx, _deaf)
	}
	if _ffgd.NumFmt != nil {
		_bddf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ffgd.NumFmt, _bddf)
	}
	if _ffgd.SpPr != nil {
		_eecf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ffgd.SpPr, _eecf)
	}
	if _ffgd.TxPr != nil {
		_feff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ffgd.TxPr, _feff)
	}
	if _ffgd.DLblPos != nil {
		_efcge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_ffgd.DLblPos, _efcge)
	}
	if _ffgd.ShowLegendKey != nil {
		_bdfg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_ffgd.ShowLegendKey, _bdfg)
	}
	if _ffgd.ShowVal != nil {
		_bggda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_ffgd.ShowVal, _bggda)
	}
	if _ffgd.ShowCatName != nil {
		_bddb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ffgd.ShowCatName, _bddb)
	}
	if _ffgd.ShowSerName != nil {
		_daa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_ffgd.ShowSerName, _daa)
	}
	if _ffgd.ShowPercent != nil {
		_efae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_ffgd.ShowPercent, _efae)
	}
	if _ffgd.ShowBubbleSize != nil {
		_ccbcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ffgd.ShowBubbleSize, _ccbcc)
	}
	if _ffgd.Separator != nil {
		_cfec := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_ba.AddPreserveSpaceAttr(&_cfec, *_ffgd.Separator)
		e.EncodeElement(_ffgd.Separator, _cfec)
	}
	return nil
}

func (_feadf *EG_SerShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_feadf.Idx = NewCT_UnsignedInt()
	_feadf.Order = NewCT_UnsignedInt()
_feacf:
	for {
		_cfdad, _gbfbcg := d.Token()
		if _gbfbcg != nil {
			return _gbfbcg
		}
		switch _gdebf := _cfdad.(type) {
		case _e.StartElement:
			switch _gdebf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gaceac := d.DecodeElement(_feadf.Idx, &_gdebf); _gaceac != nil {
					return _gaceac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cgeca := d.DecodeElement(_feadf.Order, &_gdebf); _cgeca != nil {
					return _cgeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_feadf.Tx = NewCT_SerTx()
				if _efgdf := d.DecodeElement(_feadf.Tx, &_gdebf); _efgdf != nil {
					return _efgdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_feadf.SpPr = _cb.NewCT_ShapeProperties()
				if _dfcc := d.DecodeElement(_feadf.SpPr, &_gdebf); _dfcc != nil {
					return _dfcc
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _gdebf.Name)
				if _bfebg := d.Skip(); _bfebg != nil {
					return _bfebg
				}
			}
		case _e.EndElement:
			break _feacf
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_PivotFmt() *CT_PivotFmt {
	_bebab := &CT_PivotFmt{}
	_bebab.Idx = NewCT_UnsignedInt()
	return _bebab
}

func (_edbab ST_ErrBarType) String() string {
	switch _edbab {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}

func (_acgfb *CT_DispUnitsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_defdg:
	for {
		_bacf, _fgadc := d.Token()
		if _fgadc != nil {
			return _fgadc
		}
		switch _dbdd := _bacf.(type) {
		case _e.StartElement:
			switch _dbdd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_acgfb.CustUnit = NewCT_Double()
				if _efeg := d.DecodeElement(_acgfb.CustUnit, &_dbdd); _efeg != nil {
					return _efeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_acgfb.BuiltInUnit = NewCT_BuiltInUnit()
				if _bbaa := d.DecodeElement(_acgfb.BuiltInUnit, &_dbdd); _bbaa != nil {
					return _bbaa
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dbdd.Name)
				if _aegc := d.Skip(); _aegc != nil {
					return _aegc
				}
			}
		case _e.EndElement:
			break _defdg
		case _e.CharData:
		}
	}
	return nil
}

func (_fcfc *ST_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cdgad, _ecbfb := d.Token()
	if _ecbfb != nil {
		return _ecbfb
	}
	if _ebag, _cbege := _cdgad.(_e.EndElement); _cbege && _ebag.Name == start.Name {
		*_fcfc = 1
		return nil
	}
	if _eacce, _gafec := _cdgad.(_e.CharData); !_gafec {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cdgad)
	} else {
		switch string(_eacce) {
		case "":
			*_fcfc = 0
		case "\u0069\u006e\u006ee\u0072":
			*_fcfc = 1
		case "\u006f\u0075\u0074e\u0072":
			*_fcfc = 2
		}
	}
	_cdgad, _ecbfb = d.Token()
	if _ecbfb != nil {
		return _ecbfb
	}
	if _faaec, _gaadc := _cdgad.(_e.EndElement); _gaadc && _faaec.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cdgad)
}

func NewCT_LegendPos() *CT_LegendPos { _gfgc := &CT_LegendPos{}; return _gfgc }

type CT_UnsignedInt struct{ ValAttr uint32 }

func NewCT_TimeUnit() *CT_TimeUnit { _eafed := &CT_TimeUnit{}; return _eafed }

func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 { _gfggd := &CT_PlotAreaChoice1{}; return _gfggd }

func (_cagg *CT_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cagg.ValAttr != ST_LayoutTargetUnset {
		_dcfec, _gfbce := _cagg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gfbce != nil {
			return _gfbce
		}
		start.Attr = append(start.Attr, _dcfec)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_StrRef struct {
	F        string
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

func (_egfgg *CT_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_egfgg.ValAttr = ST_MarkerStyle(1)
	for _, _edafc := range start.Attr {
		if _edafc.Name.Local == "\u0076\u0061\u006c" {
			_egfgg.ValAttr.UnmarshalXMLAttr(_edafc)
			continue
		}
	}
	for {
		_ceedf, _gdacb := d.Token()
		if _gdacb != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _gdacb)
		}
		if _beaa, _gabaa := _ceedf.(_e.EndElement); _gabaa && _beaa.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Style struct{ ValAttr uint8 }

type CT_ScatterStyle struct{ ValAttr ST_ScatterStyle }

// Validate validates the CT_Shape and its children
func (_gfedf *CT_Shape) Validate() error {
	return _gfedf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

// Validate validates the CT_SerTx and its children
func (_aeeag *CT_SerTx) Validate() error {
	return _aeeag.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}

// Validate validates the CT_RadarChart and its children
func (_aacbf *CT_RadarChart) Validate() error {
	return _aacbf.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

func NewCT_CustSplit() *CT_CustSplit { _babd := &CT_CustSplit{}; return _babd }

// Validate validates the CT_BarGrouping and its children
func (_fgg *CT_BarGrouping) Validate() error {
	return _fgg.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}

func (_eebacd *CT_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ceca := range start.Attr {
		if _ceca.Name.Local == "\u0076\u0061\u006c" {
			_eebacd.ValAttr.UnmarshalXMLAttr(_ceca)
			continue
		}
	}
	for {
		_fddge, _caac := d.Token()
		if _caac != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _caac)
		}
		if _bddc, _cgcg := _fddge.(_e.EndElement); _cgcg && _bddc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Line3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_ggag ST_LayoutMode) ValidateWithPath(path string) error {
	switch _ggag {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggag))
	}
	return nil
}

func (_eggg *CT_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dafged := range start.Attr {
		if _dafged.Name.Local == "\u0076\u0061\u006c" {
			_eggg.ValAttr.UnmarshalXMLAttr(_dafged)
			continue
		}
	}
	for {
		_fcbba, _ffccb := d.Token()
		if _ffccb != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _ffccb)
		}
		if _ebede, _defdca := _fcbba.(_e.EndElement); _defdca && _ebede.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cgca ST_RadarStyle) String() string {
	switch _cgca {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}

type CT_Layout struct {
	ManualLayout *CT_ManualLayout
	ExtLst       *CT_ExtensionList
}

// Validate validates the CT_SecondPieSize and its children
func (_gagc *CT_SecondPieSize) Validate() error {
	return _gagc.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

func (_abbgg *ST_HoleSize) Validate() error { return _abbgg.ValidateWithPath("") }

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

func (_gfbaa ST_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gfbaa.String(), start)
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_gbdde *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _cfabc := _gbdde.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cfabc != nil {
		return _cfabc
	}
	return nil
}

func (_ddfeb *CT_ExtensionList) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ddfeb.Ext != nil {
		_caga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _efdc := range _ddfeb.Ext {
			e.EncodeElement(_efdc, _caga)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eaaga ST_LblAlgn) String() string {
	switch _eaaga {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}

func NewCT_LblOffset() *CT_LblOffset { _bfff := &CT_LblOffset{}; return _bfff }

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_cdbdd *CT_Crosses) ValidateWithPath(path string) error {
	if _cdbdd.ValAttr == ST_CrossesUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gead := _cdbdd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gead != nil {
		return _gead
	}
	return nil
}

func (_cbcdc *CT_Surface) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cbcdc.Thickness != nil {
		_cbdfga := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_cbcdc.Thickness, _cbdfga)
	}
	if _cbcdc.SpPr != nil {
		_eacbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cbcdc.SpPr, _eacbc)
	}
	if _cbcdc.PictureOptions != nil {
		_faecc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_cbcdc.PictureOptions, _faecc)
	}
	if _cbcdc.ExtLst != nil {
		_geaeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbcdc.ExtLst, _geaeb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

func (_afafg *ST_HPercent) ValidateWithPath(path string) error {
	_eacdcb := []string{}
	if _afafg.ST_HPercentWithSymbol != nil {
		_eacdcb = append(_eacdcb, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _afafg.ST_HPercentUShort != nil {
		_eacdcb = append(_eacdcb, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_eacdcb) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _eacdcb)
	}
	return nil
}

func (_ebfa *CT_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ebfa.ValAttr != ST_ErrBarTypeUnset {
		_gfdc, _fbbc := _ebfa.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fbbc != nil {
			return _fbbc
		}
		start.Attr = append(start.Attr, _gfdc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LegendEntry() *CT_LegendEntry {
	_gdagg := &CT_LegendEntry{}
	_gdagg.Idx = NewCT_UnsignedInt()
	return _gdagg
}

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_aecc *CT_RadarChart) ValidateWithPath(path string) error {
	if _daecf := _aecc.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _daecf != nil {
		return _daecf
	}
	if _aecc.VaryColors != nil {
		if _fdeb := _aecc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fdeb != nil {
			return _fdeb
		}
	}
	for _accee, _ccgg := range _aecc.Ser {
		if _dafgb := _ccgg.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _accee)); _dafgb != nil {
			return _dafgb
		}
	}
	if _aecc.DLbls != nil {
		if _gaaag := _aecc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gaaag != nil {
			return _gaaag
		}
	}
	for _fcdbc, _cffbd := range _aecc.AxId {
		if _ceae := _cffbd.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fcdbc)); _ceae != nil {
			return _ceae
		}
	}
	if _aecc.ExtLst != nil {
		if _gcbcb := _aecc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcbcb != nil {
			return _gcbcb
		}
	}
	return nil
}

// Validate validates the CT_UpDownBar and its children
func (_geefe *CT_UpDownBar) Validate() error {
	return _geefe.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}

// Validate validates the CT_ErrValType and its children
func (_caag *CT_ErrValType) Validate() error {
	return _caag.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}

func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _becbe := &CT_PlotAreaChoice{}; return _becbe }

// Validate validates the CT_Skip and its children
func (_abcgg *CT_Skip) Validate() error {
	return _abcgg.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}

func (_bafa *CT_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bafa.ValAttr != ST_BuiltInUnitUnset {
		_dbbg, _bgdc := _bafa.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _bgdc != nil {
			return _bgdc
		}
		start.Attr = append(start.Attr, _dbbg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gceb *CT_Tx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gceb.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_DLblsChoice struct {
	Delete          *CT_Boolean
	NumFmt          *CT_NumFmt
	SpPr            *_cb.CT_ShapeProperties
	TxPr            *_cb.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

// Validate validates the CT_NumDataSource and its children
func (_bcfag *CT_NumDataSource) Validate() error {
	return _bcfag.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

// Validate validates the CT_LblOffset and its children
func (_dcadc *CT_LblOffset) Validate() error {
	return _dcadc.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}

// Validate validates the CT_StrData and its children
func (_afaff *CT_StrData) Validate() error {
	return _afaff.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}

func (_ddab *CT_Overlap) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gbcf := range start.Attr {
		if _gbcf.Name.Local == "\u0076\u0061\u006c" {
			_cgebe, _afea := ParseUnionST_Overlap(_gbcf.Value)
			if _afea != nil {
				return _afea
			}
			_ddab.ValAttr = &_cgebe
			continue
		}
	}
	for {
		_adcaf, _bede := d.Token()
		if _bede != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _bede)
		}
		if _baecbg, _beecd := _adcaf.(_e.EndElement); _beecd && _baecbg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_ManualLayout struct {
	LayoutTarget *CT_LayoutTarget
	XMode        *CT_LayoutMode
	YMode        *CT_LayoutMode
	WMode        *CT_LayoutMode
	HMode        *CT_LayoutMode
	X            *CT_Double
	Y            *CT_Double
	W            *CT_Double
	H            *CT_Double
	ExtLst       *CT_ExtensionList
}

func (_dceda *CT_SurfaceChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gffbf:
	for {
		_dgbbb, _eaaec := d.Token()
		if _eaaec != nil {
			return _eaaec
		}
		switch _fgcgg := _dgbbb.(type) {
		case _e.StartElement:
			switch _fgcgg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_dceda.Wireframe = NewCT_Boolean()
				if _bgacf := d.DecodeElement(_dceda.Wireframe, &_fgcgg); _bgacf != nil {
					return _bgacf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_badeg := NewCT_SurfaceSer()
				if _aagbe := d.DecodeElement(_badeg, &_fgcgg); _aagbe != nil {
					return _aagbe
				}
				_dceda.Ser = append(_dceda.Ser, _badeg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_dceda.BandFmts = NewCT_BandFmts()
				if _adeaf := d.DecodeElement(_dceda.BandFmts, &_fgcgg); _adeaf != nil {
					return _adeaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_eaad := NewCT_UnsignedInt()
				if _fdff := d.DecodeElement(_eaad, &_fgcgg); _fdff != nil {
					return _fdff
				}
				_dceda.AxId = append(_dceda.AxId, _eaad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dceda.ExtLst = NewCT_ExtensionList()
				if _aega := d.DecodeElement(_dceda.ExtLst, &_fgcgg); _aega != nil {
					return _aega
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fgcgg.Name)
				if _bdage := d.Skip(); _bdage != nil {
					return _bdage
				}
			}
		case _e.EndElement:
			break _gffbf
		case _e.CharData:
		}
	}
	return nil
}

type CT_MultiLvlStrRef struct {
	F                string
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_dcbb *CT_PieSer) ValidateWithPath(path string) error {
	if _afcaa := _dcbb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _afcaa != nil {
		return _afcaa
	}
	if _cbgac := _dcbb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _cbgac != nil {
		return _cbgac
	}
	if _dcbb.Tx != nil {
		if _bedef := _dcbb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bedef != nil {
			return _bedef
		}
	}
	if _dcbb.SpPr != nil {
		if _fagb := _dcbb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fagb != nil {
			return _fagb
		}
	}
	if _dcbb.Explosion != nil {
		if _fdgfg := _dcbb.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _fdgfg != nil {
			return _fdgfg
		}
	}
	for _eagbf, _cbddf := range _dcbb.DPt {
		if _egfggb := _cbddf.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _eagbf)); _egfggb != nil {
			return _egfggb
		}
	}
	if _dcbb.DLbls != nil {
		if _edde := _dcbb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _edde != nil {
			return _edde
		}
	}
	if _dcbb.Cat != nil {
		if _cgbgb := _dcbb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _cgbgb != nil {
			return _cgbgb
		}
	}
	if _dcbb.Val != nil {
		if _fgag := _dcbb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _fgag != nil {
			return _fgag
		}
	}
	if _dcbb.ExtLst != nil {
		if _aacef := _dcbb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aacef != nil {
			return _aacef
		}
	}
	return nil
}

// Validate validates the CT_SurfaceSer and its children
func (_badec *CT_SurfaceSer) Validate() error {
	return _badec.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}

// Validate validates the CT_BandFmt and its children
func (_ccfe *CT_BandFmt) Validate() error {
	return _ccfe.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_ecab *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _ecab.Layout != nil {
		if _dgbdd := _ecab.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dgbdd != nil {
			return _dgbdd
		}
	}
	if _ecab.Tx != nil {
		if _efgbd := _ecab.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _efgbd != nil {
			return _efgbd
		}
	}
	if _ecab.NumFmt != nil {
		if _aedcfd := _ecab.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aedcfd != nil {
			return _aedcfd
		}
	}
	if _ecab.SpPr != nil {
		if _eedga := _ecab.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eedga != nil {
			return _eedga
		}
	}
	if _ecab.TxPr != nil {
		if _fbee := _ecab.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fbee != nil {
			return _fbee
		}
	}
	if _ecab.ExtLst != nil {
		if _cgaeb := _ecab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgaeb != nil {
			return _cgaeb
		}
	}
	return nil
}

func (_adcab *CT_LogBase) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _adcab.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_NumVal() *CT_NumVal { _cgad := &CT_NumVal{}; return _cgad }

func (_dage *CT_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dage.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_dage.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Surface3DChart and its children
func (_gegee *CT_Surface3DChart) Validate() error {
	return _gegee.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

func (_gffab ST_DLblPos) String() string {
	switch _gffab {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}

func (_bbage *CT_PrintSettings) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbgagd:
	for {
		_afae, _gdfd := d.Token()
		if _gdfd != nil {
			return _gdfd
		}
		switch _dgbe := _afae.(type) {
		case _e.StartElement:
			switch _dgbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_bbage.HeaderFooter = NewCT_HeaderFooter()
				if _dcfgc := d.DecodeElement(_bbage.HeaderFooter, &_dgbe); _dcfgc != nil {
					return _dcfgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_bbage.PageMargins = NewCT_PageMargins()
				if _agbed := d.DecodeElement(_bbage.PageMargins, &_dgbe); _agbed != nil {
					return _agbed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_bbage.PageSetup = NewCT_PageSetup()
				if _feab := d.DecodeElement(_bbage.PageSetup, &_dgbe); _feab != nil {
					return _feab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_bbage.LegacyDrawingHF = NewCT_RelId()
				if _debfca := d.DecodeElement(_bbage.LegacyDrawingHF, &_dgbe); _debfca != nil {
					return _debfca
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _dgbe.Name)
				if _aagb := d.Skip(); _aagb != nil {
					return _aagb
				}
			}
		case _e.EndElement:
			break _bbgagd
		case _e.CharData:
		}
	}
	return nil
}

func (_dgafc *CT_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gebf := range start.Attr {
		if _gebf.Name.Local == "\u0076\u0061\u006c" {
			_dgafc.ValAttr.UnmarshalXMLAttr(_gebf)
			continue
		}
	}
	for {
		_bdbbb, _gddg := d.Token()
		if _gddg != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _gddg)
		}
		if _dabge, _cbcd := _bdbbb.(_e.EndElement); _cbcd && _dabge.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_MarkerSize struct{ ValAttr *uint8 }

type CT_NumRef struct {
	F        string
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}

type ST_MarkerStyle byte

type CT_DispBlanksAs struct{ ValAttr ST_DispBlanksAs }

func (_begac *CT_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_begac.ValAttr = ST_Crosses(1)
	for _, _aacb := range start.Attr {
		if _aacb.Name.Local == "\u0076\u0061\u006c" {
			_begac.ValAttr.UnmarshalXMLAttr(_aacb)
			continue
		}
	}
	for {
		_bcdc, _dcfe := d.Token()
		if _dcfe != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _dcfe)
		}
		if _gegb, _dbab := _bcdc.(_e.EndElement); _dbab && _gegb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cefd *CT_Order) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bffef := range start.Attr {
		if _bffef.Name.Local == "\u0076\u0061\u006c" {
			_dgfd, _aeec := _b.ParseUint(_bffef.Value, 10, 8)
			if _aeec != nil {
				return _aeec
			}
			_cedbb := uint8(_dgfd)
			_cefd.ValAttr = &_cedbb
			continue
		}
	}
	for {
		_afdc, _ebgad := d.Token()
		if _ebgad != nil {
			return _bf.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _ebgad)
		}
		if _ffea, _faec := _afdc.(_e.EndElement); _faec && _ffea.Name == start.Name {
			break
		}
	}
	return nil
}

func (_eddd ST_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_eddd.String(), start)
}

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_dbce *CT_LogBase) ValidateWithPath(path string) error {
	if _dbce.ValAttr < 2 {
		return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _dbce.ValAttr)
	}
	if _dbce.ValAttr > 1000 {
		return _bf.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _dbce.ValAttr)
	}
	return nil
}

type CT_BubbleScale struct{ ValAttr *ST_BubbleScale }

// Validate validates the CT_RadarStyle and its children
func (_dfaeg *CT_RadarStyle) Validate() error {
	return _dfaeg.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}

func NewCT_DLbls() *CT_DLbls { _fgae := &CT_DLbls{}; return _fgae }

func (_bedg ST_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bedg.String(), start)
}

// Validate validates the CT_RelId and its children
func (_gceg *CT_RelId) Validate() error {
	return _gceg.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}

func (_abdc ST_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_abdc.String(), start)
}

func (_dgage *CT_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfcf := range start.Attr {
		if _dfcf.Name.Local == "\u0076\u0061\u006c" {
			_dgage.ValAttr.UnmarshalXMLAttr(_dfcf)
			continue
		}
	}
	for {
		_ccfcd, _afdd := d.Token()
		if _afdd != nil {
			return _bf.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _afdd)
		}
		if _gebb, _dceb := _ccfcd.(_e.EndElement); _dceb && _gebb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_BubbleSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_cb.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          []*CT_ErrBars
	XVal             *CT_AxDataSource
	YVal             *CT_NumDataSource
	BubbleSize       *CT_NumDataSource
	Bubble3D         *CT_Boolean
	ExtLst           *CT_ExtensionList
}

// Validate validates the CT_ScatterStyle and its children
func (_ffaf *CT_ScatterStyle) Validate() error {
	return _ffaf.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}

func (_gfaf *CT_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfaf.ValAttr != ST_TickLblPosUnset {
		_ddffg, _acbf := _gfaf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _acbf != nil {
			return _acbf
		}
		start.Attr = append(start.Attr, _ddffg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the Chart and its children
func (_bfceg *Chart) Validate() error { return _bfceg.ValidateWithPath("\u0043\u0068\u0061r\u0074") }

func (_cfac *CT_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _egaec := range start.Attr {
		if _egaec.Name.Local == "\u0076\u0061\u006c" {
			_cfac.ValAttr.UnmarshalXMLAttr(_egaec)
			continue
		}
	}
	for {
		_afaa, _cfaag := d.Token()
		if _cfaag != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _cfaag)
		}
		if _dcgb, _ccbee := _afaa.(_e.EndElement); _ccbee && _dcgb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ggdec *ST_Orientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ggdec = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_ggdec = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_ggdec = 2
	}
	return nil
}

type CT_NumFmt struct {
	FormatCodeAttr   string
	SourceLinkedAttr *bool
}

var ST_LblOffsetPercentPatternRe = _ef.MustCompile(ST_LblOffsetPercentPattern)

func (_ecga *CT_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_gbad, _eddb := _ecga.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _eddb != nil {
		return _eddb
	}
	start.Attr = append(start.Attr, _gbad)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_fgbaa *CT_DLblPos) ValidateWithPath(path string) error {
	if _fgbaa.ValAttr == ST_DLblPosUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ggfc := _fgbaa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggfc != nil {
		return _ggfc
	}
	return nil
}

// Validate validates the EG_AreaChartShared and its children
func (_dedd *EG_AreaChartShared) Validate() error {
	return _dedd.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_facc *CT_PivotFmt) ValidateWithPath(path string) error {
	if _eddf := _facc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _eddf != nil {
		return _eddf
	}
	if _facc.SpPr != nil {
		if _adcafc := _facc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adcafc != nil {
			return _adcafc
		}
	}
	if _facc.TxPr != nil {
		if _fcfeg := _facc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fcfeg != nil {
			return _fcfeg
		}
	}
	if _facc.Marker != nil {
		if _cbbbe := _facc.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _cbbbe != nil {
			return _cbbbe
		}
	}
	if _facc.DLbl != nil {
		if _dgdb := _facc.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _dgdb != nil {
			return _dgdb
		}
	}
	if _facc.ExtLst != nil {
		if _abdd := _facc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abdd != nil {
			return _abdd
		}
	}
	return nil
}

type CT_ChartSpace struct {
	Date1904       *CT_Boolean
	Lang           *CT_TextLanguageID
	RoundedCorners *CT_Boolean
	Style          *CT_Style
	ClrMapOvr      *_cb.CT_ColorMapping
	PivotSource    *CT_PivotSource
	Protection     *CT_Protection
	Chart          *CT_Chart
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	ExternalData   *CT_ExternalData
	PrintSettings  *CT_PrintSettings
	UserShapes     *CT_RelId
	ExtLst         *CT_ExtensionList
}

func (_bagfef ST_LblAlgn) Validate() error { return _bagfef.ValidateWithPath("") }

func (_bdfea ST_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bdfea.String(), start)
}

func (_abcg *CT_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_fadg, _cbdde := _abcg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _cbdde != nil {
		return _cbdde
	}
	start.Attr = append(start.Attr, _fadg)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_edcg *CT_DateAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_edcg.AxId, _fbgd)
	_bcgc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_edcg.Scaling, _bcgc)
	if _edcg.Delete != nil {
		_eadf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_edcg.Delete, _eadf)
	}
	_fdcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_edcg.AxPos, _fdcb)
	if _edcg.MajorGridlines != nil {
		_daac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edcg.MajorGridlines, _daac)
	}
	if _edcg.MinorGridlines != nil {
		_gfba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edcg.MinorGridlines, _gfba)
	}
	if _edcg.Title != nil {
		_deda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_edcg.Title, _deda)
	}
	if _edcg.NumFmt != nil {
		_ddda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_edcg.NumFmt, _ddda)
	}
	if _edcg.MajorTickMark != nil {
		_abba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_edcg.MajorTickMark, _abba)
	}
	if _edcg.MinorTickMark != nil {
		_ccdaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_edcg.MinorTickMark, _ccdaa)
	}
	if _edcg.TickLblPos != nil {
		_adbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_edcg.TickLblPos, _adbfg)
	}
	if _edcg.SpPr != nil {
		_dgaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_edcg.SpPr, _dgaff)
	}
	if _edcg.TxPr != nil {
		_bccc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_edcg.TxPr, _bccc)
	}
	_dddd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_edcg.CrossAx, _dddd)
	if _edcg.Choice != nil {
		_edcg.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _edcg.Auto != nil {
		_ccgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_edcg.Auto, _ccgb)
	}
	if _edcg.LblOffset != nil {
		_eacb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_edcg.LblOffset, _eacb)
	}
	if _edcg.BaseTimeUnit != nil {
		_fdba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edcg.BaseTimeUnit, _fdba)
	}
	if _edcg.MajorUnit != nil {
		_gbgd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edcg.MajorUnit, _gbgd)
	}
	if _edcg.MajorTimeUnit != nil {
		_bgdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edcg.MajorTimeUnit, _bgdf)
	}
	if _edcg.MinorUnit != nil {
		_gfdd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edcg.MinorUnit, _gfdd)
	}
	if _edcg.MinorTimeUnit != nil {
		_cacde := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edcg.MinorTimeUnit, _cacde)
	}
	if _edcg.ExtLst != nil {
		_dbcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edcg.ExtLst, _dbcg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ggcc *CT_Double) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bfbd := range start.Attr {
		if _bfbd.Name.Local == "\u0076\u0061\u006c" {
			_afdf, _gaed := _b.ParseFloat(_bfbd.Value, 64)
			if _gaed != nil {
				return _gaed
			}
			_ggcc.ValAttr = _afdf
			continue
		}
	}
	for {
		_gbgf, _adde := d.Token()
		if _adde != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _adde)
		}
		if _aafa, _cafg := _gbgf.(_e.EndElement); _cafg && _aafa.Name == start.Name {
			break
		}
	}
	return nil
}

func NewEG_PieChartShared() *EG_PieChartShared { _gfaeb := &EG_PieChartShared{}; return _gfaeb }

type CT_PrintSettings struct {
	HeaderFooter    *CT_HeaderFooter
	PageMargins     *CT_PageMargins
	PageSetup       *CT_PageSetup
	LegacyDrawingHF *CT_RelId
}

var ST_HPercentWithSymbolPatternRe = _ef.MustCompile(ST_HPercentWithSymbolPattern)

func NewEG_BarChartShared() *EG_BarChartShared {
	_efgfa := &EG_BarChartShared{}
	_efgfa.BarDir = NewCT_BarDir()
	return _efgfa
}

func NewCT_DLblsChoice() *CT_DLblsChoice { _gge := &CT_DLblsChoice{}; return _gge }

// Validate validates the CT_LineChart and its children
func (_gedcb *CT_LineChart) Validate() error {
	return _gedcb.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_cgge *CT_PageSetup) ValidateWithPath(path string) error {
	if _cgge.PaperHeightAttr != nil {
		if !_bd.ST_PositiveUniversalMeasurePatternRe.MatchString(*_cgge.PaperHeightAttr) {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _bd.ST_PositiveUniversalMeasurePatternRe, *_cgge.PaperHeightAttr)
		}
	}
	if _cgge.PaperHeightAttr != nil {
		if !_bd.ST_UniversalMeasurePatternRe.MatchString(*_cgge.PaperHeightAttr) {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _bd.ST_UniversalMeasurePatternRe, *_cgge.PaperHeightAttr)
		}
	}
	if _cgge.PaperWidthAttr != nil {
		if !_bd.ST_PositiveUniversalMeasurePatternRe.MatchString(*_cgge.PaperWidthAttr) {
			return _bf.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _bd.ST_PositiveUniversalMeasurePatternRe, *_cgge.PaperWidthAttr)
		}
	}
	if _cgge.PaperWidthAttr != nil {
		if !_bd.ST_UniversalMeasurePatternRe.MatchString(*_cgge.PaperWidthAttr) {
			return _bf.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _bd.ST_UniversalMeasurePatternRe, *_cgge.PaperWidthAttr)
		}
	}
	if _cfaa := _cgge.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _cfaa != nil {
		return _cfaa
	}
	return nil
}

func (_gcdbd *CT_SerTx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gcdbd.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bbfba *ST_HPercent) Validate() error { return _bbfba.ValidateWithPath("") }

type CT_AreaSer struct {
	Idx            *CT_UnsignedInt
	Order          *CT_UnsignedInt
	Tx             *CT_SerTx
	SpPr           *_cb.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	DPt            []*CT_DPt
	DLbls          *CT_DLbls
	Trendline      []*CT_Trendline
	ErrBars        []*CT_ErrBars
	Cat            *CT_AxDataSource
	Val            *CT_NumDataSource
	ExtLst         *CT_ExtensionList
}

func NewCT_TickMark() *CT_TickMark { _gacfg := &CT_TickMark{}; return _gacfg }

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_fagg *CT_LegendPos) ValidateWithPath(path string) error {
	if _fgcbf := _fagg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgcbf != nil {
		return _fgcbf
	}
	return nil
}

func NewCT_AxPos() *CT_AxPos { _cbdg := &CT_AxPos{}; _cbdg.ValAttr = ST_AxPos(1); return _cbdg }

func (_abeagf ST_BarDir) String() string {
	switch _abeagf {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}

type CT_PivotFmt struct {
	Idx    *CT_UnsignedInt
	SpPr   *_cb.CT_ShapeProperties
	TxPr   *_cb.CT_TextBody
	Marker *CT_Marker
	DLbl   *CT_DLbl
	ExtLst *CT_ExtensionList
}

func (_gdbcf *ST_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gcedd, _ddcbc := d.Token()
	if _ddcbc != nil {
		return _ddcbc
	}
	if _gdae, _bbebe := _gcedd.(_e.EndElement); _bbebe && _gdae.Name == start.Name {
		*_gdbcf = 1
		return nil
	}
	if _fedgg, _dbbf := _gcedd.(_e.CharData); !_dbbf {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gcedd)
	} else {
		switch string(_fedgg) {
		case "":
			*_gdbcf = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_gdbcf = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_gdbcf = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_gdbcf = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_gdbcf = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_gdbcf = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_gdbcf = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_gdbcf = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_gdbcf = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_gdbcf = 9
		}
	}
	_gcedd, _ddcbc = d.Token()
	if _ddcbc != nil {
		return _ddcbc
	}
	if _dfbgbd, _ddfd := _gcedd.(_e.EndElement); _ddfd && _dfbgbd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gcedd)
}

type CT_TrendlineLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	NumFmt *CT_NumFmt
	SpPr   *_cb.CT_ShapeProperties
	TxPr   *_cb.CT_TextBody
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_PrintSettings and its children
func (_dgbgb *CT_PrintSettings) Validate() error {
	return _dgbgb.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

type CT_Grouping struct{ ValAttr ST_Grouping }

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_daabd *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _daabd.Delete != nil {
		if _fefd := _daabd.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fefd != nil {
			return _fefd
		}
	}
	if _daabd.TxPr != nil {
		if _dbaa := _daabd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dbaa != nil {
			return _dbaa
		}
	}
	return nil
}

type CT_GapAmount struct{ ValAttr *ST_GapAmount }

func (_gbdc ST_LblAlgn) ValidateWithPath(path string) error {
	switch _gbdc {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbdc))
	}
	return nil
}

func (_caec ST_TickMark) ValidateWithPath(path string) error {
	switch _caec {
	case 0, 1, 2, 3, 4:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_caec))
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_dga *CT_AxDataSource) ValidateWithPath(path string) error {
	if _cfd := _dga.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _cfd != nil {
		return _cfd
	}
	return nil
}

func NewCT_Marker() *CT_Marker { _cgdce := &CT_Marker{}; return _cgdce }

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_ggdfd *UserShapes) ValidateWithPath(path string) error {
	if _ecdbf := _ggdfd.CT_Drawing.ValidateWithPath(path); _ecdbf != nil {
		return _ecdbf
	}
	return nil
}

func NewCT_ErrDir() *CT_ErrDir { _fdef := &CT_ErrDir{}; _fdef.ValAttr = ST_ErrDir(1); return _fdef }

func (_defdgc *ST_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abfff, _fbag := d.Token()
	if _fbag != nil {
		return _fbag
	}
	if _gcgbb, _cbdcf := _abfff.(_e.EndElement); _cbdcf && _gcgbb.Name == start.Name {
		*_defdgc = 1
		return nil
	}
	if _bacfg, _degbe := _abfff.(_e.CharData); !_degbe {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abfff)
	} else {
		switch string(_bacfg) {
		case "":
			*_defdgc = 0
		case "\u0062\u006f\u0074\u0068":
			*_defdgc = 1
		case "\u006d\u0069\u006eu\u0073":
			*_defdgc = 2
		case "\u0070\u006c\u0075\u0073":
			*_defdgc = 3
		}
	}
	_abfff, _fbag = d.Token()
	if _fbag != nil {
		return _fbag
	}
	if _cagcba, _fdagb := _abfff.(_e.EndElement); _fdagb && _cagcba.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abfff)
}

func NewCT_ExternalData() *CT_ExternalData { _gffa := &CT_ExternalData{}; return _gffa }

func NewCT_ExtensionList() *CT_ExtensionList { _daggf := &CT_ExtensionList{}; return _daggf }

func NewCT_PivotFmts() *CT_PivotFmts { _eccb := &CT_PivotFmts{}; return _eccb }

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_fbede *CT_PlotArea) ValidateWithPath(path string) error {
	if _fbede.Layout != nil {
		if _dfbb := _fbede.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dfbb != nil {
			return _dfbb
		}
	}
	for _edbgb, _ecfa := range _fbede.Choice {
		if _eaab := _ecfa.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _edbgb)); _eaab != nil {
			return _eaab
		}
	}
	if _fbede.CChoice != nil {
		if _fddf := _fbede.CChoice.ValidateWithPath(path + "\u002f\u0043\u0043\u0068\u006f\u0069\u0063\u0065"); _fddf != nil {
			return _fddf
		}
	}
	if _fbede.DTable != nil {
		if _cfee := _fbede.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _cfee != nil {
			return _cfee
		}
	}
	if _fbede.SpPr != nil {
		if _cdfda := _fbede.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cdfda != nil {
			return _cdfda
		}
	}
	if _fbede.ExtLst != nil {
		if _eeca := _fbede.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eeca != nil {
			return _eeca
		}
	}
	return nil
}

func (_dedfg ST_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dedfg.String(), start)
}

func (_ede *CT_LegendEntryChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ggcb:
	for {
		_cdgb, _fbcebc := d.Token()
		if _fbcebc != nil {
			return _fbcebc
		}
		switch _cbeda := _cdgb.(type) {
		case _e.StartElement:
			switch _cbeda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_ede.Delete = NewCT_Boolean()
				if _fbgbd := d.DecodeElement(_ede.Delete, &_cbeda); _fbgbd != nil {
					return _fbgbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ede.TxPr = _cb.NewCT_TextBody()
				if _bbdb := d.DecodeElement(_ede.TxPr, &_cbeda); _bbdb != nil {
					return _bbdb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cbeda.Name)
				if _bced := d.Skip(); _bced != nil {
					return _bced
				}
			}
		case _e.EndElement:
			break _ggcb
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_MarkerSize() *CT_MarkerSize { _beeca := &CT_MarkerSize{}; return _beeca }

func (_faga *CT_Layout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _faga.ManualLayout != nil {
		_gabd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_faga.ManualLayout, _gabd)
	}
	if _faga.ExtLst != nil {
		_gaag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_faga.ExtLst, _gaag)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_BarSer() *CT_BarSer {
	_fcgc := &CT_BarSer{}
	_fcgc.Idx = NewCT_UnsignedInt()
	_fcgc.Order = NewCT_UnsignedInt()
	return _fcgc
}

func (_ccddbb *EG_BarChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bdea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_ccddbb.BarDir, _bdea)
	if _ccddbb.Grouping != nil {
		_fcbac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_ccddbb.Grouping, _fcbac)
	}
	if _ccddbb.VaryColors != nil {
		_gaggf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ccddbb.VaryColors, _gaggf)
	}
	if _ccddbb.Ser != nil {
		_eaafde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dagfd := range _ccddbb.Ser {
			e.EncodeElement(_dagfd, _eaafde)
		}
	}
	if _ccddbb.DLbls != nil {
		_cbfcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ccddbb.DLbls, _cbfcd)
	}
	return nil
}

func (_bad *CT_BandFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ddaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bad.Idx, _ddaf)
	if _bad.SpPr != nil {
		_dcbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bad.SpPr, _dcbe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bfad *ST_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cggaf, _cdeee := d.Token()
	if _cdeee != nil {
		return _cdeee
	}
	if _gfegc, _ccddg := _cggaf.(_e.EndElement); _ccddg && _gfegc.Name == start.Name {
		*_bfad = 1
		return nil
	}
	if _effbe, _fcbga := _cggaf.(_e.CharData); !_fcbga {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cggaf)
	} else {
		switch string(_effbe) {
		case "":
			*_bfad = 0
		case "\u006e\u006f\u006e\u0065":
			*_bfad = 1
		case "\u006c\u0069\u006e\u0065":
			*_bfad = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bfad = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_bfad = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_bfad = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bfad = 6
		}
	}
	_cggaf, _cdeee = d.Token()
	if _cdeee != nil {
		return _cdeee
	}
	if _afece, _fabcf := _cggaf.(_e.EndElement); _fabcf && _afece.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cggaf)
}

func (_cagab ST_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cagab.String(), start)
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_dfdae *EG_AxShared) ValidateWithPath(path string) error {
	if _fbeee := _dfdae.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _fbeee != nil {
		return _fbeee
	}
	if _bdcdcf := _dfdae.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _bdcdcf != nil {
		return _bdcdcf
	}
	if _dfdae.Delete != nil {
		if _ebefb := _dfdae.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _ebefb != nil {
			return _ebefb
		}
	}
	if _geacf := _dfdae.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _geacf != nil {
		return _geacf
	}
	if _dfdae.MajorGridlines != nil {
		if _acdcd := _dfdae.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _acdcd != nil {
			return _acdcd
		}
	}
	if _dfdae.MinorGridlines != nil {
		if _dfcd := _dfdae.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dfcd != nil {
			return _dfcd
		}
	}
	if _dfdae.Title != nil {
		if _ebdgd := _dfdae.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ebdgd != nil {
			return _ebdgd
		}
	}
	if _dfdae.NumFmt != nil {
		if _bgdba := _dfdae.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bgdba != nil {
			return _bgdba
		}
	}
	if _dfdae.MajorTickMark != nil {
		if _cddg := _dfdae.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _cddg != nil {
			return _cddg
		}
	}
	if _dfdae.MinorTickMark != nil {
		if _dgebc := _dfdae.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dgebc != nil {
			return _dgebc
		}
	}
	if _dfdae.TickLblPos != nil {
		if _agadf := _dfdae.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _agadf != nil {
			return _agadf
		}
	}
	if _dfdae.SpPr != nil {
		if _cedcea := _dfdae.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cedcea != nil {
			return _cedcea
		}
	}
	if _dfdae.TxPr != nil {
		if _bbagf := _dfdae.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bbagf != nil {
			return _bbagf
		}
	}
	if _baaba := _dfdae.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _baaba != nil {
		return _baaba
	}
	if _dfdae.Choice != nil {
		if _ddefg := _dfdae.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ddefg != nil {
			return _ddefg
		}
	}
	return nil
}

func NewCT_SecondPieSize() *CT_SecondPieSize { _cccbf := &CT_SecondPieSize{}; return _cccbf }

type CT_SerAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	ExtLst         *CT_ExtensionList
}

func NewEG_AxSharedChoice() *EG_AxSharedChoice { _efgag := &EG_AxSharedChoice{}; return _efgag }

func NewCT_BubbleChart() *CT_BubbleChart { _acg := &CT_BubbleChart{}; return _acg }

func NewCT_AxisUnit() *CT_AxisUnit { _cba := &CT_AxisUnit{}; _cba.ValAttr = 0 + 1; return _cba }

type CT_LayoutTarget struct{ ValAttr ST_LayoutTarget }

type ST_Orientation byte

func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_feee := &EG_SurfaceChartShared{}
	return _feee
}

func (_fefcg ST_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fefcg.String(), start)
}

func (_efgbb *CT_PictureStackUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efgbb.ValAttr = 0 + 1
	for _, _dcaec := range start.Attr {
		if _dcaec.Name.Local == "\u0076\u0061\u006c" {
			_effg, _bfbff := _b.ParseFloat(_dcaec.Value, 64)
			if _bfbff != nil {
				return _bfbff
			}
			_efgbb.ValAttr = _effg
			continue
		}
	}
	for {
		_ebbe, _bfccc := d.Token()
		if _bfccc != nil {
			return _bf.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _bfccc)
		}
		if _edcgf, _adce := _ebbe.(_e.EndElement); _adce && _edcgf.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_ErrBarType byte

func (_acegb ST_Shape) String() string {
	switch _acegb {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}

type CT_CatAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblAlgn        *CT_LblAlgn
	LblOffset      *CT_LblOffset
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	NoMultiLvlLbl  *CT_Boolean
	ExtLst         *CT_ExtensionList
}

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_bea *CT_BarChart) ValidateWithPath(path string) error {
	if _dba := _bea.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dba != nil {
		return _dba
	}
	if _bea.Grouping != nil {
		if _aagf := _bea.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _aagf != nil {
			return _aagf
		}
	}
	if _bea.VaryColors != nil {
		if _bbgb := _bea.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bbgb != nil {
			return _bbgb
		}
	}
	for _aedb, _adbbc := range _bea.Ser {
		if _ffbg := _adbbc.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aedb)); _ffbg != nil {
			return _ffbg
		}
	}
	if _bea.DLbls != nil {
		if _bece := _bea.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bece != nil {
			return _bece
		}
	}
	if _bea.GapWidth != nil {
		if _gad := _bea.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _gad != nil {
			return _gad
		}
	}
	if _bea.Overlap != nil {
		if _ccdf := _bea.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _ccdf != nil {
			return _ccdf
		}
	}
	for _afab, _edf := range _bea.SerLines {
		if _daga := _edf.ValidateWithPath(_bf.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _afab)); _daga != nil {
			return _daga
		}
	}
	for _fcag, _aede := range _bea.AxId {
		if _addf := _aede.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fcag)); _addf != nil {
			return _addf
		}
	}
	if _bea.ExtLst != nil {
		if _cca := _bea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cca != nil {
			return _cca
		}
	}
	return nil
}

// Validate validates the CT_PivotSource and its children
func (_ccbca *CT_PivotSource) Validate() error {
	return _ccbca.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}

func (_bbbea ST_SizeRepresents) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cbddec := _e.Attr{}
	_cbddec.Name = name
	switch _bbbea {
	case ST_SizeRepresentsUnset:
		_cbddec.Value = ""
	case ST_SizeRepresentsArea:
		_cbddec.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_cbddec.Value = "\u0077"
	}
	return _cbddec, nil
}

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_dceaf *CT_StrVal) ValidateWithPath(path string) error { return nil }

type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

// Validate validates the CT_DLbl and its children
func (_beef *CT_DLbl) Validate() error {
	return _beef.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}

// Validate validates the CT_ScatterChart and its children
func (_dfee *CT_ScatterChart) Validate() error {
	return _dfee.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}

func (_gfbff *CT_UpDownBar) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gfbff.SpPr != nil {
		_cgcda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gfbff.SpPr, _cgcda)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eaaeec *CT_ManualLayout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eaaeec.LayoutTarget != nil {
		_bfcaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_eaaeec.LayoutTarget, _bfcaf)
	}
	if _eaaeec.XMode != nil {
		_egddf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eaaeec.XMode, _egddf)
	}
	if _eaaeec.YMode != nil {
		_gbgfa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eaaeec.YMode, _gbgfa)
	}
	if _eaaeec.WMode != nil {
		_ebdec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eaaeec.WMode, _ebdec)
	}
	if _eaaeec.HMode != nil {
		_fegc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eaaeec.HMode, _fegc)
	}
	if _eaaeec.X != nil {
		_adcdbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_eaaeec.X, _adcdbf)
	}
	if _eaaeec.Y != nil {
		_debgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_eaaeec.Y, _debgg)
	}
	if _eaaeec.W != nil {
		_cefc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_eaaeec.W, _cefc)
	}
	if _eaaeec.H != nil {
		_ccfgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_eaaeec.H, _ccfgg)
	}
	if _eaaeec.ExtLst != nil {
		_fbcdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eaaeec.ExtLst, _fbcdg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_ebgfd *CT_Perspective) ValidateWithPath(path string) error {
	if _ebgfd.ValAttr != nil {
		if *_ebgfd.ValAttr < 0 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_ebgfd.ValAttr)
		}
		if *_ebgfd.ValAttr > 240 {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_ebgfd.ValAttr)
		}
	}
	return nil
}

func (_ccabd *ST_Shape) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ccabd = 0
	case "\u0063\u006f\u006e\u0065":
		*_ccabd = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_ccabd = 2
	case "\u0062\u006f\u0078":
		*_ccabd = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_ccabd = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_ccabd = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_ccabd = 6
	}
	return nil
}

func (_acgd *CT_MultiLvlStrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _acgd.PtCount != nil {
		_gbdd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_acgd.PtCount, _gbdd)
	}
	if _acgd.Lvl != nil {
		_egeba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _cdfcc := range _acgd.Lvl {
			e.EncodeElement(_cdfcc, _egeba)
		}
	}
	if _acgd.ExtLst != nil {
		_degd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acgd.ExtLst, _degd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LayoutMode() *CT_LayoutMode { _bcde := &CT_LayoutMode{}; return _bcde }

func (_fafd *CT_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cfaad := range start.Attr {
		if _cfaad.Name.Local == "\u0076\u0061\u006c" {
			_fafd.ValAttr.UnmarshalXMLAttr(_cfaad)
			continue
		}
	}
	for {
		_facgg, _gbdee := d.Token()
		if _gbdee != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _gbdee)
		}
		if _ffeg, _aabcba := _facgg.(_e.EndElement); _aabcba && _ffeg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_fecb *CT_ErrDir) ValidateWithPath(path string) error {
	if _fecb.ValAttr == ST_ErrDirUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ggbcdd := _fecb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ggbcdd != nil {
		return _ggbcdd
	}
	return nil
}

type ST_PictureFormat byte

func (_gfcd *CT_Extension) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfcd.UriAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075\u0072\u0069"}, Value: _bf.Sprintf("\u0025\u0076", *_gfcd.UriAttr)})
	}
	e.EncodeToken(start)
	if _gfcd.Any != nil {
		_gfcd.Any.MarshalXML(e, _e.StartElement{})
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gedf *CT_ChartLines) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gedf.SpPr != nil {
		_fafa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gedf.SpPr, _fafa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _cbdee := &CT_MultiLvlStrData{}; return _cbdee }

func (_eebd *CT_TxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eebd.StrRef != nil {
		_dffdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_eebd.StrRef, _dffdf)
	}
	if _eebd.Rich != nil {
		_agec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_eebd.Rich, _agec)
	}
	return nil
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

func NewCT_DepthPercent() *CT_DepthPercent { _adef := &CT_DepthPercent{}; return _adef }

// Validate validates the CT_Period and its children
func (_edadf *CT_Period) Validate() error {
	return _edadf.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}

// Validate validates the CT_TimeUnit and its children
func (_beaee *CT_TimeUnit) Validate() error {
	return _beaee.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}

func (_dfed *CT_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_aacba, _fdgf := _dfed.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _fdgf != nil {
		return _fdgf
	}
	start.Attr = append(start.Attr, _aacba)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type Any interface {
	MarshalXML(_baddcb *_e.Encoder, _gbaag _e.StartElement) error
	UnmarshalXML(_cgcgb *_e.Decoder, _acbaa _e.StartElement) error
}

func (_dacea *CT_OfPieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dacea.OfPieType = NewCT_OfPieType()
_acfbf:
	for {
		_dffa, _cabbf := d.Token()
		if _cabbf != nil {
			return _cabbf
		}
		switch _geffd := _dffa.(type) {
		case _e.StartElement:
			switch _geffd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _ecaa := d.DecodeElement(_dacea.OfPieType, &_geffd); _ecaa != nil {
					return _ecaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dacea.VaryColors = NewCT_Boolean()
				if _dgaa := d.DecodeElement(_dacea.VaryColors, &_geffd); _dgaa != nil {
					return _dgaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ebce := NewCT_PieSer()
				if _dagec := d.DecodeElement(_ebce, &_geffd); _dagec != nil {
					return _dagec
				}
				_dacea.Ser = append(_dacea.Ser, _ebce)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dacea.DLbls = NewCT_DLbls()
				if _acde := d.DecodeElement(_dacea.DLbls, &_geffd); _acde != nil {
					return _acde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_dacea.GapWidth = NewCT_GapAmount()
				if _gabea := d.DecodeElement(_dacea.GapWidth, &_geffd); _gabea != nil {
					return _gabea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_dacea.SplitType = NewCT_SplitType()
				if _ebed := d.DecodeElement(_dacea.SplitType, &_geffd); _ebed != nil {
					return _ebed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_dacea.SplitPos = NewCT_Double()
				if _dgbaf := d.DecodeElement(_dacea.SplitPos, &_geffd); _dgbaf != nil {
					return _dgbaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_dacea.CustSplit = NewCT_CustSplit()
				if _egfe := d.DecodeElement(_dacea.CustSplit, &_geffd); _egfe != nil {
					return _egfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_dacea.SecondPieSize = NewCT_SecondPieSize()
				if _eagf := d.DecodeElement(_dacea.SecondPieSize, &_geffd); _eagf != nil {
					return _eagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_gcgeb := NewCT_ChartLines()
				if _cggb := d.DecodeElement(_gcgeb, &_geffd); _cggb != nil {
					return _cggb
				}
				_dacea.SerLines = append(_dacea.SerLines, _gcgeb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dacea.ExtLst = NewCT_ExtensionList()
				if _bedb := d.DecodeElement(_dacea.ExtLst, &_geffd); _bedb != nil {
					return _bedb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _geffd.Name)
				if _aabe := d.Skip(); _aabe != nil {
					return _aabe
				}
			}
		case _e.EndElement:
			break _acfbf
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_OfPieChart and its children
func (_aeba *CT_OfPieChart) Validate() error {
	return _aeba.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

func (_ddac *CT_DLblChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ggaf:
	for {
		_defg, _eaagd := d.Token()
		if _eaagd != nil {
			return _eaagd
		}
		switch _geb := _defg.(type) {
		case _e.StartElement:
			switch _geb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_ddac.Delete = NewCT_Boolean()
				if _befb := d.DecodeElement(_ddac.Delete, &_geb); _befb != nil {
					return _befb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_ddac.Layout = NewCT_Layout()
				if _fdda := d.DecodeElement(_ddac.Layout, &_geb); _fdda != nil {
					return _fdda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ddac.Tx = NewCT_Tx()
				if _fffe := d.DecodeElement(_ddac.Tx, &_geb); _fffe != nil {
					return _fffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ddac.NumFmt = NewCT_NumFmt()
				if _dgda := d.DecodeElement(_ddac.NumFmt, &_geb); _dgda != nil {
					return _dgda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddac.SpPr = _cb.NewCT_ShapeProperties()
				if _deed := d.DecodeElement(_ddac.SpPr, &_geb); _deed != nil {
					return _deed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ddac.TxPr = _cb.NewCT_TextBody()
				if _fdcf := d.DecodeElement(_ddac.TxPr, &_geb); _fdcf != nil {
					return _fdcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_ddac.DLblPos = NewCT_DLblPos()
				if _dcbg := d.DecodeElement(_ddac.DLblPos, &_geb); _dcbg != nil {
					return _dcbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_ddac.ShowLegendKey = NewCT_Boolean()
				if _febb := d.DecodeElement(_ddac.ShowLegendKey, &_geb); _febb != nil {
					return _febb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_ddac.ShowVal = NewCT_Boolean()
				if _fbcaf := d.DecodeElement(_ddac.ShowVal, &_geb); _fbcaf != nil {
					return _fbcaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_ddac.ShowCatName = NewCT_Boolean()
				if _ffef := d.DecodeElement(_ddac.ShowCatName, &_geb); _ffef != nil {
					return _ffef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_ddac.ShowSerName = NewCT_Boolean()
				if _dgbc := d.DecodeElement(_ddac.ShowSerName, &_geb); _dgbc != nil {
					return _dgbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_ddac.ShowPercent = NewCT_Boolean()
				if _bfecg := d.DecodeElement(_ddac.ShowPercent, &_geb); _bfecg != nil {
					return _bfecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_ddac.ShowBubbleSize = NewCT_Boolean()
				if _caee := d.DecodeElement(_ddac.ShowBubbleSize, &_geb); _caee != nil {
					return _caee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_ddac.Separator = new(string)
				if _gbec := d.DecodeElement(_ddac.Separator, &_geb); _gbec != nil {
					return _gbec
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _geb.Name)
				if _abfaa := d.Skip(); _abfaa != nil {
					return _abfaa
				}
			}
		case _e.EndElement:
			break _ggaf
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_bbegb *CT_PrintSettings) ValidateWithPath(path string) error {
	if _bbegb.HeaderFooter != nil {
		if _faea := _bbegb.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _faea != nil {
			return _faea
		}
	}
	if _bbegb.PageMargins != nil {
		if _aebg := _bbegb.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _aebg != nil {
			return _aebg
		}
	}
	if _bbegb.PageSetup != nil {
		if _egdee := _bbegb.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _egdee != nil {
			return _egdee
		}
	}
	if _bbegb.LegacyDrawingHF != nil {
		if _eabbf := _bbegb.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _eabbf != nil {
			return _eabbf
		}
	}
	return nil
}

type CT_NumData struct {
	FormatCode *string
	PtCount    *CT_UnsignedInt
	Pt         []*CT_NumVal
	ExtLst     *CT_ExtensionList
}

func (_ffff *ST_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dadec, _acfd := d.Token()
	if _acfd != nil {
		return _acfd
	}
	if _ddbba, _fccbd := _dadec.(_e.EndElement); _fccbd && _ddbba.Name == start.Name {
		*_ffff = 1
		return nil
	}
	if _ageab, _ceabe := _dadec.(_e.CharData); !_ceabe {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dadec)
	} else {
		switch string(_ageab) {
		case "":
			*_ffff = 0
		case "\u0078":
			*_ffff = 1
		case "\u0079":
			*_ffff = 2
		}
	}
	_dadec, _acfd = d.Token()
	if _acfd != nil {
		return _acfd
	}
	if _adddb, _cfdfd := _dadec.(_e.EndElement); _cfdfd && _adddb.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dadec)
}

func (_gdgdc *CT_NumRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dcgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_ba.AddPreserveSpaceAttr(&_dcgd, _gdgdc.F)
	e.EncodeElement(_gdgdc.F, _dcgd)
	if _gdgdc.NumCache != nil {
		_bfbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_gdgdc.NumCache, _bfbf)
	}
	if _gdgdc.ExtLst != nil {
		_cfbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gdgdc.ExtLst, _cfbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BarDir and its children
func (_fdf *CT_BarDir) Validate() error {
	return _fdf.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}

func (_ebfb *CT_LegendEntryChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ebfb.Delete != nil {
		_ggac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ebfb.Delete, _ggac)
	}
	if _ebfb.TxPr != nil {
		_gecg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebfb.TxPr, _gecg)
	}
	return nil
}

// Validate validates the CT_Protection and its children
func (_ffgdga *CT_Protection) Validate() error {
	return _ffgdga.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}

// Validate validates the CT_Trendline and its children
func (_degf *CT_Trendline) Validate() error {
	return _degf.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_ebec *CT_RotY) ValidateWithPath(path string) error {
	if _ebec.ValAttr != nil {
		if *_ebec.ValAttr < 0 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_ebec.ValAttr)
		}
		if *_ebec.ValAttr > 360 {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_ebec.ValAttr)
		}
	}
	return nil
}

// Validate validates the CT_PictureOptions and its children
func (_ebcfc *CT_PictureOptions) Validate() error {
	return _ebcfc.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}

func (_fceg ST_OfPieType) ValidateWithPath(path string) error {
	switch _fceg {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fceg))
	}
	return nil
}

func NewCT_PictureFormat() *CT_PictureFormat {
	_bcbf := &CT_PictureFormat{}
	_bcbf.ValAttr = ST_PictureFormat(1)
	return _bcbf
}

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_cgg *CT_AxisUnit) ValidateWithPath(path string) error {
	if _cgg.ValAttr <= 0 {
		return _bf.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cgg.ValAttr)
	}
	return nil
}

func (_eabf *CT_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fgeed := range start.Attr {
		if _fgeed.Name.Local == "\u0076\u0061\u006c" {
			_eabf.ValAttr.UnmarshalXMLAttr(_fgeed)
			continue
		}
	}
	for {
		_beegf, _fdafc := d.Token()
		if _fdafc != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _fdafc)
		}
		if _gcbg, _dfgf := _beegf.(_e.EndElement); _dfgf && _gcbg.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_NumData() *CT_NumData { _cdbac := &CT_NumData{}; return _cdbac }

func (_bacc ST_BuiltInUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cdaa := _e.Attr{}
	_cdaa.Name = name
	switch _bacc {
	case ST_BuiltInUnitUnset:
		_cdaa.Value = ""
	case ST_BuiltInUnitHundreds:
		_cdaa.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_cdaa.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_cdaa.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_cdaa.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_cdaa.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_cdaa.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_cdaa.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_cdaa.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_cdaa.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _cdaa, nil
}

type CT_BuiltInUnit struct{ ValAttr ST_BuiltInUnit }

func (_fgcec ST_TimeUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cacfb := _e.Attr{}
	_cacfb.Name = name
	switch _fgcec {
	case ST_TimeUnitUnset:
		_cacfb.Value = ""
	case ST_TimeUnitDays:
		_cacfb.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_cacfb.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_cacfb.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _cacfb, nil
}

func (_bcffb *CT_RadarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcffb.Idx = NewCT_UnsignedInt()
	_bcffb.Order = NewCT_UnsignedInt()
_dadga:
	for {
		_cbgbg, _decabc := d.Token()
		if _decabc != nil {
			return _decabc
		}
		switch _agdge := _cbgbg.(type) {
		case _e.StartElement:
			switch _agdge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bcaff := d.DecodeElement(_bcffb.Idx, &_agdge); _bcaff != nil {
					return _bcaff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cdfcg := d.DecodeElement(_bcffb.Order, &_agdge); _cdfcg != nil {
					return _cdfcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bcffb.Tx = NewCT_SerTx()
				if _fcdab := d.DecodeElement(_bcffb.Tx, &_agdge); _fcdab != nil {
					return _fcdab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bcffb.SpPr = _cb.NewCT_ShapeProperties()
				if _febd := d.DecodeElement(_bcffb.SpPr, &_agdge); _febd != nil {
					return _febd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_bcffb.Marker = NewCT_Marker()
				if _bbdade := d.DecodeElement(_bcffb.Marker, &_agdge); _bbdade != nil {
					return _bbdade
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ceab := NewCT_DPt()
				if _daacc := d.DecodeElement(_ceab, &_agdge); _daacc != nil {
					return _daacc
				}
				_bcffb.DPt = append(_bcffb.DPt, _ceab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bcffb.DLbls = NewCT_DLbls()
				if _cdbff := d.DecodeElement(_bcffb.DLbls, &_agdge); _cdbff != nil {
					return _cdbff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_bcffb.Cat = NewCT_AxDataSource()
				if _degb := d.DecodeElement(_bcffb.Cat, &_agdge); _degb != nil {
					return _degb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_bcffb.Val = NewCT_NumDataSource()
				if _egbga := d.DecodeElement(_bcffb.Val, &_agdge); _egbga != nil {
					return _egbga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcffb.ExtLst = NewCT_ExtensionList()
				if _dcacd := d.DecodeElement(_bcffb.ExtLst, &_agdge); _dcacd != nil {
					return _dcacd
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _agdge.Name)
				if _bfdgd := d.Skip(); _bfdgd != nil {
					return _bfdgd
				}
			}
		case _e.EndElement:
			break _dadga
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_fecae *CT_TickMark) ValidateWithPath(path string) error {
	if _fgbdf := _fecae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgbdf != nil {
		return _fgbdf
	}
	return nil
}

func (_fdfc *CT_UpDownBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_abegb:
	for {
		_ecbfa, _abgaf := d.Token()
		if _abgaf != nil {
			return _abgaf
		}
		switch _cfcb := _ecbfa.(type) {
		case _e.StartElement:
			switch _cfcb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_fdfc.GapWidth = NewCT_GapAmount()
				if _gedca := d.DecodeElement(_fdfc.GapWidth, &_cfcb); _gedca != nil {
					return _gedca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_fdfc.UpBars = NewCT_UpDownBar()
				if _ebecc := d.DecodeElement(_fdfc.UpBars, &_cfcb); _ebecc != nil {
					return _ebecc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_fdfc.DownBars = NewCT_UpDownBar()
				if _eggaf := d.DecodeElement(_fdfc.DownBars, &_cfcb); _eggaf != nil {
					return _eggaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fdfc.ExtLst = NewCT_ExtensionList()
				if _bbbdg := d.DecodeElement(_fdfc.ExtLst, &_cfcb); _bbbdg != nil {
					return _bbbdg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _cfcb.Name)
				if _cbcdea := d.Skip(); _cbcdea != nil {
					return _cbcdea
				}
			}
		case _e.EndElement:
			break _abegb
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_UpDownBar() *CT_UpDownBar { _eaec := &CT_UpDownBar{}; return _eaec }

func (_bbacbc *ST_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dgcag, _gdcc := d.Token()
	if _gdcc != nil {
		return _gdcc
	}
	if _deefe, _geaf := _dgcag.(_e.EndElement); _geaf && _deefe.Name == start.Name {
		*_bbacbc = 1
		return nil
	}
	if _fbccb, _bgbcc := _dgcag.(_e.CharData); !_bgbcc {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgcag)
	} else {
		switch string(_fbccb) {
		case "":
			*_bbacbc = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_bbacbc = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_bbacbc = 2
		}
	}
	_dgcag, _gdcc = d.Token()
	if _gdcc != nil {
		return _gdcc
	}
	if _bbbff, _beeegf := _dgcag.(_e.EndElement); _beeegf && _bbbff.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgcag)
}

func (_fddfg *ST_DepthPercent) Validate() error { return _fddfg.ValidateWithPath("") }

type CT_Perspective struct{ ValAttr *uint8 }

func (_dbffdc *CT_RotY) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ecgd := range start.Attr {
		if _ecgd.Name.Local == "\u0076\u0061\u006c" {
			_bdgf, _fbbce := _b.ParseUint(_ecgd.Value, 10, 16)
			if _fbbce != nil {
				return _fbbce
			}
			_bdgbc := uint16(_bdgf)
			_dbffdc.ValAttr = &_bdgbc
			continue
		}
	}
	for {
		_bbfa, _ggbe := d.Token()
		if _ggbe != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _ggbe)
		}
		if _eaee, _daef := _bbfa.(_e.EndElement); _daef && _eaee.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gaacc *CT_ValAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gaacc.AxId = NewCT_UnsignedInt()
	_gaacc.Scaling = NewCT_Scaling()
	_gaacc.AxPos = NewCT_AxPos()
	_gaacc.CrossAx = NewCT_UnsignedInt()
_ecbbe:
	for {
		_fdfcc, _fddgc := d.Token()
		if _fddgc != nil {
			return _fddgc
		}
		switch _fbdc := _fdfcc.(type) {
		case _e.StartElement:
			switch _fbdc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _aaffa := d.DecodeElement(_gaacc.AxId, &_fbdc); _aaffa != nil {
					return _aaffa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _beed := d.DecodeElement(_gaacc.Scaling, &_fbdc); _beed != nil {
					return _beed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_gaacc.Delete = NewCT_Boolean()
				if _cgegc := d.DecodeElement(_gaacc.Delete, &_fbdc); _cgegc != nil {
					return _cgegc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _adbca := d.DecodeElement(_gaacc.AxPos, &_fbdc); _adbca != nil {
					return _adbca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gaacc.MajorGridlines = NewCT_ChartLines()
				if _deafg := d.DecodeElement(_gaacc.MajorGridlines, &_fbdc); _deafg != nil {
					return _deafg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gaacc.MinorGridlines = NewCT_ChartLines()
				if _gecba := d.DecodeElement(_gaacc.MinorGridlines, &_fbdc); _gecba != nil {
					return _gecba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_gaacc.Title = NewCT_Title()
				if _fcdbd := d.DecodeElement(_gaacc.Title, &_fbdc); _fcdbd != nil {
					return _fcdbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gaacc.NumFmt = NewCT_NumFmt()
				if _dcffg := d.DecodeElement(_gaacc.NumFmt, &_fbdc); _dcffg != nil {
					return _dcffg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gaacc.MajorTickMark = NewCT_TickMark()
				if _ccgae := d.DecodeElement(_gaacc.MajorTickMark, &_fbdc); _ccgae != nil {
					return _ccgae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gaacc.MinorTickMark = NewCT_TickMark()
				if _addg := d.DecodeElement(_gaacc.MinorTickMark, &_fbdc); _addg != nil {
					return _addg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_gaacc.TickLblPos = NewCT_TickLblPos()
				if _gdbdg := d.DecodeElement(_gaacc.TickLblPos, &_fbdc); _gdbdg != nil {
					return _gdbdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gaacc.SpPr = _cb.NewCT_ShapeProperties()
				if _agdgbc := d.DecodeElement(_gaacc.SpPr, &_fbdc); _agdgbc != nil {
					return _agdgbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gaacc.TxPr = _cb.NewCT_TextBody()
				if _dddde := d.DecodeElement(_gaacc.TxPr, &_fbdc); _dddde != nil {
					return _dddde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _acgfe := d.DecodeElement(_gaacc.CrossAx, &_fbdc); _acgfe != nil {
					return _acgfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_gaacc.Choice = NewEG_AxSharedChoice()
				if _dbgd := d.DecodeElement(&_gaacc.Choice.Crosses, &_fbdc); _dbgd != nil {
					return _dbgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_gaacc.Choice = NewEG_AxSharedChoice()
				if _gcfge := d.DecodeElement(&_gaacc.Choice.CrossesAt, &_fbdc); _gcfge != nil {
					return _gcfge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_gaacc.CrossBetween = NewCT_CrossBetween()
				if _bbbed := d.DecodeElement(_gaacc.CrossBetween, &_fbdc); _bbbed != nil {
					return _bbbed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_gaacc.MajorUnit = NewCT_AxisUnit()
				if _cbae := d.DecodeElement(_gaacc.MajorUnit, &_fbdc); _cbae != nil {
					return _cbae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_gaacc.MinorUnit = NewCT_AxisUnit()
				if _acdfd := d.DecodeElement(_gaacc.MinorUnit, &_fbdc); _acdfd != nil {
					return _acdfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_gaacc.DispUnits = NewCT_DispUnits()
				if _aedec := d.DecodeElement(_gaacc.DispUnits, &_fbdc); _aedec != nil {
					return _aedec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaacc.ExtLst = NewCT_ExtensionList()
				if _cebff := d.DecodeElement(_gaacc.ExtLst, &_fbdc); _cebff != nil {
					return _cebff
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _fbdc.Name)
				if _cdfbg := d.Skip(); _cdfbg != nil {
					return _cdfbg
				}
			}
		case _e.EndElement:
			break _ecbbe
		case _e.CharData:
		}
	}
	return nil
}

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

func (_fbbdbb ST_ErrBarType) ValidateWithPath(path string) error {
	switch _fbbdbb {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbbdbb))
	}
	return nil
}

func NewCT_Extension() *CT_Extension { _dggga := &CT_Extension{}; return _dggga }

func (_ccafg *CT_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dege := range start.Attr {
		if _dege.Name.Local == "\u0076\u0061\u006c" {
			_ccafg.ValAttr.UnmarshalXMLAttr(_dege)
			continue
		}
	}
	for {
		_afef, _ecaad := d.Token()
		if _ecaad != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _ecaad)
		}
		if _dfef, _fbgg := _afef.(_e.EndElement); _fbgg && _dfef.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_SecondPieSize struct{ ValAttr *ST_SecondPieSize }

// Validate validates the CT_DPt and its children
func (_cfca *CT_DPt) Validate() error {
	return _cfca.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}

func NewCT_View3D() *CT_View3D { _bdgde := &CT_View3D{}; return _bdgde }

// Validate validates the CT_Bar3DChart and its children
func (_cdb *CT_Bar3DChart) Validate() error {
	return _cdb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_aaad *CT_RotX) ValidateWithPath(path string) error {
	if _aaad.ValAttr != nil {
		if *_aaad.ValAttr < -90 {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_aaad.ValAttr)
		}
		if *_aaad.ValAttr > 90 {
			return _bf.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_aaad.ValAttr)
		}
	}
	return nil
}

func (_gddff *EG_DLblShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gddff.NumFmt != nil {
		_eccda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gddff.NumFmt, _eccda)
	}
	if _gddff.SpPr != nil {
		_aafbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gddff.SpPr, _aafbe)
	}
	if _gddff.TxPr != nil {
		_abced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gddff.TxPr, _abced)
	}
	if _gddff.DLblPos != nil {
		_gggfb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_gddff.DLblPos, _gggfb)
	}
	if _gddff.ShowLegendKey != nil {
		_cebb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_gddff.ShowLegendKey, _cebb)
	}
	if _gddff.ShowVal != nil {
		_dfbec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_gddff.ShowVal, _dfbec)
	}
	if _gddff.ShowCatName != nil {
		_faefg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gddff.ShowCatName, _faefg)
	}
	if _gddff.ShowSerName != nil {
		_eggcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gddff.ShowSerName, _eggcd)
	}
	if _gddff.ShowPercent != nil {
		_bgeae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_gddff.ShowPercent, _bgeae)
	}
	if _gddff.ShowBubbleSize != nil {
		_bdedc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gddff.ShowBubbleSize, _bdedc)
	}
	if _gddff.Separator != nil {
		_cdff := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_ba.AddPreserveSpaceAttr(&_cdff, *_gddff.Separator)
		e.EncodeElement(_gddff.Separator, _cdff)
	}
	return nil
}

type CT_OfPieChart struct {
	OfPieType     *CT_OfPieType
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	GapWidth      *CT_GapAmount
	SplitType     *CT_SplitType
	SplitPos      *CT_Double
	CustSplit     *CT_CustSplit
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines
	ExtLst        *CT_ExtensionList
}

// Validate validates the CT_MarkerSize and its children
func (_abda *CT_MarkerSize) Validate() error {
	return _abda.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}

// Validate validates the CT_SerTxChoice and its children
func (_baffe *CT_SerTxChoice) Validate() error {
	return _baffe.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}

func (_agdfd *CT_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _agdfd.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_agdfd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

func (_gfed *CT_LineChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cfgab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_gfed.Grouping, _cfgab)
	if _gfed.VaryColors != nil {
		_cefe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gfed.VaryColors, _cefe)
	}
	if _gfed.Ser != nil {
		_bddda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _faac := range _gfed.Ser {
			e.EncodeElement(_faac, _bddda)
		}
	}
	if _gfed.DLbls != nil {
		_egaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gfed.DLbls, _egaf)
	}
	if _gfed.DropLines != nil {
		_acfbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gfed.DropLines, _acfbb)
	}
	if _gfed.HiLowLines != nil {
		_badgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gfed.HiLowLines, _badgd)
	}
	if _gfed.UpDownBars != nil {
		_ffgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_gfed.UpDownBars, _ffgb)
	}
	if _gfed.Marker != nil {
		_gdab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_gfed.Marker, _gdab)
	}
	if _gfed.Smooth != nil {
		_adggb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_gfed.Smooth, _adggb)
	}
	_adfga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eacg := range _gfed.AxId {
		e.EncodeElement(_eacg, _adfga)
	}
	if _gfed.ExtLst != nil {
		_cedcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfed.ExtLst, _cedcf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_MarkerStyle struct{ ValAttr ST_MarkerStyle }

func (_faggg *CT_MultiLvlStrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bfbdb:
	for {
		_dbac, _dcga := d.Token()
		if _dcga != nil {
			return _dcga
		}
		switch _gfbad := _dbac.(type) {
		case _e.StartElement:
			switch _gfbad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_faggg.PtCount = NewCT_UnsignedInt()
				if _gfac := d.DecodeElement(_faggg.PtCount, &_gfbad); _gfac != nil {
					return _gfac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_fdfa := NewCT_Lvl()
				if _adeb := d.DecodeElement(_fdfa, &_gfbad); _adeb != nil {
					return _adeb
				}
				_faggg.Lvl = append(_faggg.Lvl, _fdfa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_faggg.ExtLst = NewCT_ExtensionList()
				if _ebafb := d.DecodeElement(_faggg.ExtLst, &_gfbad); _ebafb != nil {
					return _ebafb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _gfbad.Name)
				if _dbefg := d.Skip(); _dbefg != nil {
					return _dbefg
				}
			}
		case _e.EndElement:
			break _bfbdb
		case _e.CharData:
		}
	}
	return nil
}

type CT_PlotAreaChoice1 struct {
	ValAx  []*CT_ValAx
	CatAx  []*CT_CatAx
	DateAx []*CT_DateAx
	SerAx  []*CT_SerAx
}

// Validate validates the CT_Orientation and its children
func (_caace *CT_Orientation) Validate() error {
	return _caace.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}

func NewCT_Style() *CT_Style { _ecbec := &CT_Style{}; _ecbec.ValAttr = 1; return _ecbec }

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_fbcgc *CT_NumData) ValidateWithPath(path string) error {
	if _fbcgc.PtCount != nil {
		if _gfeba := _fbcgc.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _gfeba != nil {
			return _gfeba
		}
	}
	for _feag, _dbaff := range _fbcgc.Pt {
		if _abbaa := _dbaff.ValidateWithPath(_bf.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _feag)); _abbaa != nil {
			return _abbaa
		}
	}
	if _fbcgc.ExtLst != nil {
		if _ebcaa := _fbcgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ebcaa != nil {
			return _ebcaa
		}
	}
	return nil
}

type CT_LblOffset struct{ ValAttr *ST_LblOffset }

func NewCT_Crosses() *CT_Crosses {
	_gacef := &CT_Crosses{}
	_gacef.ValAttr = ST_Crosses(1)
	return _gacef
}

func (_egeb *CT_Layout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dcfbc:
	for {
		_dabg, _ecdad := d.Token()
		if _ecdad != nil {
			return _ecdad
		}
		switch _ffcc := _dabg.(type) {
		case _e.StartElement:
			switch _ffcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_egeb.ManualLayout = NewCT_ManualLayout()
				if _caaf := d.DecodeElement(_egeb.ManualLayout, &_ffcc); _caaf != nil {
					return _caaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egeb.ExtLst = NewCT_ExtensionList()
				if _gbfbc := d.DecodeElement(_egeb.ExtLst, &_ffcc); _gbfbc != nil {
					return _gbfbc
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _ffcc.Name)
				if _gbaf := d.Skip(); _gbaf != nil {
					return _gbaf
				}
			}
		case _e.EndElement:
			break _dcfbc
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)

func NewCT_BubbleScale() *CT_BubbleScale { _fgba := &CT_BubbleScale{}; return _fgba }

// Validate validates the CT_StrRef and its children
func (_egec *CT_StrRef) Validate() error {
	return _egec.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

func NewCT_Chart() *CT_Chart { _faa := &CT_Chart{}; _faa.PlotArea = NewCT_PlotArea(); return _faa }

func (_eaaa *CT_PivotFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eaaa.PivotFmt != nil {
		_bcadd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _bbffe := range _eaaa.PivotFmt {
			e.EncodeElement(_bbffe, _bcadd)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ccab ST_RadarStyle) ValidateWithPath(path string) error {
	switch _ccab {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccab))
	}
	return nil
}

type ST_AxPos byte

type CT_AxPos struct{ ValAttr ST_AxPos }

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_ceegd *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _ceegd.Layout != nil {
		if _adac := _ceegd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _adac != nil {
			return _adac
		}
	}
	if _ceegd.Tx != nil {
		if _fabg := _ceegd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fabg != nil {
			return _fabg
		}
	}
	if _ceegd.SpPr != nil {
		if _agdg := _ceegd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _agdg != nil {
			return _agdg
		}
	}
	if _ceegd.TxPr != nil {
		if _cbgae := _ceegd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cbgae != nil {
			return _cbgae
		}
	}
	return nil
}

// Validate validates the CT_ExternalData and its children
func (_fcdg *CT_ExternalData) Validate() error {
	return _fcdg.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}

func (_aacbgd *EG_AxSharedChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gffgf:
	for {
		_ffag, _bggec := d.Token()
		if _bggec != nil {
			return _bggec
		}
		switch _bgfce := _ffag.(type) {
		case _e.StartElement:
			switch _bgfce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_aacbgd.Crosses = NewCT_Crosses()
				if _dcfdg := d.DecodeElement(_aacbgd.Crosses, &_bgfce); _dcfdg != nil {
					return _dcfdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_aacbgd.CrossesAt = NewCT_Double()
				if _ffbe := d.DecodeElement(_aacbgd.CrossesAt, &_bgfce); _ffbe != nil {
					return _ffbe
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bgfce.Name)
				if _acfge := d.Skip(); _acfge != nil {
					return _acfge
				}
			}
		case _e.EndElement:
			break _gffgf
		case _e.CharData:
		}
	}
	return nil
}

type CT_ErrValType struct{ ValAttr ST_ErrValType }

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_eggb *CT_HoleSize) ValidateWithPath(path string) error {
	if _eggb.ValAttr != nil {
		if _ecfc := _eggb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecfc != nil {
			return _ecfc
		}
	}
	return nil
}

type CT_ErrBars struct {
	ErrDir     *CT_ErrDir
	ErrBarType *CT_ErrBarType
	ErrValType *CT_ErrValType
	NoEndCap   *CT_Boolean
	Plus       *CT_NumDataSource
	Minus      *CT_NumDataSource
	Val        *CT_Double
	SpPr       *_cb.CT_ShapeProperties
	ExtLst     *CT_ExtensionList
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

func (_cfcaf *CT_Order) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cfcaf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_cfcaf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fbgga ST_Orientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_efdgc := _e.Attr{}
	_efdgc.Name = name
	switch _fbgga {
	case ST_OrientationUnset:
		_efdgc.Value = ""
	case ST_OrientationMaxMin:
		_efdgc.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_efdgc.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _efdgc, nil
}

func (_egcag *UserShapes) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _egcag.CT_Drawing.MarshalXML(e, start)
}

func (_eaef *ST_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ffgcaa, _fcaac := d.Token()
	if _fcaac != nil {
		return _fcaac
	}
	if _gadb, _fcgd := _ffgcaa.(_e.EndElement); _fcgd && _gadb.Name == start.Name {
		*_eaef = 1
		return nil
	}
	if _gcdda, _eccaf := _ffgcaa.(_e.CharData); !_eccaf {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffgcaa)
	} else {
		switch string(_gcdda) {
		case "":
			*_eaef = 0
		case "\u0063\u0075\u0073\u0074":
			*_eaef = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_eaef = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_eaef = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_eaef = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_eaef = 5
		}
	}
	_ffgcaa, _fcaac = d.Token()
	if _fcaac != nil {
		return _fcaac
	}
	if _aacde, _bgebb := _ffgcaa.(_e.EndElement); _bgebb && _aacde.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffgcaa)
}

func (_dcdba ST_SecondPieSize) String() string {
	if _dcdba.ST_SecondPieSizePercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_dcdba.ST_SecondPieSizePercent)
	}
	if _dcdba.ST_SecondPieSizeUShort != nil {
		return _bf.Sprintf("\u0025\u0076", *_dcdba.ST_SecondPieSizeUShort)
	}
	return ""
}

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_cggbf *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _cggbf.ValAttr <= 0 {
		return _bf.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cggbf.ValAttr)
	}
	return nil
}

func NewCT_BandFmts() *CT_BandFmts { _gcg := &CT_BandFmts{}; return _gcg }

type CT_RadarStyle struct{ ValAttr ST_RadarStyle }

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_babc *CT_PivotFmts) ValidateWithPath(path string) error {
	for _ddbcb, _eeffc := range _babc.PivotFmt {
		if _agaf := _eeffc.ValidateWithPath(_bf.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _ddbcb)); _agaf != nil {
			return _agaf
		}
	}
	return nil
}

func (_gbdcd ST_Shape) ValidateWithPath(path string) error {
	switch _gbdcd {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbdcd))
	}
	return nil
}

// Validate validates the EG_BarChartShared and its children
func (_eefc *EG_BarChartShared) Validate() error {
	return _eefc.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

func (_agb *CT_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agb.ValAttr = ST_DLblPos(1)
	for _, _bgba := range start.Attr {
		if _bgba.Name.Local == "\u0076\u0061\u006c" {
			_agb.ValAttr.UnmarshalXMLAttr(_bgba)
			continue
		}
	}
	for {
		_cff, _dacf := d.Token()
		if _dacf != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _dacf)
		}
		if _eddc, _gcba := _cff.(_e.EndElement); _gcba && _eddc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_gfe *CT_BandFmt) ValidateWithPath(path string) error {
	if _fae := _gfe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fae != nil {
		return _fae
	}
	if _gfe.SpPr != nil {
		if _acb := _gfe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acb != nil {
			return _acb
		}
	}
	return nil
}

func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _acae := &CT_DispUnitsChoice{}; return _acae }

// Validate validates the CT_DLblsChoice and its children
func (_aabf *CT_DLblsChoice) Validate() error {
	return _aabf.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_DispUnits and its children
func (_gcdd *CT_DispUnits) Validate() error {
	return _gcdd.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}

// Validate validates the CT_PageMargins and its children
func (_dccbd *CT_PageMargins) Validate() error {
	return _dccbd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}

type EG_PieChartShared struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
}

func (_ccfa *CT_Surface3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_geeaf:
	for {
		_fdbd, _bceca := d.Token()
		if _bceca != nil {
			return _bceca
		}
		switch _dcbade := _fdbd.(type) {
		case _e.StartElement:
			switch _dcbade.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_ccfa.Wireframe = NewCT_Boolean()
				if _ecfcc := d.DecodeElement(_ccfa.Wireframe, &_dcbade); _ecfcc != nil {
					return _ecfcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_agcd := NewCT_SurfaceSer()
				if _feeff := d.DecodeElement(_agcd, &_dcbade); _feeff != nil {
					return _feeff
				}
				_ccfa.Ser = append(_ccfa.Ser, _agcd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_ccfa.BandFmts = NewCT_BandFmts()
				if _cbebf := d.DecodeElement(_ccfa.BandFmts, &_dcbade); _cbebf != nil {
					return _cbebf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_abga := NewCT_UnsignedInt()
				if _ededd := d.DecodeElement(_abga, &_dcbade); _ededd != nil {
					return _ededd
				}
				_ccfa.AxId = append(_ccfa.AxId, _abga)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccfa.ExtLst = NewCT_ExtensionList()
				if _bfagf := d.DecodeElement(_ccfa.ExtLst, &_dcbade); _bfagf != nil {
					return _bfagf
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _dcbade.Name)
				if _aaege := d.Skip(); _aaege != nil {
					return _aaege
				}
			}
		case _e.EndElement:
			break _geeaf
		case _e.CharData:
		}
	}
	return nil
}

func (_aeabd ST_TickLblPos) String() string {
	switch _aeabd {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

func (_gcdc *CT_SerAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bbfge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_gcdc.AxId, _bbfge)
	_adfad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_gcdc.Scaling, _adfad)
	if _gcdc.Delete != nil {
		_ddga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gcdc.Delete, _ddga)
	}
	_abcc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_gcdc.AxPos, _abcc)
	if _gcdc.MajorGridlines != nil {
		_dbeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gcdc.MajorGridlines, _dbeg)
	}
	if _gcdc.MinorGridlines != nil {
		_ecgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gcdc.MinorGridlines, _ecgf)
	}
	if _gcdc.Title != nil {
		_fadab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_gcdc.Title, _fadab)
	}
	if _gcdc.NumFmt != nil {
		_gcfgfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gcdc.NumFmt, _gcfgfe)
	}
	if _gcdc.MajorTickMark != nil {
		_acddd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gcdc.MajorTickMark, _acddd)
	}
	if _gcdc.MinorTickMark != nil {
		_cacb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gcdc.MinorTickMark, _cacb)
	}
	if _gcdc.TickLblPos != nil {
		_ggggd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_gcdc.TickLblPos, _ggggd)
	}
	if _gcdc.SpPr != nil {
		_bggde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcdc.SpPr, _bggde)
	}
	if _gcdc.TxPr != nil {
		_fdefb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gcdc.TxPr, _fdefb)
	}
	_cfgda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_gcdc.CrossAx, _cfgda)
	if _gcdc.Choice != nil {
		_gcdc.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _gcdc.TickLblSkip != nil {
		_gbgdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gcdc.TickLblSkip, _gbgdc)
	}
	if _gcdc.TickMarkSkip != nil {
		_bcdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gcdc.TickMarkSkip, _bcdb)
	}
	if _gcdc.ExtLst != nil {
		_efdgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcdc.ExtLst, _efdgb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gfbae *CT_PictureOptions) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eafe:
	for {
		_ddec, _fggdfe := d.Token()
		if _fggdfe != nil {
			return _fggdfe
		}
		switch _ddgf := _ddec.(type) {
		case _e.StartElement:
			switch _ddgf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_gfbae.ApplyToFront = NewCT_Boolean()
				if _bfbfa := d.DecodeElement(_gfbae.ApplyToFront, &_ddgf); _bfbfa != nil {
					return _bfbfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_gfbae.ApplyToSides = NewCT_Boolean()
				if _dabf := d.DecodeElement(_gfbae.ApplyToSides, &_ddgf); _dabf != nil {
					return _dabf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_gfbae.ApplyToEnd = NewCT_Boolean()
				if _acec := d.DecodeElement(_gfbae.ApplyToEnd, &_ddgf); _acec != nil {
					return _acec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_gfbae.PictureFormat = NewCT_PictureFormat()
				if _cedce := d.DecodeElement(_gfbae.PictureFormat, &_ddgf); _cedce != nil {
					return _cedce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_gfbae.PictureStackUnit = NewCT_PictureStackUnit()
				if _gadff := d.DecodeElement(_gfbae.PictureStackUnit, &_ddgf); _gadff != nil {
					return _gadff
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _ddgf.Name)
				if _acba := d.Skip(); _acba != nil {
					return _acba
				}
			}
		case _e.EndElement:
			break _eafe
		case _e.CharData:
		}
	}
	return nil
}

func (_cddc *CT_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cddc.ValAttr != ST_OrientationUnset {
		_bfeae, _cdace := _cddc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cdace != nil {
			return _cdace
		}
		start.Attr = append(start.Attr, _bfeae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_cade *Chart) ValidateWithPath(path string) error {
	if _fegg := _cade.CT_RelId.ValidateWithPath(path); _fegg != nil {
		return _fegg
	}
	return nil
}

// Validate validates the CT_MarkerStyle and its children
func (_edda *CT_MarkerStyle) Validate() error {
	return _edda.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}

func NewCT_DispBlanksAs() *CT_DispBlanksAs { _gefg := &CT_DispBlanksAs{}; return _gefg }

func (_fbc *CT_BandFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbc.Idx = NewCT_UnsignedInt()
_bdge:
	for {
		_gdba, _edg := d.Token()
		if _edg != nil {
			return _edg
		}
		switch _fcg := _gdba.(type) {
		case _e.StartElement:
			switch _fcg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dea := d.DecodeElement(_fbc.Idx, &_fcg); _dea != nil {
					return _dea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbc.SpPr = _cb.NewCT_ShapeProperties()
				if _dcea := d.DecodeElement(_fbc.SpPr, &_fcg); _dcea != nil {
					return _dcea
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _fcg.Name)
				if _bba := d.Skip(); _bba != nil {
					return _bba
				}
			}
		case _e.EndElement:
			break _bdge
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_cfef *CT_ChartSpace) ValidateWithPath(path string) error {
	if _cfef.Date1904 != nil {
		if _dgag := _cfef.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _dgag != nil {
			return _dgag
		}
	}
	if _cfef.Lang != nil {
		if _cbfe := _cfef.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _cbfe != nil {
			return _cbfe
		}
	}
	if _cfef.RoundedCorners != nil {
		if _bgff := _cfef.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _bgff != nil {
			return _bgff
		}
	}
	if _cfef.Style != nil {
		if _gfgb := _cfef.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _gfgb != nil {
			return _gfgb
		}
	}
	if _cfef.ClrMapOvr != nil {
		if _cgcf := _cfef.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _cgcf != nil {
			return _cgcf
		}
	}
	if _cfef.PivotSource != nil {
		if _dgga := _cfef.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _dgga != nil {
			return _dgga
		}
	}
	if _cfef.Protection != nil {
		if _egb := _cfef.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _egb != nil {
			return _egb
		}
	}
	if _gdd := _cfef.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _gdd != nil {
		return _gdd
	}
	if _cfef.SpPr != nil {
		if _bddd := _cfef.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bddd != nil {
			return _bddd
		}
	}
	if _cfef.TxPr != nil {
		if _bcaa := _cfef.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bcaa != nil {
			return _bcaa
		}
	}
	if _cfef.ExternalData != nil {
		if _afcb := _cfef.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _afcb != nil {
			return _afcb
		}
	}
	if _cfef.PrintSettings != nil {
		if _fade := _cfef.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _fade != nil {
			return _fade
		}
	}
	if _cfef.UserShapes != nil {
		if _fff := _cfef.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _fff != nil {
			return _fff
		}
	}
	if _cfef.ExtLst != nil {
		if _gdde := _cfef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gdde != nil {
			return _gdde
		}
	}
	return nil
}

func (_bfe *CT_AreaSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_eae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bfe.Idx, _eae)
	_fdce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bfe.Order, _fdce)
	if _bfe.Tx != nil {
		_eaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bfe.Tx, _eaf)
	}
	if _bfe.SpPr != nil {
		_dfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bfe.SpPr, _dfb)
	}
	if _bfe.PictureOptions != nil {
		_bdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_bfe.PictureOptions, _bdg)
	}
	if _bfe.DPt != nil {
		_dca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _gf := range _bfe.DPt {
			e.EncodeElement(_gf, _dca)
		}
	}
	if _bfe.DLbls != nil {
		_gdb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bfe.DLbls, _gdb)
	}
	if _bfe.Trendline != nil {
		_cgd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _cd := range _bfe.Trendline {
			e.EncodeElement(_cd, _cgd)
		}
	}
	if _bfe.ErrBars != nil {
		_ccd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _cbb := range _bfe.ErrBars {
			e.EncodeElement(_cbb, _ccd)
		}
	}
	if _bfe.Cat != nil {
		_cbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bfe.Cat, _cbd)
	}
	if _bfe.Val != nil {
		_aaga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bfe.Val, _aaga)
	}
	if _bfe.ExtLst != nil {
		_gbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfe.ExtLst, _gbb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DateAx and its children
func (_fdde *CT_DateAx) Validate() error {
	return _fdde.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}

func (_dbcc *CT_CustSplit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bfge:
	for {
		_ggcd, _gcgb := d.Token()
		if _gcgb != nil {
			return _gcgb
		}
		switch _fcb := _ggcd.(type) {
		case _e.StartElement:
			switch _fcb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_cgag := NewCT_UnsignedInt()
				if _fdae := d.DecodeElement(_cgag, &_fcb); _fdae != nil {
					return _fdae
				}
				_dbcc.SecondPiePt = append(_dbcc.SecondPiePt, _cgag)
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _fcb.Name)
				if _cdcb := d.Skip(); _cdcb != nil {
					return _cdcb
				}
			}
		case _e.EndElement:
			break _bfge
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Order and its children
func (_dbfcd *CT_Order) Validate() error {
	return _dbfcd.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}

func (_acbb *CT_Boolean) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _acbb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_acbb.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_edgcc ST_CrossBetween) Validate() error { return _edgcc.ValidateWithPath("") }

func (_ggbcec *ST_GapAmount) ValidateWithPath(path string) error {
	_addbg := []string{}
	if _ggbcec.ST_GapAmountPercent != nil {
		_addbg = append(_addbg, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ggbcec.ST_GapAmountUShort != nil {
		_addbg = append(_addbg, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_addbg) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _addbg)
	}
	return nil
}

type CT_RotX struct{ ValAttr *int8 }

func (_dcbgf ST_DLblPos) Validate() error { return _dcbgf.ValidateWithPath("") }

// Validate validates the CT_View3D and its children
func (_afcce *CT_View3D) Validate() error {
	return _afcce.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}

type ST_LayoutMode byte

func (_cbcfg ST_Grouping) ValidateWithPath(path string) error {
	switch _cbcfg {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbcfg))
	}
	return nil
}

// Validate validates the CT_HPercent and its children
func (_dcbdc *CT_HPercent) Validate() error {
	return _dcbdc.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}

var ST_HoleSizePercentPatternRe = _ef.MustCompile(ST_HoleSizePercentPattern)

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_cb.CT_ShapeProperties
}

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_ccgc *CT_ErrBarType) ValidateWithPath(path string) error {
	if _efag := _ccgc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _efag != nil {
		return _efag
	}
	return nil
}

func (_bgaf *CT_Double) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _bgaf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_StrData() *CT_StrData { _gfgeb := &CT_StrData{}; return _gfgeb }

func (_edfgac *CT_Skip) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _edfgac.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gbabf *CT_SecondPieSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aeea := range start.Attr {
		if _aeea.Name.Local == "\u0076\u0061\u006c" {
			_dbcbec, _bgcbb := ParseUnionST_SecondPieSize(_aeea.Value)
			if _bgcbb != nil {
				return _bgcbb
			}
			_gbabf.ValAttr = &_dbcbec
			continue
		}
	}
	for {
		_cfbed, _gfccc := d.Token()
		if _gfccc != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _gfccc)
		}
		if _efcaf, _acfg := _cfbed.(_e.EndElement); _acfg && _efcaf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fdbf *CT_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fdbf.ValAttr != ST_TimeUnitUnset {
		_caaa, _cecbd := _fdbf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cecbd != nil {
			return _cecbd
		}
		start.Attr = append(start.Attr, _caaa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dadca *CT_Extension) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _abacg := range start.Attr {
		if _abacg.Name.Local == "\u0075\u0072\u0069" {
			_bcaaf, _efaeee := _abacg.Value, error(nil)
			if _efaeee != nil {
				return _efaeee
			}
			_dadca.UriAttr = &_bcaaf
			continue
		}
	}
_edfb:
	for {
		_ceff, _dcff := d.Token()
		if _dcff != nil {
			return _dcff
		}
		switch _dffd := _ceff.(type) {
		case _e.StartElement:
			switch _dffd.Name {
			default:
				if _egde, _aeeg := _ba.CreateElement(_dffd); _aeeg != nil {
					return _aeeg
				} else {
					if _ecc := d.DecodeElement(_egde, &_dffd); _ecc != nil {
						return _ecc
					}
					_dadca.Any = _egde
				}
			}
		case _e.EndElement:
			break _edfb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_LayoutTarget and its children
func (_gffb *CT_LayoutTarget) Validate() error {
	return _gffb.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}

func (_fcacb ST_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fcacb.String(), start)
}

func NewChartSpace() *ChartSpace {
	_geeffb := &ChartSpace{}
	_geeffb.CT_ChartSpace = *NewCT_ChartSpace()
	return _geeffb
}

type CT_BandFmts struct{ BandFmt []*CT_BandFmt }

func (_eagad *CT_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cdggb := range start.Attr {
		if _cdggb.Name.Local == "\u0076\u0061\u006c" {
			_eagad.ValAttr.UnmarshalXMLAttr(_cdggb)
			continue
		}
	}
	for {
		_cdccf, _bbacc := d.Token()
		if _bbacc != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _bbacc)
		}
		if _baac, _efdde := _cdccf.(_e.EndElement); _efdde && _baac.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ErrBarType and its children
func (_fecf *CT_ErrBarType) Validate() error {
	return _fecf.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_eccf *CT_TxChoice) ValidateWithPath(path string) error {
	if _eccf.StrRef != nil {
		if _ddfb := _eccf.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _ddfb != nil {
			return _ddfb
		}
	}
	if _eccf.Rich != nil {
		if _deeg := _eccf.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _deeg != nil {
			return _deeg
		}
	}
	return nil
}

type CT_Protection struct {
	ChartObject   *CT_Boolean
	Data          *CT_Boolean
	Formatting    *CT_Boolean
	Selection     *CT_Boolean
	UserInterface *CT_Boolean
}

func (_deb *CT_AreaChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fbb:
	for {
		_cf, _ad := d.Token()
		if _ad != nil {
			return _ad
		}
		switch _gc := _cf.(type) {
		case _e.StartElement:
			switch _gc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_deb.Grouping = NewCT_Grouping()
				if _bfb := d.DecodeElement(_deb.Grouping, &_gc); _bfb != nil {
					return _bfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_deb.VaryColors = NewCT_Boolean()
				if _bab := d.DecodeElement(_deb.VaryColors, &_gc); _bab != nil {
					return _bab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfbg := NewCT_AreaSer()
				if _eg := d.DecodeElement(_bfbg, &_gc); _eg != nil {
					return _eg
				}
				_deb.Ser = append(_deb.Ser, _bfbg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_deb.DLbls = NewCT_DLbls()
				if _eff := d.DecodeElement(_deb.DLbls, &_gc); _eff != nil {
					return _eff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_deb.DropLines = NewCT_ChartLines()
				if _eec := d.DecodeElement(_deb.DropLines, &_gc); _eec != nil {
					return _eec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bef := NewCT_UnsignedInt()
				if _ga := d.DecodeElement(_bef, &_gc); _ga != nil {
					return _ga
				}
				_deb.AxId = append(_deb.AxId, _bef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deb.ExtLst = NewCT_ExtensionList()
				if _bde := d.DecodeElement(_deb.ExtLst, &_gc); _bde != nil {
					return _bde
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _gc.Name)
				if _abf := d.Skip(); _abf != nil {
					return _abf
				}
			}
		case _e.EndElement:
			break _fbb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_dgffb *CT_RadarSer) ValidateWithPath(path string) error {
	if _dbffc := _dgffb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _dbffc != nil {
		return _dbffc
	}
	if _ddaed := _dgffb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ddaed != nil {
		return _ddaed
	}
	if _dgffb.Tx != nil {
		if _bgdggd := _dgffb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bgdggd != nil {
			return _bgdggd
		}
	}
	if _dgffb.SpPr != nil {
		if _dageca := _dgffb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dageca != nil {
			return _dageca
		}
	}
	if _dgffb.Marker != nil {
		if _bbeccg := _dgffb.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bbeccg != nil {
			return _bbeccg
		}
	}
	for _agcf, _cefge := range _dgffb.DPt {
		if _fgfb := _cefge.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _agcf)); _fgfb != nil {
			return _fgfb
		}
	}
	if _dgffb.DLbls != nil {
		if _dcgef := _dgffb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dcgef != nil {
			return _dcgef
		}
	}
	if _dgffb.Cat != nil {
		if _dabc := _dgffb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _dabc != nil {
			return _dabc
		}
	}
	if _dgffb.Val != nil {
		if _dbdb := _dgffb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _dbdb != nil {
			return _dbdb
		}
	}
	if _dgffb.ExtLst != nil {
		if _gbaeg := _dgffb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbaeg != nil {
			return _gbaeg
		}
	}
	return nil
}

func (_aadbe *ST_PictureFormat) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_aadbe = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_aadbe = 1
	case "\u0073\u0074\u0061c\u006b":
		*_aadbe = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_aadbe = 3
	}
	return nil
}

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_dcfa *CT_DTable) ValidateWithPath(path string) error {
	if _dcfa.ShowHorzBorder != nil {
		if _bdcd := _dcfa.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _bdcd != nil {
			return _bdcd
		}
	}
	if _dcfa.ShowVertBorder != nil {
		if _afgc := _dcfa.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _afgc != nil {
			return _afgc
		}
	}
	if _dcfa.ShowOutline != nil {
		if _ffcda := _dcfa.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _ffcda != nil {
			return _ffcda
		}
	}
	if _dcfa.ShowKeys != nil {
		if _dfbef := _dcfa.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _dfbef != nil {
			return _dfbef
		}
	}
	if _dcfa.SpPr != nil {
		if _bbeca := _dcfa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bbeca != nil {
			return _bbeca
		}
	}
	if _dcfa.TxPr != nil {
		if _dbdeb := _dcfa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dbdeb != nil {
			return _dbdeb
		}
	}
	if _dcfa.ExtLst != nil {
		if _effa := _dcfa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _effa != nil {
			return _effa
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_ecgaf *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _ecgaf.Grouping != nil {
		if _efbef := _ecgaf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _efbef != nil {
			return _efbef
		}
	}
	if _ecgaf.VaryColors != nil {
		if _beggb := _ecgaf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _beggb != nil {
			return _beggb
		}
	}
	for _ccded, _beabg := range _ecgaf.Ser {
		if _ecdcd := _beabg.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ccded)); _ecdcd != nil {
			return _ecdcd
		}
	}
	if _ecgaf.DLbls != nil {
		if _cfda := _ecgaf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cfda != nil {
			return _cfda
		}
	}
	if _ecgaf.DropLines != nil {
		if _egcga := _ecgaf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _egcga != nil {
			return _egcga
		}
	}
	return nil
}

func (_dcef *CT_Bar3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_dcef.BarDir, _fea)
	if _dcef.Grouping != nil {
		_bfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dcef.Grouping, _bfg)
	}
	if _dcef.VaryColors != nil {
		_ccda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dcef.VaryColors, _ccda)
	}
	if _dcef.Ser != nil {
		_efcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _effc := range _dcef.Ser {
			e.EncodeElement(_effc, _efcg)
		}
	}
	if _dcef.DLbls != nil {
		_fabc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dcef.DLbls, _fabc)
	}
	if _dcef.GapWidth != nil {
		_ggb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_dcef.GapWidth, _ggb)
	}
	if _dcef.GapDepth != nil {
		_gec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_dcef.GapDepth, _gec)
	}
	if _dcef.Shape != nil {
		_eag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_dcef.Shape, _eag)
	}
	_eacc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fcae := range _dcef.AxId {
		e.EncodeElement(_fcae, _eacc)
	}
	if _dcef.ExtLst != nil {
		_baa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcef.ExtLst, _baa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ErrDir struct{ ValAttr ST_ErrDir }

func (_efdef ST_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_efdef.String(), start)
}

func (_bccd ST_Crosses) Validate() error { return _bccd.ValidateWithPath("") }

func (_fdabb ST_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdabb.String(), start)
}

func (_gbaba *CT_PlotAreaChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gddeb:
	for {
		_cccb, _daaeb := d.Token()
		if _daaeb != nil {
			return _daaeb
		}
		switch _cgbga := _cccb.(type) {
		case _e.StartElement:
			switch _cgbga.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_gbaba.AreaChart = NewCT_AreaChart()
				if _cefeg := d.DecodeElement(_gbaba.AreaChart, &_cgbga); _cefeg != nil {
					return _cefeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.Area3DChart = NewCT_Area3DChart()
				if _ebaac := d.DecodeElement(_gbaba.Area3DChart, &_cgbga); _ebaac != nil {
					return _ebaac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_gbaba.LineChart = NewCT_LineChart()
				if _daec := d.DecodeElement(_gbaba.LineChart, &_cgbga); _daec != nil {
					return _daec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.Line3DChart = NewCT_Line3DChart()
				if _ddbbc := d.DecodeElement(_gbaba.Line3DChart, &_cgbga); _ddbbc != nil {
					return _ddbbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.StockChart = NewCT_StockChart()
				if _ggbfa := d.DecodeElement(_gbaba.StockChart, &_cgbga); _ggbfa != nil {
					return _ggbfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.RadarChart = NewCT_RadarChart()
				if _ddcc := d.DecodeElement(_gbaba.RadarChart, &_cgbga); _ddcc != nil {
					return _ddcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.ScatterChart = NewCT_ScatterChart()
				if _ebbb := d.DecodeElement(_gbaba.ScatterChart, &_cgbga); _ebbb != nil {
					return _ebbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.PieChart = NewCT_PieChart()
				if _beecf := d.DecodeElement(_gbaba.PieChart, &_cgbga); _beecf != nil {
					return _beecf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.Pie3DChart = NewCT_Pie3DChart()
				if _cbafd := d.DecodeElement(_gbaba.Pie3DChart, &_cgbga); _cbafd != nil {
					return _cbafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.DoughnutChart = NewCT_DoughnutChart()
				if _beadc := d.DecodeElement(_gbaba.DoughnutChart, &_cgbga); _beadc != nil {
					return _beadc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.BarChart = NewCT_BarChart()
				if _edbgg := d.DecodeElement(_gbaba.BarChart, &_cgbga); _edbgg != nil {
					return _edbgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.Bar3DChart = NewCT_Bar3DChart()
				if _daaa := d.DecodeElement(_gbaba.Bar3DChart, &_cgbga); _daaa != nil {
					return _daaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.OfPieChart = NewCT_OfPieChart()
				if _dgdbf := d.DecodeElement(_gbaba.OfPieChart, &_cgbga); _dgdbf != nil {
					return _dgdbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.SurfaceChart = NewCT_SurfaceChart()
				if _eafc := d.DecodeElement(_gbaba.SurfaceChart, &_cgbga); _eafc != nil {
					return _eafc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_gbaba.Surface3DChart = NewCT_Surface3DChart()
				if _efed := d.DecodeElement(_gbaba.Surface3DChart, &_cgbga); _efed != nil {
					return _efed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_gbaba.BubbleChart = NewCT_BubbleChart()
				if _efgec := d.DecodeElement(_gbaba.BubbleChart, &_cgbga); _efgec != nil {
					return _efgec
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cgbga.Name)
				if _gcbac := d.Skip(); _gcbac != nil {
					return _gcbac
				}
			}
		case _e.EndElement:
			break _gddeb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_cfcgg *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _bgfc := _cfcgg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bgfc != nil {
		return _bgfc
	}
	return nil
}

func (_beecg *ST_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcabd, _geed := d.Token()
	if _geed != nil {
		return _geed
	}
	if _cbeed, _gdgdg := _bcabd.(_e.EndElement); _gdgdg && _cbeed.Name == start.Name {
		*_beecg = 1
		return nil
	}
	if _cefa, _fdece := _bcabd.(_e.CharData); !_fdece {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bcabd)
	} else {
		switch string(_cefa) {
		case "":
			*_beecg = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_beecg = 1
		case "\u006d\u0061\u0078":
			*_beecg = 2
		case "\u006d\u0069\u006e":
			*_beecg = 3
		}
	}
	_bcabd, _geed = d.Token()
	if _geed != nil {
		return _geed
	}
	if _daadb, _gafda := _bcabd.(_e.EndElement); _gafda && _daadb.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bcabd)
}

func (_fag *CT_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aae := range start.Attr {
		if _aae.Name.Local == "\u0076\u0061\u006c" {
			_fag.ValAttr.UnmarshalXMLAttr(_aae)
			continue
		}
	}
	for {
		_deea, _caff := d.Token()
		if _caff != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _caff)
		}
		if _adgf, _gca := _deea.(_e.EndElement); _gca && _adgf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_aaff *CT_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bcdg := range start.Attr {
		if _bcdg.Name.Local == "\u0076\u0061\u006c" {
			_aaff.ValAttr.UnmarshalXMLAttr(_bcdg)
			continue
		}
	}
	for {
		_bcgd, _ddae := d.Token()
		if _ddae != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _ddae)
		}
		if _cdab, _bdgb := _bcgd.(_e.EndElement); _bdgb && _cdab.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_cecce *CT_LblAlgn) ValidateWithPath(path string) error {
	if _cecce.ValAttr == ST_LblAlgnUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbda := _cecce.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbda != nil {
		return _bbda
	}
	return nil
}

type ChartSpace struct{ CT_ChartSpace }

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_aaca *CT_View3D) ValidateWithPath(path string) error {
	if _aaca.RotX != nil {
		if _fdgb := _aaca.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _fdgb != nil {
			return _fdgb
		}
	}
	if _aaca.HPercent != nil {
		if _befba := _aaca.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _befba != nil {
			return _befba
		}
	}
	if _aaca.RotY != nil {
		if _afgae := _aaca.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _afgae != nil {
			return _afgae
		}
	}
	if _aaca.DepthPercent != nil {
		if _fddeeg := _aaca.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fddeeg != nil {
			return _fddeeg
		}
	}
	if _aaca.RAngAx != nil {
		if _ecdb := _aaca.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _ecdb != nil {
			return _ecdb
		}
	}
	if _aaca.Perspective != nil {
		if _egcfd := _aaca.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _egcfd != nil {
			return _egcfd
		}
	}
	if _aaca.ExtLst != nil {
		if _bgeg := _aaca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgeg != nil {
			return _bgeg
		}
	}
	return nil
}

func (_bbdddg *CT_Style) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bbdddg.ValAttr = 1
	for _, _ceacg := range start.Attr {
		if _ceacg.Name.Local == "\u0076\u0061\u006c" {
			_egbgc, _edec := _b.ParseUint(_ceacg.Value, 10, 8)
			if _edec != nil {
				return _edec
			}
			_bbdddg.ValAttr = uint8(_egbgc)
			continue
		}
	}
	for {
		_gdfg, _gegeg := d.Token()
		if _gegeg != nil {
			return _bf.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _gegeg)
		}
		if _agdcg, _ffba := _gdfg.(_e.EndElement); _ffba && _agdcg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ebfdff *CT_PivotFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ggbag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ebfdff.Idx, _ggbag)
	if _ebfdff.SpPr != nil {
		_fafaab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebfdff.SpPr, _fafaab)
	}
	if _ebfdff.TxPr != nil {
		_deadc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ebfdff.TxPr, _deadc)
	}
	if _ebfdff.Marker != nil {
		_cfdef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ebfdff.Marker, _cfdef)
	}
	if _ebfdff.DLbl != nil {
		_cdacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_ebfdff.DLbl, _cdacf)
	}
	if _ebfdff.ExtLst != nil {
		_bbdef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebfdff.ExtLst, _bbdef)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type EG_LineChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

type CT_FirstSliceAng struct{ ValAttr *uint16 }

// Validate validates the CT_SerAx and its children
func (_cfbca *CT_SerAx) Validate() error {
	return _cfbca.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}

func (_cc *CT_Area3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cc.Grouping != nil {
		_a := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cc.Grouping, _a)
	}
	if _cc.VaryColors != nil {
		_dc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cc.VaryColors, _dc)
	}
	if _cc.Ser != nil {
		_bfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fg := range _cc.Ser {
			e.EncodeElement(_fg, _bfc)
		}
	}
	if _cc.DLbls != nil {
		_cbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cc.DLbls, _cbe)
	}
	if _cc.DropLines != nil {
		_fd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cc.DropLines, _fd)
	}
	if _cc.GapDepth != nil {
		_be := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_cc.GapDepth, _be)
	}
	_fb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ece := range _cc.AxId {
		e.EncodeElement(_ece, _fb)
	}
	if _cc.ExtLst != nil {
		_ge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cc.ExtLst, _ge)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_ccgfe *CT_TimeUnit) ValidateWithPath(path string) error {
	if _fagc := _ccgfe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fagc != nil {
		return _fagc
	}
	return nil
}

func (_abb *CT_AxisUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _abb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_egbe *ChartSpace) ValidateWithPath(path string) error {
	if _cggbc := _egbe.CT_ChartSpace.ValidateWithPath(path); _cggbc != nil {
		return _cggbc
	}
	return nil
}

// Validate validates the CT_CrossBetween and its children
func (_agdf *CT_CrossBetween) Validate() error {
	return _agdf.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}

// Validate validates the CT_PivotFmts and its children
func (_dcbac *CT_PivotFmts) Validate() error {
	return _dcbac.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}

type EG_BarChartShared struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
}

func (_gdbc *CT_RelId) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _egeg := range start.Attr {
		if _egeg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _egeg.Name.Local == "\u0069\u0064" || _egeg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _egeg.Name.Local == "\u0069\u0064" {
			_fccb, _ebfda := _egeg.Value, error(nil)
			if _ebfda != nil {
				return _ebfda
			}
			_gdbc.IdAttr = _fccb
			continue
		}
	}
	for {
		_gdgad, _fcfee := d.Token()
		if _fcfee != nil {
			return _bf.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _fcfee)
		}
		if _ggaad, _affa := _gdgad.(_e.EndElement); _affa && _ggaad.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_SerAx() *CT_SerAx {
	_ggfgg := &CT_SerAx{}
	_ggfgg.AxId = NewCT_UnsignedInt()
	_ggfgg.Scaling = NewCT_Scaling()
	_ggfgg.AxPos = NewCT_AxPos()
	_ggfgg.CrossAx = NewCT_UnsignedInt()
	return _ggfgg
}

func NewCT_ValAx() *CT_ValAx {
	_cgffb := &CT_ValAx{}
	_cgffb.AxId = NewCT_UnsignedInt()
	_cgffb.Scaling = NewCT_Scaling()
	_cgffb.AxPos = NewCT_AxPos()
	_cgffb.CrossAx = NewCT_UnsignedInt()
	return _cgffb
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

func (_ccef *CT_BubbleSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dfde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ccef.Idx, _dfde)
	_fdea := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_ccef.Order, _fdea)
	if _ccef.Tx != nil {
		_ccgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ccef.Tx, _ccgd)
	}
	if _ccef.SpPr != nil {
		_agfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ccef.SpPr, _agfe)
	}
	if _ccef.InvertIfNegative != nil {
		_aac := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_ccef.InvertIfNegative, _aac)
	}
	if _ccef.DPt != nil {
		_dfba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cbbf := range _ccef.DPt {
			e.EncodeElement(_cbbf, _dfba)
		}
	}
	if _ccef.DLbls != nil {
		_gbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ccef.DLbls, _gbe)
	}
	if _ccef.Trendline != nil {
		_gba := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fged := range _ccef.Trendline {
			e.EncodeElement(_fged, _gba)
		}
	}
	if _ccef.ErrBars != nil {
		_bege := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _fgdb := range _ccef.ErrBars {
			e.EncodeElement(_fgdb, _bege)
		}
	}
	if _ccef.XVal != nil {
		_ffcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_ccef.XVal, _ffcb)
	}
	if _ccef.YVal != nil {
		_gfbbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_ccef.YVal, _gfbbb)
	}
	if _ccef.BubbleSize != nil {
		_dfec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ccef.BubbleSize, _dfec)
	}
	if _ccef.Bubble3D != nil {
		_gfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_ccef.Bubble3D, _gfc)
	}
	if _ccef.ExtLst != nil {
		_fgee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccef.ExtLst, _fgee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewEG_AxShared() *EG_AxShared {
	_ccgge := &EG_AxShared{}
	_ccgge.AxId = NewCT_UnsignedInt()
	_ccgge.Scaling = NewCT_Scaling()
	_ccgge.AxPos = NewCT_AxPos()
	_ccgge.CrossAx = NewCT_UnsignedInt()
	return _ccgge
}

// Validate validates the CT_Overlap and its children
func (_bacg *CT_Overlap) Validate() error {
	return _bacg.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_bbaec *Group_DLbl) ValidateWithPath(path string) error {
	if _bbaec.Layout != nil {
		if _dcbacc := _bbaec.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _dcbacc != nil {
			return _dcbacc
		}
	}
	if _bbaec.Tx != nil {
		if _cebg := _bbaec.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cebg != nil {
			return _cebg
		}
	}
	if _bbaec.NumFmt != nil {
		if _cbbdd := _bbaec.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cbbdd != nil {
			return _cbbdd
		}
	}
	if _bbaec.SpPr != nil {
		if _acge := _bbaec.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acge != nil {
			return _acge
		}
	}
	if _bbaec.TxPr != nil {
		if _ccgaa := _bbaec.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ccgaa != nil {
			return _ccgaa
		}
	}
	if _bbaec.DLblPos != nil {
		if _aabfe := _bbaec.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _aabfe != nil {
			return _aabfe
		}
	}
	if _bbaec.ShowLegendKey != nil {
		if _defbb := _bbaec.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _defbb != nil {
			return _defbb
		}
	}
	if _bbaec.ShowVal != nil {
		if _fcde := _bbaec.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _fcde != nil {
			return _fcde
		}
	}
	if _bbaec.ShowCatName != nil {
		if _fdgcb := _bbaec.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _fdgcb != nil {
			return _fdgcb
		}
	}
	if _bbaec.ShowSerName != nil {
		if _bedfe := _bbaec.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _bedfe != nil {
			return _bedfe
		}
	}
	if _bbaec.ShowPercent != nil {
		if _cccg := _bbaec.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _cccg != nil {
			return _cccg
		}
	}
	if _bbaec.ShowBubbleSize != nil {
		if _fdfbb := _bbaec.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fdfbb != nil {
			return _fdfbb
		}
	}
	return nil
}

func (_gcbab *CT_RadarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_becg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gcbab.Idx, _becg)
	_cfad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_gcbab.Order, _cfad)
	if _gcbab.Tx != nil {
		_afgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gcbab.Tx, _afgf)
	}
	if _gcbab.SpPr != nil {
		_ggbcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcbab.SpPr, _ggbcc)
	}
	if _gcbab.Marker != nil {
		_ddbda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_gcbab.Marker, _ddbda)
	}
	if _gcbab.DPt != nil {
		_gfdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _eeddf := range _gcbab.DPt {
			e.EncodeElement(_eeddf, _gfdg)
		}
	}
	if _gcbab.DLbls != nil {
		_aacc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gcbab.DLbls, _aacc)
	}
	if _gcbab.Cat != nil {
		_ddgcga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_gcbab.Cat, _ddgcga)
	}
	if _gcbab.Val != nil {
		_cdea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_gcbab.Val, _cdea)
	}
	if _gcbab.ExtLst != nil {
		_edgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcbab.ExtLst, _edgg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_OfPieChart() *CT_OfPieChart {
	_ecgc := &CT_OfPieChart{}
	_ecgc.OfPieType = NewCT_OfPieType()
	return _ecgc
}

func (_ddee *CT_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_debdc, _dfedc := _ddee.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _dfedc != nil {
		return _dfedc
	}
	start.Attr = append(start.Attr, _debdc)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bbbc *CT_DPt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bbbc.Idx = NewCT_UnsignedInt()
_bgdb:
	for {
		_eeag, _bdbbf := d.Token()
		if _bdbbf != nil {
			return _bdbbf
		}
		switch _ccge := _eeag.(type) {
		case _e.StartElement:
			switch _ccge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gaec := d.DecodeElement(_bbbc.Idx, &_ccge); _gaec != nil {
					return _gaec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_bbbc.InvertIfNegative = NewCT_Boolean()
				if _fgbb := d.DecodeElement(_bbbc.InvertIfNegative, &_ccge); _fgbb != nil {
					return _fgbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_bbbc.Marker = NewCT_Marker()
				if _bdeb := d.DecodeElement(_bbbc.Marker, &_ccge); _bdeb != nil {
					return _bdeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_bbbc.Bubble3D = NewCT_Boolean()
				if _bgec := d.DecodeElement(_bbbc.Bubble3D, &_ccge); _bgec != nil {
					return _bgec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_bbbc.Explosion = NewCT_UnsignedInt()
				if _ddfc := d.DecodeElement(_bbbc.Explosion, &_ccge); _ddfc != nil {
					return _ddfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bbbc.SpPr = _cb.NewCT_ShapeProperties()
				if _debac := d.DecodeElement(_bbbc.SpPr, &_ccge); _debac != nil {
					return _debac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_bbbc.PictureOptions = NewCT_PictureOptions()
				if _fgaag := d.DecodeElement(_bbbc.PictureOptions, &_ccge); _fgaag != nil {
					return _fgaag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbbc.ExtLst = NewCT_ExtensionList()
				if _fccf := d.DecodeElement(_bbbc.ExtLst, &_ccge); _fccf != nil {
					return _fccf
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _ccge.Name)
				if _gdcg := d.Skip(); _gdcg != nil {
					return _gdcg
				}
			}
		case _e.EndElement:
			break _bgdb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_ccbff *EG_BarChartShared) ValidateWithPath(path string) error {
	if _gcabc := _ccbff.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _gcabc != nil {
		return _gcabc
	}
	if _ccbff.Grouping != nil {
		if _faddf := _ccbff.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _faddf != nil {
			return _faddf
		}
	}
	if _ccbff.VaryColors != nil {
		if _afebc := _ccbff.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _afebc != nil {
			return _afebc
		}
	}
	for _faeed, _eagdd := range _ccbff.Ser {
		if _dcabcc := _eagdd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _faeed)); _dcabcc != nil {
			return _dcabcc
		}
	}
	if _ccbff.DLbls != nil {
		if _cgbfe := _ccbff.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cgbfe != nil {
			return _cgbfe
		}
	}
	return nil
}

func NewCT_AxDataSource() *CT_AxDataSource {
	_fbf := &CT_AxDataSource{}
	_fbf.Choice = NewCT_AxDataSourceChoice()
	return _fbf
}

func (_gddcb *ST_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecebd, _dbbfc := d.Token()
	if _dbbfc != nil {
		return _dbbfc
	}
	if _dfbcb, _gccbf := _ecebd.(_e.EndElement); _gccbf && _dfbcb.Name == start.Name {
		*_gddcb = 1
		return nil
	}
	if _edged, _ddecc := _ecebd.(_e.CharData); !_ddecc {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ecebd)
	} else {
		switch string(_edged) {
		case "":
			*_gddcb = 0
		case "\u0073\u0070\u0061\u006e":
			*_gddcb = 1
		case "\u0067\u0061\u0070":
			*_gddcb = 2
		case "\u007a\u0065\u0072\u006f":
			*_gddcb = 3
		}
	}
	_ecebd, _dbbfc = d.Token()
	if _dbbfc != nil {
		return _dbbfc
	}
	if _bdcea, _fgaege := _ecebd.(_e.EndElement); _fgaege && _bdcea.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ecebd)
}

func (_agf *CT_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cfab := range start.Attr {
		if _cfab.Name.Local == "\u0076\u0061\u006c" {
			_agf.ValAttr.UnmarshalXMLAttr(_cfab)
			continue
		}
	}
	for {
		_gcc, _ddfe := d.Token()
		if _ddfe != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _ddfe)
		}
		if _ffa, _befa := _gcc.(_e.EndElement); _befa && _ffa.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_BarGrouping() *CT_BarGrouping { _bgc := &CT_BarGrouping{}; return _bgc }

func NewCT_Legend() *CT_Legend { _ggab := &CT_Legend{}; return _ggab }

func (_bdbeg *ST_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acfec, _bddbdg := d.Token()
	if _bddbdg != nil {
		return _bddbdg
	}
	if _bcbec, _fccfe := _acfec.(_e.EndElement); _fccfe && _bcbec.Name == start.Name {
		*_bdbeg = 1
		return nil
	}
	if _fedge, _dafbb := _acfec.(_e.CharData); !_dafbb {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acfec)
	} else {
		switch string(_fedge) {
		case "":
			*_bdbeg = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_bdbeg = 1
		case "\u0064\u0061\u0073\u0068":
			*_bdbeg = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_bdbeg = 3
		case "\u0064\u006f\u0074":
			*_bdbeg = 4
		case "\u006e\u006f\u006e\u0065":
			*_bdbeg = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_bdbeg = 6
		case "\u0070\u006c\u0075\u0073":
			*_bdbeg = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_bdbeg = 8
		case "\u0073\u0074\u0061\u0072":
			*_bdbeg = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_bdbeg = 10
		case "\u0078":
			*_bdbeg = 11
		case "\u0061\u0075\u0074\u006f":
			*_bdbeg = 12
		}
	}
	_acfec, _bddbdg = d.Token()
	if _bddbdg != nil {
		return _bddbdg
	}
	if _aade, _gdbfg := _acfec.(_e.EndElement); _gdbfg && _aade.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acfec)
}

// Validate validates the CT_ErrDir and its children
func (_bfca *CT_ErrDir) Validate() error {
	return _bfca.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}

type CT_LegendPos struct{ ValAttr ST_LegendPos }

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_bbdfe *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _bbdfe.ValAttr != nil {
		if _gffba := _bbdfe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gffba != nil {
			return _gffba
		}
	}
	return nil
}

type Group_DLbls struct {
	NumFmt          *CT_NumFmt
	SpPr            *_cb.CT_ShapeProperties
	TxPr            *_cb.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

func (_dccgc *CT_Surface3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dccgc.Wireframe != nil {
		_bbbba := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_dccgc.Wireframe, _bbbba)
	}
	if _dccgc.Ser != nil {
		_aaadg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bgddg := range _dccgc.Ser {
			e.EncodeElement(_bgddg, _aaadg)
		}
	}
	if _dccgc.BandFmts != nil {
		_gacgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_dccgc.BandFmts, _gacgg)
	}
	_beaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _befbc := range _dccgc.AxId {
		e.EncodeElement(_befbc, _beaf)
	}
	if _dccgc.ExtLst != nil {
		_bbgbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dccgc.ExtLst, _bbgbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_cedbbe, _aaea := _b.ParseUint(s, 10, 32)
	if _aaea != nil {
		return ST_Thickness{}, _aaea
	}
	_bebad := uint32(_cedbbe)
	return ST_Thickness{Uint32: &_bebad}, nil
}

// Validate validates the EG_LegendEntryData and its children
func (_ceda *EG_LegendEntryData) Validate() error {
	return _ceda.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}

func (_edacc ST_Thickness) String() string {
	if _edacc.ST_ThicknessPercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_edacc.ST_ThicknessPercent)
	}
	if _edacc.Uint32 != nil {
		return _bf.Sprintf("\u0025\u0076", *_edacc.Uint32)
	}
	return ""
}

// Validate validates the CT_NumRef and its children
func (_beba *CT_NumRef) Validate() error {
	return _beba.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}

func NewGroup_DLbl() *Group_DLbl { _daedf := &Group_DLbl{}; return _daedf }

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

func (_ddafc *CT_HPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _adfc := range start.Attr {
		if _adfc.Name.Local == "\u0076\u0061\u006c" {
			_gbfb, _faab := ParseUnionST_HPercent(_adfc.Value)
			if _faab != nil {
				return _faab
			}
			_ddafc.ValAttr = &_gbfb
			continue
		}
	}
	for {
		_agccb, _aadg := d.Token()
		if _aadg != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _aadg)
		}
		if _gagg, _ebaf := _agccb.(_e.EndElement); _ebaf && _gagg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_bbgca *CT_Overlap) ValidateWithPath(path string) error {
	if _bbgca.ValAttr != nil {
		if _egbd := _bbgca.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _egbd != nil {
			return _egbd
		}
	}
	return nil
}

// Validate validates the CT_RadarSer and its children
func (_debgd *CT_RadarSer) Validate() error {
	return _debgd.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}

func NewCT_ManualLayout() *CT_ManualLayout { _abeg := &CT_ManualLayout{}; return _abeg }

func (_edgag *ST_CrossBetween) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_edgag = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_edgag = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_edgag = 2
	}
	return nil
}

func (_cfcgb *ST_Thickness) Validate() error { return _cfcgb.ValidateWithPath("") }

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

func (_deef *CT_FirstSliceAng) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _deef.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_deef.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bfedf *ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _bfedf.CT_ChartSpace.MarshalXML(e, start)
}

func (_ecfaa *CT_TextLanguageID) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dcbca := range start.Attr {
		if _dcbca.Name.Local == "\u0076\u0061\u006c" {
			_geaee, _dbeb := _dcbca.Value, error(nil)
			if _dbeb != nil {
				return _dbeb
			}
			_ecfaa.ValAttr = _geaee
			continue
		}
	}
	for {
		_fcdac, _eeggg := d.Token()
		if _eeggg != nil {
			return _bf.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _eeggg)
		}
		if _adge, _cfedc := _fcdac.(_e.EndElement); _cfedc && _adge.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_SplitType byte

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_bcee *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _bcee.ValAttr == ST_MarkerStyleUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbbb := _bcee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbbb != nil {
		return _bbbb
	}
	return nil
}

type CT_DLbls struct {
	DLbl   []*CT_DLbl
	Choice *CT_DLblsChoice
	ExtLst *CT_ExtensionList
}

type CT_CustSplit struct{ SecondPiePt []*CT_UnsignedInt }

// Validate validates the CT_TickLblPos and its children
func (_dgbdc *CT_TickLblPos) Validate() error {
	return _dgbdc.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}

func (_bdfga *CT_RotY) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bdfga.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_bdfga.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_eeea *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _eeea.VaryColors != nil {
		if _fggdf := _eeea.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fggdf != nil {
			return _fggdf
		}
	}
	for _ccca, _gadg := range _eeea.Ser {
		if _ffcbe := _gadg.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ccca)); _ffcbe != nil {
			return _ffcbe
		}
	}
	if _eeea.DLbls != nil {
		if _bbgc := _eeea.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbgc != nil {
			return _bbgc
		}
	}
	if _eeea.FirstSliceAng != nil {
		if _bcgaf := _eeea.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _bcgaf != nil {
			return _bcgaf
		}
	}
	if _eeea.HoleSize != nil {
		if _ffed := _eeea.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _ffed != nil {
			return _ffed
		}
	}
	if _eeea.ExtLst != nil {
		if _dace := _eeea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dace != nil {
			return _dace
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_dfdc *CT_PageMargins) ValidateWithPath(path string) error { return nil }

func (_aaggf ST_PageSetupOrientation) String() string {
	switch _aaggf {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_fecef *CT_OfPieType) ValidateWithPath(path string) error {
	if _efegf := _fecef.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _efegf != nil {
		return _efegf
	}
	return nil
}

// Validate validates the CT_LblAlgn and its children
func (_effbb *CT_LblAlgn) Validate() error {
	return _effbb.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}

func (_dddg *CT_DTable) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dddg.ShowHorzBorder != nil {
		_afce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_dddg.ShowHorzBorder, _afce)
	}
	if _dddg.ShowVertBorder != nil {
		_efaee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_dddg.ShowVertBorder, _efaee)
	}
	if _dddg.ShowOutline != nil {
		_bgcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_dddg.ShowOutline, _bgcb)
	}
	if _dddg.ShowKeys != nil {
		_bbab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_dddg.ShowKeys, _bbab)
	}
	if _dddg.SpPr != nil {
		_cfge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dddg.SpPr, _cfge)
	}
	if _dddg.TxPr != nil {
		_bfebc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dddg.TxPr, _bfebc)
	}
	if _dddg.ExtLst != nil {
		_feg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dddg.ExtLst, _feg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DTable and its children
func (_fedg *CT_DTable) Validate() error {
	return _fedg.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}

// Validate validates the CT_Tx and its children
func (_fdcbb *CT_Tx) Validate() error { return _fdcbb.ValidateWithPath("\u0043\u0054\u005fT\u0078") }

type CT_OfPieType struct{ ValAttr ST_OfPieType }

func (_ebde *CT_ExternalData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _bf.Sprintf("\u0025\u0076", _ebde.IdAttr)})
	e.EncodeToken(start)
	if _ebde.AutoUpdate != nil {
		_egaeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_ebde.AutoUpdate, _egaeg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type EG_AxShared struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
}

func (_cedg ST_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cedg.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_cedg.ST_HPercentWithSymbol))
	}
	if _cedg.ST_HPercentUShort != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_cedg.ST_HPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_ccfag *CT_Trendline) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ccfag.Name != nil {
		_ggdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_ba.AddPreserveSpaceAttr(&_ggdf, *_ccfag.Name)
		e.EncodeElement(_ccfag.Name, _ggdf)
	}
	if _ccfag.SpPr != nil {
		_cecdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ccfag.SpPr, _cecdd)
	}
	_aaag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_ccfag.TrendlineType, _aaag)
	if _ccfag.Order != nil {
		_gdbf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_ccfag.Order, _gdbf)
	}
	if _ccfag.Period != nil {
		_cbdfgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_ccfag.Period, _cbdfgb)
	}
	if _ccfag.Forward != nil {
		_abcda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_ccfag.Forward, _abcda)
	}
	if _ccfag.Backward != nil {
		_fdbfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_ccfag.Backward, _fdbfe)
	}
	if _ccfag.Intercept != nil {
		_caeag := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_ccfag.Intercept, _caeag)
	}
	if _ccfag.DispRSqr != nil {
		_edbbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_ccfag.DispRSqr, _edbbe)
	}
	if _ccfag.DispEq != nil {
		_ecaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_ccfag.DispEq, _ecaff)
	}
	if _ccfag.TrendlineLbl != nil {
		_gffg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_ccfag.TrendlineLbl, _gffg)
	}
	if _ccfag.ExtLst != nil {
		_dccad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccfag.ExtLst, _dccad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dbaaa *ST_LblAlgn) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dbaaa = 0
	case "\u0063\u0074\u0072":
		*_dbaaa = 1
	case "\u006c":
		*_dbaaa = 2
	case "\u0072":
		*_dbaaa = 3
	}
	return nil
}

type ST_LblAlgn byte

func NewCT_SerTxChoice() *CT_SerTxChoice { _ccfde := &CT_SerTxChoice{}; return _ccfde }

func (_fefg *CT_PivotFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ddgg:
	for {
		_aefa, _caabd := d.Token()
		if _caabd != nil {
			return _caabd
		}
		switch _ageba := _aefa.(type) {
		case _e.StartElement:
			switch _ageba.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_dcde := NewCT_PivotFmt()
				if _fecfb := d.DecodeElement(_dcde, &_ageba); _fecfb != nil {
					return _fecfb
				}
				_fefg.PivotFmt = append(_fefg.PivotFmt, _dcde)
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _ageba.Name)
				if _cgdcd := d.Skip(); _cgdcd != nil {
					return _cgdcd
				}
			}
		case _e.EndElement:
			break _ddgg
		case _e.CharData:
		}
	}
	return nil
}

func (_aedbb *EG_DLblShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_caae:
	for {
		_ebge, _gdegdg := d.Token()
		if _gdegdg != nil {
			return _gdegdg
		}
		switch _adab := _ebge.(type) {
		case _e.StartElement:
			switch _adab.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_aedbb.NumFmt = NewCT_NumFmt()
				if _dfeba := d.DecodeElement(_aedbb.NumFmt, &_adab); _dfeba != nil {
					return _dfeba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aedbb.SpPr = _cb.NewCT_ShapeProperties()
				if _febe := d.DecodeElement(_aedbb.SpPr, &_adab); _febe != nil {
					return _febe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aedbb.TxPr = _cb.NewCT_TextBody()
				if _fbgdb := d.DecodeElement(_aedbb.TxPr, &_adab); _fbgdb != nil {
					return _fbgdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_aedbb.DLblPos = NewCT_DLblPos()
				if _ddgbgf := d.DecodeElement(_aedbb.DLblPos, &_adab); _ddgbgf != nil {
					return _ddgbgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_aedbb.ShowLegendKey = NewCT_Boolean()
				if _cfgg := d.DecodeElement(_aedbb.ShowLegendKey, &_adab); _cfgg != nil {
					return _cfgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_aedbb.ShowVal = NewCT_Boolean()
				if _ebea := d.DecodeElement(_aedbb.ShowVal, &_adab); _ebea != nil {
					return _ebea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_aedbb.ShowCatName = NewCT_Boolean()
				if _gcfdc := d.DecodeElement(_aedbb.ShowCatName, &_adab); _gcfdc != nil {
					return _gcfdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_aedbb.ShowSerName = NewCT_Boolean()
				if _efaead := d.DecodeElement(_aedbb.ShowSerName, &_adab); _efaead != nil {
					return _efaead
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_aedbb.ShowPercent = NewCT_Boolean()
				if _acbcc := d.DecodeElement(_aedbb.ShowPercent, &_adab); _acbcc != nil {
					return _acbcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_aedbb.ShowBubbleSize = NewCT_Boolean()
				if _cbge := d.DecodeElement(_aedbb.ShowBubbleSize, &_adab); _cbge != nil {
					return _cbge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_aedbb.Separator = new(string)
				if _dcgcb := d.DecodeElement(_aedbb.Separator, &_adab); _dcgcb != nil {
					return _dcgcb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _adab.Name)
				if _cdbae := d.Skip(); _cdbae != nil {
					return _cdbae
				}
			}
		case _e.EndElement:
			break _caae
		case _e.CharData:
		}
	}
	return nil
}

func (_acggc *ST_TickMark) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_acggc = 0
	case "\u0063\u0072\u006fs\u0073":
		*_acggc = 1
	case "\u0069\u006e":
		*_acggc = 2
	case "\u006e\u006f\u006e\u0065":
		*_acggc = 3
	case "\u006f\u0075\u0074":
		*_acggc = 4
	}
	return nil
}

func (_adaf *EG_SerShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_begd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_adaf.Idx, _begd)
	_gfadf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_adaf.Order, _gfadf)
	if _adaf.Tx != nil {
		_abbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_adaf.Tx, _abbc)
	}
	if _adaf.SpPr != nil {
		_cbbfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_adaf.SpPr, _cbbfa)
	}
	return nil
}

var ST_DepthPercentWithSymbolPatternRe = _ef.MustCompile(ST_DepthPercentWithSymbolPattern)

// Validate validates the CT_ManualLayout and its children
func (_abea *CT_ManualLayout) Validate() error {
	return _abea.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_agbe *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _dafag := _agbe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dafag != nil {
		return _dafag
	}
	return nil
}

func NewCT_ChartLines() *CT_ChartLines { _beab := &CT_ChartLines{}; return _beab }

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_fabd *CT_DateAx) ValidateWithPath(path string) error {
	if _dddgb := _fabd.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _dddgb != nil {
		return _dddgb
	}
	if _afca := _fabd.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _afca != nil {
		return _afca
	}
	if _fabd.Delete != nil {
		if _afed := _fabd.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _afed != nil {
			return _afed
		}
	}
	if _ffeff := _fabd.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ffeff != nil {
		return _ffeff
	}
	if _fabd.MajorGridlines != nil {
		if _debf := _fabd.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _debf != nil {
			return _debf
		}
	}
	if _fabd.MinorGridlines != nil {
		if _eafaf := _fabd.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _eafaf != nil {
			return _eafaf
		}
	}
	if _fabd.Title != nil {
		if _ege := _fabd.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ege != nil {
			return _ege
		}
	}
	if _fabd.NumFmt != nil {
		if _gcfe := _fabd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gcfe != nil {
			return _gcfe
		}
	}
	if _fabd.MajorTickMark != nil {
		if _ggbcd := _fabd.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ggbcd != nil {
			return _ggbcd
		}
	}
	if _fabd.MinorTickMark != nil {
		if _gced := _fabd.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gced != nil {
			return _gced
		}
	}
	if _fabd.TickLblPos != nil {
		if _debe := _fabd.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _debe != nil {
			return _debe
		}
	}
	if _fabd.SpPr != nil {
		if _fbceb := _fabd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fbceb != nil {
			return _fbceb
		}
	}
	if _fabd.TxPr != nil {
		if _fbcg := _fabd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fbcg != nil {
			return _fbcg
		}
	}
	if _dgba := _fabd.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _dgba != nil {
		return _dgba
	}
	if _fabd.Choice != nil {
		if _ggec := _fabd.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ggec != nil {
			return _ggec
		}
	}
	if _fabd.Auto != nil {
		if _bbfc := _fabd.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _bbfc != nil {
			return _bbfc
		}
	}
	if _fabd.LblOffset != nil {
		if _cffb := _fabd.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _cffb != nil {
			return _cffb
		}
	}
	if _fabd.BaseTimeUnit != nil {
		if _ccdb := _fabd.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _ccdb != nil {
			return _ccdb
		}
	}
	if _fabd.MajorUnit != nil {
		if _edfc := _fabd.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _edfc != nil {
			return _edfc
		}
	}
	if _fabd.MajorTimeUnit != nil {
		if _eege := _fabd.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _eege != nil {
			return _eege
		}
	}
	if _fabd.MinorUnit != nil {
		if _cbbe := _fabd.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _cbbe != nil {
			return _cbbe
		}
	}
	if _fabd.MinorTimeUnit != nil {
		if _aedcg := _fabd.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _aedcg != nil {
			return _aedcg
		}
	}
	if _fabd.ExtLst != nil {
		if _adcfc := _fabd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adcfc != nil {
			return _adcfc
		}
	}
	return nil
}

// Validate validates the CT_MultiLvlStrData and its children
func (_bgdff *CT_MultiLvlStrData) Validate() error {
	return _bgdff.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}

func (_bccce ST_Shape) Validate() error { return _bccce.ValidateWithPath("") }

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_cdecg *CT_DPt) ValidateWithPath(path string) error {
	if _eda := _cdecg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _eda != nil {
		return _eda
	}
	if _cdecg.InvertIfNegative != nil {
		if _gfbc := _cdecg.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _gfbc != nil {
			return _gfbc
		}
	}
	if _cdecg.Marker != nil {
		if _bafg := _cdecg.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bafg != nil {
			return _bafg
		}
	}
	if _cdecg.Bubble3D != nil {
		if _bfda := _cdecg.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _bfda != nil {
			return _bfda
		}
	}
	if _cdecg.Explosion != nil {
		if _gfd := _cdecg.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _gfd != nil {
			return _gfd
		}
	}
	if _cdecg.SpPr != nil {
		if _cdce := _cdecg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cdce != nil {
			return _cdce
		}
	}
	if _cdecg.PictureOptions != nil {
		if _bfeb := _cdecg.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _bfeb != nil {
			return _bfeb
		}
	}
	if _cdecg.ExtLst != nil {
		if _cbdff := _cdecg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbdff != nil {
			return _cbdff
		}
	}
	return nil
}

func (_dfcff ST_PictureFormat) ValidateWithPath(path string) error {
	switch _dfcff {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfcff))
	}
	return nil
}

func (_ffeeg *CT_Thickness) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _agddg := range start.Attr {
		if _agddg.Name.Local == "\u0076\u0061\u006c" {
			_gdff, _eggf := ParseUnionST_Thickness(_agddg.Value)
			if _eggf != nil {
				return _eggf
			}
			_ffeeg.ValAttr = _gdff
			continue
		}
	}
	for {
		_caeea, _gdade := d.Token()
		if _gdade != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _gdade)
		}
		if _bgeb, _fecfa := _caeea.(_e.EndElement); _fecfa && _bgeb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_afdaa *CT_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cdfga := range start.Attr {
		if _cdfga.Name.Local == "\u0076\u0061\u006c" {
			_afdaa.ValAttr.UnmarshalXMLAttr(_cdfga)
			continue
		}
	}
	for {
		_befbe, _efaba := d.Token()
		if _efaba != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _efaba)
		}
		if _aeacf, _eccg := _befbe.(_e.EndElement); _eccg && _aeacf.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_fgcgf *CT_ScatterSer) ValidateWithPath(path string) error {
	if _bfcga := _fgcgf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bfcga != nil {
		return _bfcga
	}
	if _cfgd := _fgcgf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _cfgd != nil {
		return _cfgd
	}
	if _fgcgf.Tx != nil {
		if _cacf := _fgcgf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cacf != nil {
			return _cacf
		}
	}
	if _fgcgf.SpPr != nil {
		if _cffgd := _fgcgf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cffgd != nil {
			return _cffgd
		}
	}
	if _fgcgf.Marker != nil {
		if _caced := _fgcgf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _caced != nil {
			return _caced
		}
	}
	for _fbeba, _bbae := range _fgcgf.DPt {
		if _bfgga := _bbae.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _fbeba)); _bfgga != nil {
			return _bfgga
		}
	}
	if _fgcgf.DLbls != nil {
		if _ddea := _fgcgf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ddea != nil {
			return _ddea
		}
	}
	for _bdfbc, _gebfdd := range _fgcgf.Trendline {
		if _cgfcf := _gebfdd.ValidateWithPath(_bf.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _bdfbc)); _cgfcf != nil {
			return _cgfcf
		}
	}
	for _gbbc, _gebfff := range _fgcgf.ErrBars {
		if _degg := _gebfff.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _gbbc)); _degg != nil {
			return _degg
		}
	}
	if _fgcgf.XVal != nil {
		if _cbfbc := _fgcgf.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _cbfbc != nil {
			return _cbfbc
		}
	}
	if _fgcgf.YVal != nil {
		if _aebga := _fgcgf.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _aebga != nil {
			return _aebga
		}
	}
	if _fgcgf.Smooth != nil {
		if _bgbf := _fgcgf.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _bgbf != nil {
			return _bgbf
		}
	}
	if _fgcgf.ExtLst != nil {
		if _gbgfc := _fgcgf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbgfc != nil {
			return _gbgfc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_ecde *CT_Surface) ValidateWithPath(path string) error {
	if _ecde.Thickness != nil {
		if _cbce := _ecde.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _cbce != nil {
			return _cbce
		}
	}
	if _ecde.SpPr != nil {
		if _dacab := _ecde.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dacab != nil {
			return _dacab
		}
	}
	if _ecde.PictureOptions != nil {
		if _bgccfa := _ecde.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _bgccfa != nil {
			return _bgccfa
		}
	}
	if _ecde.ExtLst != nil {
		if _gged := _ecde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gged != nil {
			return _gged
		}
	}
	return nil
}

type ST_RadarStyle byte

func (_gaedd *CT_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gaedd.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_gaedd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_gfgcb *CT_PieChart) ValidateWithPath(path string) error {
	if _gfgcb.VaryColors != nil {
		if _ffdd := _gfgcb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ffdd != nil {
			return _ffdd
		}
	}
	for _fgbg, _agdd := range _gfgcb.Ser {
		if _gdea := _agdd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fgbg)); _gdea != nil {
			return _gdea
		}
	}
	if _gfgcb.DLbls != nil {
		if _gdcb := _gfgcb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gdcb != nil {
			return _gdcb
		}
	}
	if _gfgcb.FirstSliceAng != nil {
		if _abgc := _gfgcb.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _abgc != nil {
			return _abgc
		}
	}
	if _gfgcb.ExtLst != nil {
		if _fagfb := _gfgcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fagfb != nil {
			return _fagfb
		}
	}
	return nil
}

func (_facce *CT_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _facce.ValAttr != ST_TrendlineTypeUnset {
		_bfgcba, _eabfaf := _facce.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _eabfaf != nil {
			return _eabfaf
		}
		start.Attr = append(start.Attr, _bfgcba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_aadaa *CT_StrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_daad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_ba.AddPreserveSpaceAttr(&_daad, _aadaa.F)
	e.EncodeElement(_aadaa.F, _daad)
	if _aadaa.StrCache != nil {
		_ddgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_aadaa.StrCache, _ddgfb)
	}
	if _aadaa.ExtLst != nil {
		_bebcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aadaa.ExtLst, _bebcg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_edge *CT_DLblsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eafag:
	for {
		_affg, _ebac := d.Token()
		if _ebac != nil {
			return _ebac
		}
		switch _bcff := _affg.(type) {
		case _e.StartElement:
			switch _bcff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_edge.Delete = NewCT_Boolean()
				if _beb := d.DecodeElement(_edge.Delete, &_bcff); _beb != nil {
					return _beb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_edge.NumFmt = NewCT_NumFmt()
				if _gbgab := d.DecodeElement(_edge.NumFmt, &_bcff); _gbgab != nil {
					return _gbgab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edge.SpPr = _cb.NewCT_ShapeProperties()
				if _aggd := d.DecodeElement(_edge.SpPr, &_bcff); _aggd != nil {
					return _aggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_edge.TxPr = _cb.NewCT_TextBody()
				if _dggd := d.DecodeElement(_edge.TxPr, &_bcff); _dggd != nil {
					return _dggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_edge.DLblPos = NewCT_DLblPos()
				if _gafd := d.DecodeElement(_edge.DLblPos, &_bcff); _gafd != nil {
					return _gafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_edge.ShowLegendKey = NewCT_Boolean()
				if _ffcg := d.DecodeElement(_edge.ShowLegendKey, &_bcff); _ffcg != nil {
					return _ffcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_edge.ShowVal = NewCT_Boolean()
				if _ceeg := d.DecodeElement(_edge.ShowVal, &_bcff); _ceeg != nil {
					return _ceeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_edge.ShowCatName = NewCT_Boolean()
				if _dfeda := d.DecodeElement(_edge.ShowCatName, &_bcff); _dfeda != nil {
					return _dfeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_edge.ShowSerName = NewCT_Boolean()
				if _geeca := d.DecodeElement(_edge.ShowSerName, &_bcff); _geeca != nil {
					return _geeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_edge.ShowPercent = NewCT_Boolean()
				if _cedbc := d.DecodeElement(_edge.ShowPercent, &_bcff); _cedbc != nil {
					return _cedbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_edge.ShowBubbleSize = NewCT_Boolean()
				if _dcbdg := d.DecodeElement(_edge.ShowBubbleSize, &_bcff); _dcbdg != nil {
					return _dcbdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_edge.Separator = new(string)
				if _deba := d.DecodeElement(_edge.Separator, &_bcff); _deba != nil {
					return _deba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_edge.ShowLeaderLines = NewCT_Boolean()
				if _eabc := d.DecodeElement(_edge.ShowLeaderLines, &_bcff); _eabc != nil {
					return _eabc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_edge.LeaderLines = NewCT_ChartLines()
				if _eace := d.DecodeElement(_edge.LeaderLines, &_bcff); _eace != nil {
					return _eace
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _bcff.Name)
				if _ccee := d.Skip(); _ccee != nil {
					return _ccee
				}
			}
		case _e.EndElement:
			break _eafag
		case _e.CharData:
		}
	}
	return nil
}

func (_ebgaf *ST_LblOffset) ValidateWithPath(path string) error {
	_fddcb := []string{}
	if _ebgaf.ST_LblOffsetPercent != nil {
		_fddcb = append(_fddcb, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ebgaf.ST_LblOffsetUShort != nil {
		_fddcb = append(_fddcb, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_fddcb) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fddcb)
	}
	return nil
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}

func (_ebfdb ST_Orientation) ValidateWithPath(path string) error {
	switch _ebfdb {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebfdb))
	}
	return nil
}

func (_edgea *CT_RadarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_edgea.RadarStyle = NewCT_RadarStyle()
_fbfgg:
	for {
		_addef, _fdbeb := d.Token()
		if _fdbeb != nil {
			return _fdbeb
		}
		switch _bgdd := _addef.(type) {
		case _e.StartElement:
			switch _bgdd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _aagbc := d.DecodeElement(_edgea.RadarStyle, &_bgdd); _aagbc != nil {
					return _aagbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_edgea.VaryColors = NewCT_Boolean()
				if _bfcede := d.DecodeElement(_edgea.VaryColors, &_bgdd); _bfcede != nil {
					return _bfcede
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_babdg := NewCT_RadarSer()
				if _cfebb := d.DecodeElement(_babdg, &_bgdd); _cfebb != nil {
					return _cfebb
				}
				_edgea.Ser = append(_edgea.Ser, _babdg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_edgea.DLbls = NewCT_DLbls()
				if _agge := d.DecodeElement(_edgea.DLbls, &_bgdd); _agge != nil {
					return _agge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_baffg := NewCT_UnsignedInt()
				if _bgee := d.DecodeElement(_baffg, &_bgdd); _bgee != nil {
					return _bgee
				}
				_edgea.AxId = append(_edgea.AxId, _baffg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edgea.ExtLst = NewCT_ExtensionList()
				if _cgdceb := d.DecodeElement(_edgea.ExtLst, &_bgdd); _cgdceb != nil {
					return _cgdceb
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _bgdd.Name)
				if _dgfg := d.Skip(); _dgfg != nil {
					return _dgfg
				}
			}
		case _e.EndElement:
			break _fbfgg
		case _e.CharData:
		}
	}
	return nil
}

func (_dbafad ST_BarDir) ValidateWithPath(path string) error {
	switch _dbafad {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbafad))
	}
	return nil
}

func NewCT_ScatterSer() *CT_ScatterSer {
	_gfgd := &CT_ScatterSer{}
	_gfgd.Idx = NewCT_UnsignedInt()
	_gfgd.Order = NewCT_UnsignedInt()
	return _gfgd
}

func (_gafcd *CT_DoughnutChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_adfe:
	for {
		_cdba, _fgac := d.Token()
		if _fgac != nil {
			return _fgac
		}
		switch _cfed := _cdba.(type) {
		case _e.StartElement:
			switch _cfed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gafcd.VaryColors = NewCT_Boolean()
				if _agbc := d.DecodeElement(_gafcd.VaryColors, &_cfed); _agbc != nil {
					return _agbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_agccg := NewCT_PieSer()
				if _egcb := d.DecodeElement(_agccg, &_cfed); _egcb != nil {
					return _egcb
				}
				_gafcd.Ser = append(_gafcd.Ser, _agccg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gafcd.DLbls = NewCT_DLbls()
				if _ffdf := d.DecodeElement(_gafcd.DLbls, &_cfed); _ffdf != nil {
					return _ffdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_gafcd.FirstSliceAng = NewCT_FirstSliceAng()
				if _badg := d.DecodeElement(_gafcd.FirstSliceAng, &_cfed); _badg != nil {
					return _badg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_gafcd.HoleSize = NewCT_HoleSize()
				if _daacf := d.DecodeElement(_gafcd.HoleSize, &_cfed); _daacf != nil {
					return _daacf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gafcd.ExtLst = NewCT_ExtensionList()
				if _fdaf := d.DecodeElement(_gafcd.ExtLst, &_cfed); _fdaf != nil {
					return _fdaf
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _cfed.Name)
				if _fbfe := d.Skip(); _fbfe != nil {
					return _fbfe
				}
			}
		case _e.EndElement:
			break _adfe
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_cbag *CT_SplitType) ValidateWithPath(path string) error {
	if _dbgc := _cbag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dbgc != nil {
		return _dbgc
	}
	return nil
}

// Validate validates the CT_Legend and its children
func (_fcagf *CT_Legend) Validate() error {
	return _fcagf.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}

func (_ceafe ST_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ceafe.String(), start)
}

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_aabcb *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _aabcb.Wireframe != nil {
		if _dbafc := _aabcb.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _dbafc != nil {
			return _dbafc
		}
	}
	for _bbba, _cdbaa := range _aabcb.Ser {
		if _begbd := _cdbaa.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bbba)); _begbd != nil {
			return _begbd
		}
	}
	if _aabcb.BandFmts != nil {
		if _bggbd := _aabcb.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _bggbd != nil {
			return _bggbd
		}
	}
	for _cafgb, _fdfed := range _aabcb.AxId {
		if _abfaba := _fdfed.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _cafgb)); _abfaba != nil {
			return _abfaba
		}
	}
	if _aabcb.ExtLst != nil {
		if _aaaca := _aabcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aaaca != nil {
			return _aaaca
		}
	}
	return nil
}

func (_gcdac *CT_ScatterSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_aedeff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gcdac.Idx, _aedeff)
	_abge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_gcdac.Order, _abge)
	if _gcdac.Tx != nil {
		_gdcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gcdac.Tx, _gdcd)
	}
	if _gcdac.SpPr != nil {
		_ggca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcdac.SpPr, _ggca)
	}
	if _gcdac.Marker != nil {
		_bgfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_gcdac.Marker, _bgfe)
	}
	if _gcdac.DPt != nil {
		_cfebf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cefcc := range _gcdac.DPt {
			e.EncodeElement(_cefcc, _cfebf)
		}
	}
	if _gcdac.DLbls != nil {
		_ecacb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gcdac.DLbls, _ecacb)
	}
	if _gcdac.Trendline != nil {
		_caef := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bgffg := range _gcdac.Trendline {
			e.EncodeElement(_bgffg, _caef)
		}
	}
	if _gcdac.ErrBars != nil {
		_egbc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _fffc := range _gcdac.ErrBars {
			e.EncodeElement(_fffc, _egbc)
		}
	}
	if _gcdac.XVal != nil {
		_eddbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_gcdac.XVal, _eddbc)
	}
	if _gcdac.YVal != nil {
		_acef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_gcdac.YVal, _acef)
	}
	if _gcdac.Smooth != nil {
		_fecg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_gcdac.Smooth, _fecg)
	}
	if _gcdac.ExtLst != nil {
		_cgga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcdac.ExtLst, _cgga)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dfdf *CT_PrintSettings) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dfdf.HeaderFooter != nil {
		_dbdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_dfdf.HeaderFooter, _dbdf)
	}
	if _dfdf.PageMargins != nil {
		_cadga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_dfdf.PageMargins, _cadga)
	}
	if _dfdf.PageSetup != nil {
		_eaegf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_dfdf.PageSetup, _eaegf)
	}
	if _dfdf.LegacyDrawingHF != nil {
		_aeff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_dfdf.LegacyDrawingHF, _aeff)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Shape struct{ ValAttr ST_Shape }

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_debfc *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _debfc.PtCount != nil {
		if _gdef := _debfc.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _gdef != nil {
			return _gdef
		}
	}
	for _cecf, _fgbea := range _debfc.Lvl {
		if _dgbb := _fgbea.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _cecf)); _dgbb != nil {
			return _dgbb
		}
	}
	if _debfc.ExtLst != nil {
		if _fggf := _debfc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fggf != nil {
			return _fggf
		}
	}
	return nil
}

func (_faefa *CT_Marker) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_aefg:
	for {
		_ggfce, _bdcg := d.Token()
		if _bdcg != nil {
			return _bdcg
		}
		switch _eacf := _ggfce.(type) {
		case _e.StartElement:
			switch _eacf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_faefa.Symbol = NewCT_MarkerStyle()
				if _ccdae := d.DecodeElement(_faefa.Symbol, &_eacf); _ccdae != nil {
					return _ccdae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_faefa.Size = NewCT_MarkerSize()
				if _ecfd := d.DecodeElement(_faefa.Size, &_eacf); _ecfd != nil {
					return _ecfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_faefa.SpPr = _cb.NewCT_ShapeProperties()
				if _ddca := d.DecodeElement(_faefa.SpPr, &_eacf); _ddca != nil {
					return _ddca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_faefa.ExtLst = NewCT_ExtensionList()
				if _fabfg := d.DecodeElement(_faefa.ExtLst, &_eacf); _fabfg != nil {
					return _fabfg
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _eacf.Name)
				if _abadc := d.Skip(); _abadc != nil {
					return _abadc
				}
			}
		case _e.EndElement:
			break _aefg
		case _e.CharData:
		}
	}
	return nil
}

func (_gcaa *CT_NumData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ggbcda:
	for {
		_dgbg, _eecce := d.Token()
		if _eecce != nil {
			return _eecce
		}
		switch _bddce := _dgbg.(type) {
		case _e.StartElement:
			switch _bddce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_gcaa.FormatCode = new(string)
				if _cdbe := d.DecodeElement(_gcaa.FormatCode, &_bddce); _cdbe != nil {
					return _cdbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_gcaa.PtCount = NewCT_UnsignedInt()
				if _eggbf := d.DecodeElement(_gcaa.PtCount, &_bddce); _eggbf != nil {
					return _eggbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_afgcg := NewCT_NumVal()
				if _adfa := d.DecodeElement(_afgcg, &_bddce); _adfa != nil {
					return _adfa
				}
				_gcaa.Pt = append(_gcaa.Pt, _afgcg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gcaa.ExtLst = NewCT_ExtensionList()
				if _acabe := d.DecodeElement(_gcaa.ExtLst, &_bddce); _acabe != nil {
					return _acabe
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _bddce.Name)
				if _ebafc := d.Skip(); _ebafc != nil {
					return _ebafc
				}
			}
		case _e.EndElement:
			break _ggbcda
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_ErrBarType() *CT_ErrBarType { _gceda := &CT_ErrBarType{}; return _gceda }

type CT_UpDownBars struct {
	GapWidth *CT_GapAmount
	UpBars   *CT_UpDownBar
	DownBars *CT_UpDownBar
	ExtLst   *CT_ExtensionList
}

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_eedf *EG_DLblShared) ValidateWithPath(path string) error {
	if _eedf.NumFmt != nil {
		if _abed := _eedf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _abed != nil {
			return _abed
		}
	}
	if _eedf.SpPr != nil {
		if _efbgf := _eedf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _efbgf != nil {
			return _efbgf
		}
	}
	if _eedf.TxPr != nil {
		if _bbcff := _eedf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bbcff != nil {
			return _bbcff
		}
	}
	if _eedf.DLblPos != nil {
		if _adbdd := _eedf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _adbdd != nil {
			return _adbdd
		}
	}
	if _eedf.ShowLegendKey != nil {
		if _dedec := _eedf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _dedec != nil {
			return _dedec
		}
	}
	if _eedf.ShowVal != nil {
		if _feba := _eedf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _feba != nil {
			return _feba
		}
	}
	if _eedf.ShowCatName != nil {
		if _eggee := _eedf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _eggee != nil {
			return _eggee
		}
	}
	if _eedf.ShowSerName != nil {
		if _bcgbd := _eedf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _bcgbd != nil {
			return _bcgbd
		}
	}
	if _eedf.ShowPercent != nil {
		if _cbdeb := _eedf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _cbdeb != nil {
			return _cbdeb
		}
	}
	if _eedf.ShowBubbleSize != nil {
		if _badde := _eedf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _badde != nil {
			return _badde
		}
	}
	return nil
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

func NewCT_BubbleSer() *CT_BubbleSer {
	_geecb := &CT_BubbleSer{}
	_geecb.Idx = NewCT_UnsignedInt()
	_geecb.Order = NewCT_UnsignedInt()
	return _geecb
}

func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_egcba, _aadd := _b.ParseUint(s, 10, 16)
	if _aadd != nil {
		return ST_DepthPercent{}, _aadd
	}
	_ddced := uint16(_egcba)
	return ST_DepthPercent{ST_DepthPercentUShort: &_ddced}, nil
}

// Validate validates the CT_NumVal and its children
func (_ebbc *CT_NumVal) Validate() error {
	return _ebbc.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}

func (_fadd *CT_SerTx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fadd.Choice = NewCT_SerTxChoice()
_cadb:
	for {
		_abcbd, _bgbba := d.Token()
		if _bgbba != nil {
			return _bgbba
		}
		switch _adae := _abcbd.(type) {
		case _e.StartElement:
			switch _adae.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_fadd.Choice = NewCT_SerTxChoice()
				if _eeebd := d.DecodeElement(&_fadd.Choice.StrRef, &_adae); _eeebd != nil {
					return _eeebd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_fadd.Choice = NewCT_SerTxChoice()
				if _fgefc := d.DecodeElement(&_fadd.Choice.V, &_adae); _fgefc != nil {
					return _fgefc
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _adae.Name)
				if _bcccb := d.Skip(); _bcccb != nil {
					return _bcccb
				}
			}
		case _e.EndElement:
			break _cadb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_abaaf *CT_Orientation) ValidateWithPath(path string) error {
	if _baad := _abaaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _baad != nil {
		return _baad
	}
	return nil
}

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_gbg *CT_AreaChart) ValidateWithPath(path string) error {
	if _gbg.Grouping != nil {
		if _adb := _gbg.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _adb != nil {
			return _adb
		}
	}
	if _gbg.VaryColors != nil {
		if _aag := _gbg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aag != nil {
			return _aag
		}
	}
	for _baea, _gbc := range _gbg.Ser {
		if _efb := _gbc.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _baea)); _efb != nil {
			return _efb
		}
	}
	if _gbg.DLbls != nil {
		if _ea := _gbg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ea != nil {
			return _ea
		}
	}
	if _gbg.DropLines != nil {
		if _dac := _gbg.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _dac != nil {
			return _dac
		}
	}
	for _fdc, _bfa := range _gbg.AxId {
		if _gd := _bfa.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fdc)); _gd != nil {
			return _gd
		}
	}
	if _gbg.ExtLst != nil {
		if _fcc := _gbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcc != nil {
			return _fcc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_aedba *CT_Extension) ValidateWithPath(path string) error { return nil }

func (_gdcgb *CT_HoleSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _acab := range start.Attr {
		if _acab.Name.Local == "\u0076\u0061\u006c" {
			_daabf, _abcgf := ParseUnionST_HoleSize(_acab.Value)
			if _abcgf != nil {
				return _abcgf
			}
			_gdcgb.ValAttr = &_daabf
			continue
		}
	}
	for {
		_feca, _gcfb := d.Token()
		if _gcfb != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _gcfb)
		}
		if _gaecf, _cccf := _feca.(_e.EndElement); _cccf && _gaecf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bbca ST_PictureFormat) String() string {
	switch _bbca {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}

func (_faca ST_CrossBetween) ValidateWithPath(path string) error {
	switch _faca {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_faca))
	}
	return nil
}

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_bdgdd *EG_LineChartShared) ValidateWithPath(path string) error {
	if _baacca := _bdgdd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _baacca != nil {
		return _baacca
	}
	if _bdgdd.VaryColors != nil {
		if _eeed := _bdgdd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _eeed != nil {
			return _eeed
		}
	}
	for _fdfae, _bdfgc := range _bdgdd.Ser {
		if _cceefb := _bdfgc.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fdfae)); _cceefb != nil {
			return _cceefb
		}
	}
	if _bdgdd.DLbls != nil {
		if _baeeg := _bdgdd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _baeeg != nil {
			return _baeeg
		}
	}
	if _bdgdd.DropLines != nil {
		if _aeagf := _bdgdd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _aeagf != nil {
			return _aeagf
		}
	}
	return nil
}

func (_geeffg ST_OfPieType) Validate() error { return _geeffg.ValidateWithPath("") }

func (_agafa ST_LegendPos) Validate() error { return _agafa.ValidateWithPath("") }

func (_dabb *CT_NumDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dabb.NumRef != nil {
		_eggba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_dabb.NumRef, _eggba)
	}
	if _dabb.NumLit != nil {
		_dcbde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_dabb.NumLit, _dcbde)
	}
	return nil
}

func (_decad ST_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _decad.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_e.CharData(*_decad.ST_SecondPieSizePercent))
	}
	if _decad.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_decad.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_cabfb ST_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cabfb.String(), start)
}

func (_adbeg *CT_PlotAreaChoice1) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ddgcg:
	for {
		_acdbf, _edadfd := d.Token()
		if _edadfd != nil {
			return _edadfd
		}
		switch _bacgc := _acdbf.(type) {
		case _e.StartElement:
			switch _bacgc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_bffbg := NewCT_ValAx()
				if _gacfb := d.DecodeElement(_bffbg, &_bacgc); _gacfb != nil {
					return _gacfb
				}
				_adbeg.ValAx = append(_adbeg.ValAx, _bffbg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_aagfe := NewCT_CatAx()
				if _gffac := d.DecodeElement(_aagfe, &_bacgc); _gffac != nil {
					return _gffac
				}
				_adbeg.CatAx = append(_adbeg.CatAx, _aagfe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_acgab := NewCT_DateAx()
				if _faffg := d.DecodeElement(_acgab, &_bacgc); _faffg != nil {
					return _faffg
				}
				_adbeg.DateAx = append(_adbeg.DateAx, _acgab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_bbdec := NewCT_SerAx()
				if _gccg := d.DecodeElement(_bbdec, &_bacgc); _gccg != nil {
					return _gccg
				}
				_adbeg.SerAx = append(_adbeg.SerAx, _bbdec)
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _bacgc.Name)
				if _ffgg := d.Skip(); _ffgg != nil {
					return _ffgg
				}
			}
		case _e.EndElement:
			break _ddgcg
		case _e.CharData:
		}
	}
	return nil
}

func (_ecac *CT_CatAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecac.AxId = NewCT_UnsignedInt()
	_ecac.Scaling = NewCT_Scaling()
	_ecac.AxPos = NewCT_AxPos()
	_ecac.CrossAx = NewCT_UnsignedInt()
_fbec:
	for {
		_daegf, _cecc := d.Token()
		if _cecc != nil {
			return _cecc
		}
		switch _dcfd := _daegf.(type) {
		case _e.StartElement:
			switch _dcfd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _bfece := d.DecodeElement(_ecac.AxId, &_dcfd); _bfece != nil {
					return _bfece
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _beee := d.DecodeElement(_ecac.Scaling, &_dcfd); _beee != nil {
					return _beee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_ecac.Delete = NewCT_Boolean()
				if _dggg := d.DecodeElement(_ecac.Delete, &_dcfd); _dggg != nil {
					return _dggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _fdd := d.DecodeElement(_ecac.AxPos, &_dcfd); _fdd != nil {
					return _fdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_ecac.MajorGridlines = NewCT_ChartLines()
				if _dbbb := d.DecodeElement(_ecac.MajorGridlines, &_dcfd); _dbbb != nil {
					return _dbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_ecac.MinorGridlines = NewCT_ChartLines()
				if _gace := d.DecodeElement(_ecac.MinorGridlines, &_dcfd); _gace != nil {
					return _gace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_ecac.Title = NewCT_Title()
				if _fgfd := d.DecodeElement(_ecac.Title, &_dcfd); _fgfd != nil {
					return _fgfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ecac.NumFmt = NewCT_NumFmt()
				if _afcf := d.DecodeElement(_ecac.NumFmt, &_dcfd); _afcf != nil {
					return _afcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_ecac.MajorTickMark = NewCT_TickMark()
				if _dcfb := d.DecodeElement(_ecac.MajorTickMark, &_dcfd); _dcfb != nil {
					return _dcfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_ecac.MinorTickMark = NewCT_TickMark()
				if _edbb := d.DecodeElement(_ecac.MinorTickMark, &_dcfd); _edbb != nil {
					return _edbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_ecac.TickLblPos = NewCT_TickLblPos()
				if _gbbba := d.DecodeElement(_ecac.TickLblPos, &_dcfd); _gbbba != nil {
					return _gbbba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecac.SpPr = _cb.NewCT_ShapeProperties()
				if _aaa := d.DecodeElement(_ecac.SpPr, &_dcfd); _aaa != nil {
					return _aaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ecac.TxPr = _cb.NewCT_TextBody()
				if _bdaga := d.DecodeElement(_ecac.TxPr, &_dcfd); _bdaga != nil {
					return _bdaga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _bace := d.DecodeElement(_ecac.CrossAx, &_dcfd); _bace != nil {
					return _bace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_ecac.Choice = NewEG_AxSharedChoice()
				if _dbed := d.DecodeElement(&_ecac.Choice.Crosses, &_dcfd); _dbed != nil {
					return _dbed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_ecac.Choice = NewEG_AxSharedChoice()
				if _bega := d.DecodeElement(&_ecac.Choice.CrossesAt, &_dcfd); _bega != nil {
					return _bega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_ecac.Auto = NewCT_Boolean()
				if _fdac := d.DecodeElement(_ecac.Auto, &_dcfd); _fdac != nil {
					return _fdac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_ecac.LblAlgn = NewCT_LblAlgn()
				if _ddag := d.DecodeElement(_ecac.LblAlgn, &_dcfd); _ddag != nil {
					return _ddag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_ecac.LblOffset = NewCT_LblOffset()
				if _efgf := d.DecodeElement(_ecac.LblOffset, &_dcfd); _efgf != nil {
					return _efgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_ecac.TickLblSkip = NewCT_Skip()
				if _ffade := d.DecodeElement(_ecac.TickLblSkip, &_dcfd); _ffade != nil {
					return _ffade
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_ecac.TickMarkSkip = NewCT_Skip()
				if _egdb := d.DecodeElement(_ecac.TickMarkSkip, &_dcfd); _egdb != nil {
					return _egdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_ecac.NoMultiLvlLbl = NewCT_Boolean()
				if _cdef := d.DecodeElement(_ecac.NoMultiLvlLbl, &_dcfd); _cdef != nil {
					return _cdef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecac.ExtLst = NewCT_ExtensionList()
				if _decf := d.DecodeElement(_ecac.ExtLst, &_dcfd); _decf != nil {
					return _decf
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _dcfd.Name)
				if _aaae := d.Skip(); _aaae != nil {
					return _aaae
				}
			}
		case _e.EndElement:
			break _fbec
		case _e.CharData:
		}
	}
	return nil
}

func (_abcdb ST_TickLblPos) ValidateWithPath(path string) error {
	switch _abcdb {
	case 0, 1, 2, 3, 4:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_abcdb))
	}
	return nil
}

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_cb.CT_TextBody
}

func (_bcfg *CT_DoughnutChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bcfg.VaryColors != nil {
		_eeffa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bcfg.VaryColors, _eeffa)
	}
	if _bcfg.Ser != nil {
		_aaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _baca := range _bcfg.Ser {
			e.EncodeElement(_baca, _aaef)
		}
	}
	if _bcfg.DLbls != nil {
		_debcf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcfg.DLbls, _debcf)
	}
	if _bcfg.FirstSliceAng != nil {
		_bbedb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_bcfg.FirstSliceAng, _bbedb)
	}
	if _bcfg.HoleSize != nil {
		_gaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bcfg.HoleSize, _gaef)
	}
	if _bcfg.ExtLst != nil {
		_dgab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcfg.ExtLst, _dgab)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fga *CT_Area3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ca:
	for {
		_fe, _bed := d.Token()
		if _bed != nil {
			return _bed
		}
		switch _ed := _fe.(type) {
		case _e.StartElement:
			switch _ed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_fga.Grouping = NewCT_Grouping()
				if _ab := d.DecodeElement(_fga.Grouping, &_ed); _ab != nil {
					return _ab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fga.VaryColors = NewCT_Boolean()
				if _baf := d.DecodeElement(_fga.VaryColors, &_ed); _baf != nil {
					return _baf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dg := NewCT_AreaSer()
				if _fee := d.DecodeElement(_dg, &_ed); _fee != nil {
					return _fee
				}
				_fga.Ser = append(_fga.Ser, _dg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fga.DLbls = NewCT_DLbls()
				if _fef := d.DecodeElement(_fga.DLbls, &_ed); _fef != nil {
					return _fef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_fga.DropLines = NewCT_ChartLines()
				if _fbg := d.DecodeElement(_fga.DropLines, &_ed); _fbg != nil {
					return _fbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_fga.GapDepth = NewCT_GapAmount()
				if _af := d.DecodeElement(_fga.GapDepth, &_ed); _af != nil {
					return _af
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_db := NewCT_UnsignedInt()
				if _bae := d.DecodeElement(_db, &_ed); _bae != nil {
					return _bae
				}
				_fga.AxId = append(_fga.AxId, _db)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fga.ExtLst = NewCT_ExtensionList()
				if _dbd := d.DecodeElement(_fga.ExtLst, &_ed); _dbd != nil {
					return _dbd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _ed.Name)
				if _gb := d.Skip(); _gb != nil {
					return _gb
				}
			}
		case _e.EndElement:
			break _ca
		case _e.CharData:
		}
	}
	return nil
}

type CT_Chart struct {
	Title            *CT_Title
	AutoTitleDeleted *CT_Boolean
	PivotFmts        *CT_PivotFmts
	View3D           *CT_View3D
	Floor            *CT_Surface
	SideWall         *CT_Surface
	BackWall         *CT_Surface
	PlotArea         *CT_PlotArea
	Legend           *CT_Legend
	PlotVisOnly      *CT_Boolean
	DispBlanksAs     *CT_DispBlanksAs
	ShowDLblsOverMax *CT_Boolean
	ExtLst           *CT_ExtensionList
}

func NewCT_UpDownBars() *CT_UpDownBars { _cfgag := &CT_UpDownBars{}; return _cfgag }

// Validate validates the CT_LegendEntryChoice and its children
func (_cabc *CT_LegendEntryChoice) Validate() error {
	return _cabc.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}

type EG_DLblShared struct {
	NumFmt         *CT_NumFmt
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_dbdg ST_TrendlineType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_fcffa := _e.Attr{}
	_fcffa.Name = name
	switch _dbdg {
	case ST_TrendlineTypeUnset:
		_fcffa.Value = ""
	case ST_TrendlineTypeExp:
		_fcffa.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_fcffa.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_fcffa.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_fcffa.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_fcffa.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_fcffa.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _fcffa, nil
}

type CT_Title struct {
	Tx      *CT_Tx
	Layout  *CT_Layout
	Overlay *CT_Boolean
	SpPr    *_cb.CT_ShapeProperties
	TxPr    *_cb.CT_TextBody
	ExtLst  *CT_ExtensionList
}

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_gfcde *CT_Layout) ValidateWithPath(path string) error {
	if _gfcde.ManualLayout != nil {
		if _cgdc := _gfcde.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _cgdc != nil {
			return _cgdc
		}
	}
	if _gfcde.ExtLst != nil {
		if _bbgd := _gfcde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbgd != nil {
			return _bbgd
		}
	}
	return nil
}

func (_fdagf *CT_NumRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fdcac:
	for {
		_eeffaa, _fcce := d.Token()
		if _fcce != nil {
			return _fcce
		}
		switch _ffae := _eeffaa.(type) {
		case _e.StartElement:
			switch _ffae.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _dfea := d.DecodeElement(&_fdagf.F, &_ffae); _dfea != nil {
					return _dfea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_fdagf.NumCache = NewCT_NumData()
				if _dfgb := d.DecodeElement(_fdagf.NumCache, &_ffae); _dfgb != nil {
					return _dfgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fdagf.ExtLst = NewCT_ExtensionList()
				if _eegf := d.DecodeElement(_fdagf.ExtLst, &_ffae); _eegf != nil {
					return _eegf
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _ffae.Name)
				if _faag := d.Skip(); _faag != nil {
					return _faag
				}
			}
		case _e.EndElement:
			break _fdcac
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_ccdc *EG_SerShared) ValidateWithPath(path string) error {
	if _afccb := _ccdc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _afccb != nil {
		return _afccb
	}
	if _dcgaf := _ccdc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _dcgaf != nil {
		return _dcgaf
	}
	if _ccdc.Tx != nil {
		if _gdbgg := _ccdc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gdbgg != nil {
			return _gdbgg
		}
	}
	if _ccdc.SpPr != nil {
		if _egaecd := _ccdc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _egaecd != nil {
			return _egaecd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_cdf *CT_DLbls) ValidateWithPath(path string) error {
	for _fbdfg, _bgfb := range _cdf.DLbl {
		if _ccdg := _bgfb.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _fbdfg)); _ccdg != nil {
			return _ccdg
		}
	}
	if _cdf.Choice != nil {
		if _fgaeg := _cdf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _fgaeg != nil {
			return _fgaeg
		}
	}
	if _cdf.ExtLst != nil {
		if _aege := _cdf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aege != nil {
			return _aege
		}
	}
	return nil
}

func (_ffdg *ST_Overlap) Validate() error { return _ffdg.ValidateWithPath("") }

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

// Validate validates the CT_PlotAreaChoice1 and its children
func (_gafb *CT_PlotAreaChoice1) Validate() error {
	return _gafb.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}

func (_deega ST_DispBlanksAs) String() string {
	switch _deega {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}

type CT_Tx struct{ Choice *CT_TxChoice }

// Validate validates the CT_MultiLvlStrRef and its children
func (_egfd *CT_MultiLvlStrRef) Validate() error {
	return _egfd.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}

func NewCT_Bar3DChart() *CT_Bar3DChart {
	_efcb := &CT_Bar3DChart{}
	_efcb.BarDir = NewCT_BarDir()
	return _efcb
}

func (_cfbge *CT_PageMargins) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cefg := range start.Attr {
		if _cefg.Name.Local == "\u006c" {
			_bbeg, _gffc := _b.ParseFloat(_cefg.Value, 64)
			if _gffc != nil {
				return _gffc
			}
			_cfbge.LAttr = _bbeg
			continue
		}
		if _cefg.Name.Local == "\u0072" {
			_ecdaa, _gfdf := _b.ParseFloat(_cefg.Value, 64)
			if _gfdf != nil {
				return _gfdf
			}
			_cfbge.RAttr = _ecdaa
			continue
		}
		if _cefg.Name.Local == "\u0074" {
			_dfae, _bgdbg := _b.ParseFloat(_cefg.Value, 64)
			if _bgdbg != nil {
				return _bgdbg
			}
			_cfbge.TAttr = _dfae
			continue
		}
		if _cefg.Name.Local == "\u0062" {
			_aabgb, _begf := _b.ParseFloat(_cefg.Value, 64)
			if _begf != nil {
				return _begf
			}
			_cfbge.BAttr = _aabgb
			continue
		}
		if _cefg.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_cageb, _cced := _b.ParseFloat(_cefg.Value, 64)
			if _cced != nil {
				return _cced
			}
			_cfbge.HeaderAttr = _cageb
			continue
		}
		if _cefg.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_facb, _ecfg := _b.ParseFloat(_cefg.Value, 64)
			if _ecfg != nil {
				return _ecfg
			}
			_cfbge.FooterAttr = _facb
			continue
		}
	}
	for {
		_dbcf, _geece := d.Token()
		if _geece != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _geece)
		}
		if _bddfde, _cfcd := _dbcf.(_e.EndElement); _cfcd && _bddfde.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bcaga ST_PageSetupOrientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bcaga.String(), start)
}

func (_gdge *CT_SerAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdge.AxId = NewCT_UnsignedInt()
	_gdge.Scaling = NewCT_Scaling()
	_gdge.AxPos = NewCT_AxPos()
	_gdge.CrossAx = NewCT_UnsignedInt()
_aggc:
	for {
		_fbbae, _cafag := d.Token()
		if _cafag != nil {
			return _cafag
		}
		switch _adggf := _fbbae.(type) {
		case _e.StartElement:
			switch _adggf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _fdfe := d.DecodeElement(_gdge.AxId, &_adggf); _fdfe != nil {
					return _fdfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _fffef := d.DecodeElement(_gdge.Scaling, &_adggf); _fffef != nil {
					return _fffef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_gdge.Delete = NewCT_Boolean()
				if _adfdb := d.DecodeElement(_gdge.Delete, &_adggf); _adfdb != nil {
					return _adfdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _fcddc := d.DecodeElement(_gdge.AxPos, &_adggf); _fcddc != nil {
					return _fcddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gdge.MajorGridlines = NewCT_ChartLines()
				if _fggb := d.DecodeElement(_gdge.MajorGridlines, &_adggf); _fggb != nil {
					return _fggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_gdge.MinorGridlines = NewCT_ChartLines()
				if _edafa := d.DecodeElement(_gdge.MinorGridlines, &_adggf); _edafa != nil {
					return _edafa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_gdge.Title = NewCT_Title()
				if _ceacd := d.DecodeElement(_gdge.Title, &_adggf); _ceacd != nil {
					return _ceacd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gdge.NumFmt = NewCT_NumFmt()
				if _ecef := d.DecodeElement(_gdge.NumFmt, &_adggf); _ecef != nil {
					return _ecef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gdge.MajorTickMark = NewCT_TickMark()
				if _egfdd := d.DecodeElement(_gdge.MajorTickMark, &_adggf); _egfdd != nil {
					return _egfdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_gdge.MinorTickMark = NewCT_TickMark()
				if _daaad := d.DecodeElement(_gdge.MinorTickMark, &_adggf); _daaad != nil {
					return _daaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_gdge.TickLblPos = NewCT_TickLblPos()
				if _fbdfb := d.DecodeElement(_gdge.TickLblPos, &_adggf); _fbdfb != nil {
					return _fbdfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gdge.SpPr = _cb.NewCT_ShapeProperties()
				if _fbgge := d.DecodeElement(_gdge.SpPr, &_adggf); _fbgge != nil {
					return _fbgge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gdge.TxPr = _cb.NewCT_TextBody()
				if _ebbbe := d.DecodeElement(_gdge.TxPr, &_adggf); _ebbbe != nil {
					return _ebbbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _ggcf := d.DecodeElement(_gdge.CrossAx, &_adggf); _ggcf != nil {
					return _ggcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_gdge.Choice = NewEG_AxSharedChoice()
				if _aefgg := d.DecodeElement(&_gdge.Choice.Crosses, &_adggf); _aefgg != nil {
					return _aefgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_gdge.Choice = NewEG_AxSharedChoice()
				if _acdbc := d.DecodeElement(&_gdge.Choice.CrossesAt, &_adggf); _acdbc != nil {
					return _acdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_gdge.TickLblSkip = NewCT_Skip()
				if _gcfd := d.DecodeElement(_gdge.TickLblSkip, &_adggf); _gcfd != nil {
					return _gcfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_gdge.TickMarkSkip = NewCT_Skip()
				if _ddfcc := d.DecodeElement(_gdge.TickMarkSkip, &_adggf); _ddfcc != nil {
					return _ddfcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gdge.ExtLst = NewCT_ExtensionList()
				if _gfde := d.DecodeElement(_gdge.ExtLst, &_adggf); _gfde != nil {
					return _gfde
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _adggf.Name)
				if _afgeb := d.Skip(); _afgeb != nil {
					return _afgeb
				}
			}
		case _e.EndElement:
			break _aggc
		case _e.CharData:
		}
	}
	return nil
}

type CT_RelId struct{ IdAttr string }

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

func (_dcgf *CT_View3D) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fcbe:
	for {
		_edgff, _ggdeg := d.Token()
		if _ggdeg != nil {
			return _ggdeg
		}
		switch _gdgce := _edgff.(type) {
		case _e.StartElement:
			switch _gdgce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_dcgf.RotX = NewCT_RotX()
				if _bcdeda := d.DecodeElement(_dcgf.RotX, &_gdgce); _bcdeda != nil {
					return _bcdeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_dcgf.HPercent = NewCT_HPercent()
				if _ffggd := d.DecodeElement(_dcgf.HPercent, &_gdgce); _ffggd != nil {
					return _ffggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_dcgf.RotY = NewCT_RotY()
				if _bggf := d.DecodeElement(_dcgf.RotY, &_gdgce); _bggf != nil {
					return _bggf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_dcgf.DepthPercent = NewCT_DepthPercent()
				if _eage := d.DecodeElement(_dcgf.DepthPercent, &_gdgce); _eage != nil {
					return _eage
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_dcgf.RAngAx = NewCT_Boolean()
				if _bgfcd := d.DecodeElement(_dcgf.RAngAx, &_gdgce); _bgfcd != nil {
					return _bgfcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_dcgf.Perspective = NewCT_Perspective()
				if _fbaed := d.DecodeElement(_dcgf.Perspective, &_gdgce); _fbaed != nil {
					return _fbaed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcgf.ExtLst = NewCT_ExtensionList()
				if _fecde := d.DecodeElement(_dcgf.ExtLst, &_gdgce); _fecde != nil {
					return _fecde
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _gdgce.Name)
				if _dfadg := d.Skip(); _dfadg != nil {
					return _dfadg
				}
			}
		case _e.EndElement:
			break _fcbe
		case _e.CharData:
		}
	}
	return nil
}

func (_adbcg ST_BuiltInUnit) String() string {
	switch _adbcg {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

// Validate validates the CT_TxChoice and its children
func (_facgd *CT_TxChoice) Validate() error {
	return _facgd.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}

func (_eeab *CT_LegendEntry) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bfee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_eeab.Idx, _bfee)
	if _eeab.Choice != nil {
		_eeab.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _eeab.ExtLst != nil {
		_cbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eeab.ExtLst, _cbfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bfefg ST_RadarStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bfggaf := _e.Attr{}
	_bfggaf.Name = name
	switch _bfefg {
	case ST_RadarStyleUnset:
		_bfggaf.Value = ""
	case ST_RadarStyleStandard:
		_bfggaf.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_bfggaf.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_bfggaf.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _bfggaf, nil
}

// Validate validates the EG_SurfaceChartShared and its children
func (_fcac *EG_SurfaceChartShared) Validate() error {
	return _fcac.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_ccec *CT_Legend) ValidateWithPath(path string) error {
	if _ccec.LegendPos != nil {
		if _acfc := _ccec.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _acfc != nil {
			return _acfc
		}
	}
	for _abgb, _fgdf := range _ccec.LegendEntry {
		if _effd := _fgdf.ValidateWithPath(_bf.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _abgb)); _effd != nil {
			return _effd
		}
	}
	if _ccec.Layout != nil {
		if _bebcd := _ccec.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _bebcd != nil {
			return _bebcd
		}
	}
	if _ccec.Overlay != nil {
		if _cffd := _ccec.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _cffd != nil {
			return _cffd
		}
	}
	if _ccec.SpPr != nil {
		if _bcgcb := _ccec.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bcgcb != nil {
			return _bcgcb
		}
	}
	if _ccec.TxPr != nil {
		if _aadf := _ccec.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aadf != nil {
			return _aadf
		}
	}
	if _ccec.ExtLst != nil {
		if _egda := _ccec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egda != nil {
			return _egda
		}
	}
	return nil
}

func NewCT_SerTx() *CT_SerTx {
	_efffc := &CT_SerTx{}
	_efffc.Choice = NewCT_SerTxChoice()
	return _efffc
}

func (_caeeaf ST_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _caeeaf.ST_OverlapPercent != nil {
		e.EncodeToken(_e.CharData(*_caeeaf.ST_OverlapPercent))
	}
	if _caeeaf.ST_OverlapByte != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_caeeaf.ST_OverlapByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type ST_BuiltInUnit byte

func NewCT_Title() *CT_Title { _dacgc := &CT_Title{}; return _dacgc }

func (_ddfbe *ST_DLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ddfbe = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_ddfbe = 1
	case "\u0062":
		*_ddfbe = 2
	case "\u0063\u0074\u0072":
		*_ddfbe = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_ddfbe = 4
	case "\u0069\u006e\u0045n\u0064":
		*_ddfbe = 5
	case "\u006c":
		*_ddfbe = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_ddfbe = 7
	case "\u0072":
		*_ddfbe = 8
	case "\u0074":
		*_ddfbe = 9
	}
	return nil
}

// Validate validates the EG_DLblShared and its children
func (_caeac *EG_DLblShared) Validate() error {
	return _caeac.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_bgcfc *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _bgcfc.AreaChart != nil {
		if _bfcce := _bgcfc.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _bfcce != nil {
			return _bfcce
		}
	}
	if _bgcfc.Area3DChart != nil {
		if _gaaf := _bgcfc.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _gaaf != nil {
			return _gaaf
		}
	}
	if _bgcfc.LineChart != nil {
		if _cbcf := _bgcfc.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _cbcf != nil {
			return _cbcf
		}
	}
	if _bgcfc.Line3DChart != nil {
		if _ccbgb := _bgcfc.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _ccbgb != nil {
			return _ccbgb
		}
	}
	if _bgcfc.StockChart != nil {
		if _cdae := _bgcfc.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _cdae != nil {
			return _cdae
		}
	}
	if _bgcfc.RadarChart != nil {
		if _acbea := _bgcfc.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _acbea != nil {
			return _acbea
		}
	}
	if _bgcfc.ScatterChart != nil {
		if _fccgb := _bgcfc.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _fccgb != nil {
			return _fccgb
		}
	}
	if _bgcfc.PieChart != nil {
		if _caad := _bgcfc.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _caad != nil {
			return _caad
		}
	}
	if _bgcfc.Pie3DChart != nil {
		if _feagb := _bgcfc.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _feagb != nil {
			return _feagb
		}
	}
	if _bgcfc.DoughnutChart != nil {
		if _cfbfd := _bgcfc.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _cfbfd != nil {
			return _cfbfd
		}
	}
	if _bgcfc.BarChart != nil {
		if _feagbc := _bgcfc.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _feagbc != nil {
			return _feagbc
		}
	}
	if _bgcfc.Bar3DChart != nil {
		if _cbeb := _bgcfc.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _cbeb != nil {
			return _cbeb
		}
	}
	if _bgcfc.OfPieChart != nil {
		if _aacd := _bgcfc.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _aacd != nil {
			return _aacd
		}
	}
	if _bgcfc.SurfaceChart != nil {
		if _gccca := _bgcfc.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _gccca != nil {
			return _gccca
		}
	}
	if _bgcfc.Surface3DChart != nil {
		if _ffgba := _bgcfc.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _ffgba != nil {
			return _ffgba
		}
	}
	if _bgcfc.BubbleChart != nil {
		if _dbda := _bgcfc.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _dbda != nil {
			return _dbda
		}
	}
	return nil
}

func (_gaefc ST_LegendPos) ValidateWithPath(path string) error {
	switch _gaefc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gaefc))
	}
	return nil
}

func (_gbeg ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _gbeg {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbeg))
	}
	return nil
}

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_gdfc *CT_RadarStyle) ValidateWithPath(path string) error {
	if _gggf := _gdfc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gggf != nil {
		return _gggf
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_dgca *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _dgca.CustUnit != nil {
		if _dcac := _dgca.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _dcac != nil {
			return _dcac
		}
	}
	if _dgca.BuiltInUnit != nil {
		if _ffeb := _dgca.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _ffeb != nil {
			return _ffeb
		}
	}
	return nil
}

func (_faacf *CT_Skip) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_faacf.ValAttr = 1
	for _, _ddgac := range start.Attr {
		if _ddgac.Name.Local == "\u0076\u0061\u006c" {
			_cgfa, _gcfa := _b.ParseUint(_ddgac.Value, 10, 32)
			if _gcfa != nil {
				return _gcfa
			}
			_faacf.ValAttr = uint32(_cgfa)
			continue
		}
	}
	for {
		_aegg, _dagf := d.Token()
		if _dagf != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _dagf)
		}
		if _dbafa, _dbgfe := _aegg.(_e.EndElement); _dbgfe && _dbafa.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cbea *ST_Overlap) ValidateWithPath(path string) error {
	_gfbcb := []string{}
	if _cbea.ST_OverlapPercent != nil {
		_gfbcb = append(_gfbcb, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _cbea.ST_OverlapByte != nil {
		_gfbcb = append(_gfbcb, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_gfbcb) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gfbcb)
	}
	return nil
}

func NewCT_Protection() *CT_Protection { _fcaaa := &CT_Protection{}; return _fcaaa }

func (_fgfa *ST_RadarStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fgfa = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_fgfa = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_fgfa = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_fgfa = 3
	}
	return nil
}

func (_gefd *CT_PictureStackUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _gefd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_edfgd *ST_GapAmount) Validate() error { return _edfgd.ValidateWithPath("") }

type CT_TickMark struct{ ValAttr ST_TickMark }

type ST_CrossBetween byte

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_faabe *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _gdfgf := _faabe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gdfgf != nil {
		return _gdfgf
	}
	if _ebadb := _faabe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ebadb != nil {
		return _ebadb
	}
	if _faabe.Tx != nil {
		if _bffc := _faabe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bffc != nil {
			return _bffc
		}
	}
	if _faabe.SpPr != nil {
		if _aadfd := _faabe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aadfd != nil {
			return _aadfd
		}
	}
	if _faabe.Cat != nil {
		if _dafab := _faabe.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _dafab != nil {
			return _dafab
		}
	}
	if _faabe.Val != nil {
		if _ddbde := _faabe.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _ddbde != nil {
			return _ddbde
		}
	}
	if _faabe.ExtLst != nil {
		if _cbddg := _faabe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbddg != nil {
			return _cbddg
		}
	}
	return nil
}

func (_edacf *CT_Marker) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _edacf.Symbol != nil {
		_gfad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_edacf.Symbol, _gfad)
	}
	if _edacf.Size != nil {
		_fbae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_edacf.Size, _fbae)
	}
	if _edacf.SpPr != nil {
		_decfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_edacf.SpPr, _decfb)
	}
	if _edacf.ExtLst != nil {
		_gcad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edacf.ExtLst, _gcad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_aaegf *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _aaegf.Crosses != nil {
		if _abefe := _aaegf.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _abefe != nil {
			return _abefe
		}
	}
	if _aaegf.CrossesAt != nil {
		if _eadb := _aaegf.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _eadb != nil {
			return _eadb
		}
	}
	return nil
}

func (_gdbae ST_ErrDir) ValidateWithPath(path string) error {
	switch _gdbae {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdbae))
	}
	return nil
}

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_fa *CT_Area3DChart) ValidateWithPath(path string) error {
	if _fa.Grouping != nil {
		if _df := _fa.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _df != nil {
			return _df
		}
	}
	if _fa.VaryColors != nil {
		if _ff := _fa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ff != nil {
			return _ff
		}
	}
	for _fc, _aa := range _fa.Ser {
		if _cbg := _aa.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fc)); _cbg != nil {
			return _cbg
		}
	}
	if _fa.DLbls != nil {
		if _abc := _fa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _abc != nil {
			return _abc
		}
	}
	if _fa.DropLines != nil {
		if _da := _fa.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _da != nil {
			return _da
		}
	}
	if _fa.GapDepth != nil {
		if _aaf := _fa.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _aaf != nil {
			return _aaf
		}
	}
	for _bb, _ae := range _fa.AxId {
		if _bcc := _ae.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bb)); _bcc != nil {
			return _bcc
		}
	}
	if _fa.ExtLst != nil {
		if _de := _fa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _de != nil {
			return _de
		}
	}
	return nil
}

// Validate validates the CT_StrVal and its children
func (_ddbcf *CT_StrVal) Validate() error {
	return _ddbcf.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_deeb *CT_DepthPercent) ValidateWithPath(path string) error {
	if _deeb.ValAttr != nil {
		if _gcda := _deeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcda != nil {
			return _gcda
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_bedd *CT_ExtensionList) ValidateWithPath(path string) error {
	for _ceaf, _afbd := range _bedd.Ext {
		if _eaca := _afbd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _ceaf)); _eaca != nil {
			return _eaca
		}
	}
	return nil
}

func (_dffcd ST_AxPos) Validate() error { return _dffcd.ValidateWithPath("") }

func (_deag *CT_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deag.ValAttr = ST_ErrDir(1)
	for _, _abfbg := range start.Attr {
		if _abfbg.Name.Local == "\u0076\u0061\u006c" {
			_deag.ValAttr.UnmarshalXMLAttr(_abfbg)
			continue
		}
	}
	for {
		_ffdc, _gfae := d.Token()
		if _gfae != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _gfae)
		}
		if _edbf, _cede := _ffdc.(_e.EndElement); _cede && _edbf.Name == start.Name {
			break
		}
	}
	return nil
}

func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_degfb, _ccfggc := _b.ParseUint(s, 10, 16)
	if _ccfggc != nil {
		return ST_SecondPieSize{}, _ccfggc
	}
	_dbbbgd := uint16(_degfb)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_dbbbgd}, nil
}

type CT_ValAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	CrossBetween   *CT_CrossBetween
	MajorUnit      *CT_AxisUnit
	MinorUnit      *CT_AxisUnit
	DispUnits      *CT_DispUnits
	ExtLst         *CT_ExtensionList
}

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_dadb *CT_AxPos) ValidateWithPath(path string) error {
	if _dadb.ValAttr == ST_AxPosUnset {
		return _bf.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gae := _dadb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gae != nil {
		return _gae
	}
	return nil
}

func (_dcdf ST_TimeUnit) ValidateWithPath(path string) error {
	switch _dcdf {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcdf))
	}
	return nil
}

func NewCT_ScatterStyle() *CT_ScatterStyle { _dbdbd := &CT_ScatterStyle{}; return _dbdbd }

type CT_Legend struct {
	LegendPos   *CT_LegendPos
	LegendEntry []*CT_LegendEntry
	Layout      *CT_Layout
	Overlay     *CT_Boolean
	SpPr        *_cb.CT_ShapeProperties
	TxPr        *_cb.CT_TextBody
	ExtLst      *CT_ExtensionList
}

func NewEG_DLblShared() *EG_DLblShared { _dede := &EG_DLblShared{}; return _dede }

func (_eadcf *ST_SecondPieSize) ValidateWithPath(path string) error {
	_aggb := []string{}
	if _eadcf.ST_SecondPieSizePercent != nil {
		_aggb = append(_aggb, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _eadcf.ST_SecondPieSizeUShort != nil {
		_aggb = append(_aggb, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_aggb) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _aggb)
	}
	return nil
}

func NewCT_TxChoice() *CT_TxChoice { _feecga := &CT_TxChoice{}; return _feecga }

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

// Validate validates the CT_UnsignedInt and its children
func (_dcgc *CT_UnsignedInt) Validate() error {
	return _dcgc.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}

func (_fggdc ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _fggdc {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fggdc))
	}
	return nil
}

type CT_SplitType struct{ ValAttr ST_SplitType }

func (_bdcdc *Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdcdc.CT_RelId = *NewCT_RelId()
	for _, _ddaeb := range start.Attr {
		if _ddaeb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ddaeb.Name.Local == "\u0069\u0064" || _ddaeb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ddaeb.Name.Local == "\u0069\u0064" {
			_fgdd, _ccebde := _ddaeb.Value, error(nil)
			if _ccebde != nil {
				return _ccebde
			}
			_bdcdc.IdAttr = _fgdd
			continue
		}
	}
	for {
		_fdbef, _fedde := d.Token()
		if _fedde != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _fedde)
		}
		if _bbgda, _cafff := _fdbef.(_e.EndElement); _cafff && _bbgda.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_PlotArea() *CT_PlotArea { _gdad := &CT_PlotArea{}; return _gdad }

type ST_TickMark byte

func NewCT_TextLanguageID() *CT_TextLanguageID { _dbeda := &CT_TextLanguageID{}; return _dbeda }

type EG_SerShared struct {
	Idx   *CT_UnsignedInt
	Order *CT_UnsignedInt
	Tx    *CT_SerTx
	SpPr  *_cb.CT_ShapeProperties
}

func (_gaab *CT_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gaab.ValAttr != ST_LegendPosUnset {
		_fcddb, _ccfg := _gaab.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ccfg != nil {
			return _ccfg
		}
		start.Attr = append(start.Attr, _fcddb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fgcfb ST_BarGrouping) String() string {
	switch _fgcfb {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

func NewCT_TrendlineLbl() *CT_TrendlineLbl { _fcef := &CT_TrendlineLbl{}; return _fcef }

func (_ccb *CT_AxisUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ccb.ValAttr = 0 + 1
	for _, _cga := range start.Attr {
		if _cga.Name.Local == "\u0076\u0061\u006c" {
			_befd, _efc := _b.ParseFloat(_cga.Value, 64)
			if _efc != nil {
				return _efc
			}
			_ccb.ValAttr = _befd
			continue
		}
	}
	for {
		_gcf, _adec := d.Token()
		if _adec != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _adec)
		}
		if _egf, _ag := _gcf.(_e.EndElement); _ag && _egf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_AreaChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_DPt() *CT_DPt { _efbc := &CT_DPt{}; _efbc.Idx = NewCT_UnsignedInt(); return _efbc }

type EG_LegendEntryData struct{ TxPr *_cb.CT_TextBody }

func (_dgade *ST_LayoutTarget) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dgade = 0
	case "\u0069\u006e\u006ee\u0072":
		*_dgade = 1
	case "\u006f\u0075\u0074e\u0072":
		*_dgade = 2
	}
	return nil
}

func (_dbgaf ST_MarkerStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dcbdcb := _e.Attr{}
	_dcbdcb.Name = name
	switch _dbgaf {
	case ST_MarkerStyleUnset:
		_dcbdcb.Value = ""
	case ST_MarkerStyleCircle:
		_dcbdcb.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_dcbdcb.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_dcbdcb.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_dcbdcb.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_dcbdcb.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_dcbdcb.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_dcbdcb.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_dcbdcb.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_dcbdcb.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_dcbdcb.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_dcbdcb.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_dcbdcb.Value = "\u0061\u0075\u0074\u006f"
	}
	return _dcbdcb, nil
}

func (_dbbc *ST_SizeRepresents) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dbbc = 0
	case "\u0061\u0072\u0065\u0061":
		*_dbbc = 1
	case "\u0077":
		*_dbbc = 2
	}
	return nil
}

func (_cfeec ST_BuiltInUnit) Validate() error { return _cfeec.ValidateWithPath("") }

func (_gdgcc ST_PictureFormat) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dfaac := _e.Attr{}
	_dfaac.Name = name
	switch _gdgcc {
	case ST_PictureFormatUnset:
		_dfaac.Value = ""
	case ST_PictureFormatStretch:
		_dfaac.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_dfaac.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_dfaac.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _dfaac, nil
}

func (_bagd *CT_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bagd.ValAttr != ST_LayoutModeUnset {
		_cbaf, _aceg := _bagd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _aceg != nil {
			return _aceg
		}
		start.Attr = append(start.Attr, _cbaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Lvl and its children
func (_fdca *CT_Lvl) Validate() error {
	return _fdca.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}

type ST_ScatterStyle byte

// Validate validates the CT_Double and its children
func (_afde *CT_Double) Validate() error {
	return _afde.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}

func (_acbbc ST_ErrDir) Validate() error { return _acbbc.ValidateWithPath("") }

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

func (_gfcf ST_TickLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gaedf := _e.Attr{}
	_gaedf.Name = name
	switch _gfcf {
	case ST_TickLblPosUnset:
		_gaedf.Value = ""
	case ST_TickLblPosHigh:
		_gaedf.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_gaedf.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_gaedf.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_gaedf.Value = "\u006e\u006f\u006e\u0065"
	}
	return _gaedf, nil
}

func NewCT_Shape() *CT_Shape { _gegdg := &CT_Shape{}; return _gegdg }

// Validate validates the CT_BarSer and its children
func (_dgad *CT_BarSer) Validate() error {
	return _dgad.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}

func NewCT_Area3DChart() *CT_Area3DChart { _f := &CT_Area3DChart{}; return _f }

func (_dgec *CT_Legend) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dgec.LegendPos != nil {
		_dcaeg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_dgec.LegendPos, _dcaeg)
	}
	if _dgec.LegendEntry != nil {
		_egcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _cdfb := range _dgec.LegendEntry {
			e.EncodeElement(_cdfb, _egcf)
		}
	}
	if _dgec.Layout != nil {
		_egce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dgec.Layout, _egce)
	}
	if _dgec.Overlay != nil {
		_bbdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_dgec.Overlay, _bbdf)
	}
	if _dgec.SpPr != nil {
		_bdcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dgec.SpPr, _bdcc)
	}
	if _dgec.TxPr != nil {
		_dedb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dgec.TxPr, _dedb)
	}
	if _dgec.ExtLst != nil {
		_bfgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgec.ExtLst, _bfgg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ScatterSer and its children
func (_bbfe *CT_ScatterSer) Validate() error {
	return _bbfe.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

type CT_ExtensionList struct{ Ext []*CT_Extension }

type CT_DLbl struct {
	Idx    *CT_UnsignedInt
	Choice *CT_DLblChoice
	ExtLst *CT_ExtensionList
}

func (_gacb *CT_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gacb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_gacb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

func NewCT_HPercent() *CT_HPercent { _cbdac := &CT_HPercent{}; return _cbdac }

func (_dgccfb *CT_SerTxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ccgdf:
	for {
		_geea, _abcbf := d.Token()
		if _abcbf != nil {
			return _abcbf
		}
		switch _egdaf := _geea.(type) {
		case _e.StartElement:
			switch _egdaf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_dgccfb.StrRef = NewCT_StrRef()
				if _edgab := d.DecodeElement(_dgccfb.StrRef, &_egdaf); _edgab != nil {
					return _edgab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_dgccfb.V = new(string)
				if _aggaa := d.DecodeElement(_dgccfb.V, &_egdaf); _aggaa != nil {
					return _aggaa
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _egdaf.Name)
				if _cggbfa := d.Skip(); _cggbfa != nil {
					return _cggbfa
				}
			}
		case _e.EndElement:
			break _ccgdf
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_StrVal() *CT_StrVal { _fgaac := &CT_StrVal{}; return _fgaac }

func (_cdebg *ST_SplitType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cdebg = 0
	case "\u0061\u0075\u0074\u006f":
		*_cdebg = 1
	case "\u0063\u0075\u0073\u0074":
		*_cdebg = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_cdebg = 3
	case "\u0070\u006f\u0073":
		*_cdebg = 4
	case "\u0076\u0061\u006c":
		*_cdebg = 5
	}
	return nil
}

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_ccebe *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _ccebe.NumRef != nil {
		if _fffg := _ccebe.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fffg != nil {
			return _fffg
		}
	}
	if _ccebe.NumLit != nil {
		if _fdgff := _ccebe.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _fdgff != nil {
			return _fdgff
		}
	}
	return nil
}

func (_bcagb ST_Crosses) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ffddc := _e.Attr{}
	_ffddc.Name = name
	switch _bcagb {
	case ST_CrossesUnset:
		_ffddc.Value = ""
	case ST_CrossesAutoZero:
		_ffddc.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_ffddc.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_ffddc.Value = "\u006d\u0069\u006e"
	}
	return _ffddc, nil
}

func (_fdafa *CT_Protection) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fdafa.ChartObject != nil {
		_dfdab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_fdafa.ChartObject, _dfdab)
	}
	if _fdafa.Data != nil {
		_dbae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_fdafa.Data, _dbae)
	}
	if _fdafa.Formatting != nil {
		_fbfebe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_fdafa.Formatting, _fbfebe)
	}
	if _fdafa.Selection != nil {
		_ccaa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_fdafa.Selection, _ccaa)
	}
	if _fdafa.UserInterface != nil {
		_gcbdc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_fdafa.UserInterface, _gcbdc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_faff *CT_DispUnitsLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bfab:
	for {
		_bbfgc, _bgcf := d.Token()
		if _bgcf != nil {
			return _bgcf
		}
		switch _ccaf := _bbfgc.(type) {
		case _e.StartElement:
			switch _ccaf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_faff.Layout = NewCT_Layout()
				if _cbfb := d.DecodeElement(_faff.Layout, &_ccaf); _cbfb != nil {
					return _cbfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_faff.Tx = NewCT_Tx()
				if _agca := d.DecodeElement(_faff.Tx, &_ccaf); _agca != nil {
					return _agca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_faff.SpPr = _cb.NewCT_ShapeProperties()
				if _fcfe := d.DecodeElement(_faff.SpPr, &_ccaf); _fcfe != nil {
					return _fcfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_faff.TxPr = _cb.NewCT_TextBody()
				if _dbabc := d.DecodeElement(_faff.TxPr, &_ccaf); _dbabc != nil {
					return _dbabc
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _ccaf.Name)
				if _dcefb := d.Skip(); _dcefb != nil {
					return _dcefb
				}
			}
		case _e.EndElement:
			break _bfab
		case _e.CharData:
		}
	}
	return nil
}

func (_caeab *CT_PieSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_caeab.Idx = NewCT_UnsignedInt()
	_caeab.Order = NewCT_UnsignedInt()
_agcce:
	for {
		_dfaee, _cgbgg := d.Token()
		if _cgbgg != nil {
			return _cgbgg
		}
		switch _dcfef := _dfaee.(type) {
		case _e.StartElement:
			switch _dcfef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _fccdd := d.DecodeElement(_caeab.Idx, &_dcfef); _fccdd != nil {
					return _fccdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eebbd := d.DecodeElement(_caeab.Order, &_dcfef); _eebbd != nil {
					return _eebbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_caeab.Tx = NewCT_SerTx()
				if _bcgag := d.DecodeElement(_caeab.Tx, &_dcfef); _bcgag != nil {
					return _bcgag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_caeab.SpPr = _cb.NewCT_ShapeProperties()
				if _ffgdd := d.DecodeElement(_caeab.SpPr, &_dcfef); _ffgdd != nil {
					return _ffgdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_caeab.Explosion = NewCT_UnsignedInt()
				if _ebacb := d.DecodeElement(_caeab.Explosion, &_dcfef); _ebacb != nil {
					return _ebacb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fgeb := NewCT_DPt()
				if _fbfgd := d.DecodeElement(_fgeb, &_dcfef); _fbfgd != nil {
					return _fbfgd
				}
				_caeab.DPt = append(_caeab.DPt, _fgeb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_caeab.DLbls = NewCT_DLbls()
				if _dgbaa := d.DecodeElement(_caeab.DLbls, &_dcfef); _dgbaa != nil {
					return _dgbaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_caeab.Cat = NewCT_AxDataSource()
				if _gbgg := d.DecodeElement(_caeab.Cat, &_dcfef); _gbgg != nil {
					return _gbgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_caeab.Val = NewCT_NumDataSource()
				if _deadg := d.DecodeElement(_caeab.Val, &_dcfef); _deadg != nil {
					return _deadg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_caeab.ExtLst = NewCT_ExtensionList()
				if _ggccc := d.DecodeElement(_caeab.ExtLst, &_dcfef); _ggccc != nil {
					return _ggccc
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _dcfef.Name)
				if _aeegf := d.Skip(); _aeegf != nil {
					return _aeegf
				}
			}
		case _e.EndElement:
			break _agcce
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_ffgca *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _cdge := _ffgca.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cdge != nil {
		return _cdge
	}
	return nil
}

var ST_BubbleScalePercentPatternRe = _ef.MustCompile(ST_BubbleScalePercentPattern)

func NewCT_Line3DChart() *CT_Line3DChart {
	_adgfg := &CT_Line3DChart{}
	_adgfg.Grouping = NewCT_Grouping()
	return _adgfg
}

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_geab *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }

func NewCT_SurfaceSer() *CT_SurfaceSer {
	_agcg := &CT_SurfaceSer{}
	_agcg.Idx = NewCT_UnsignedInt()
	_agcg.Order = NewCT_UnsignedInt()
	return _agcg
}

func (_bbdfd *ST_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggegaf, _cgba := d.Token()
	if _cgba != nil {
		return _cgba
	}
	if _dccac, _fbbgd := _ggegaf.(_e.EndElement); _fbbgd && _dccac.Name == start.Name {
		*_bbdfd = 1
		return nil
	}
	if _aagda, _feffgc := _ggegaf.(_e.CharData); !_feffgc {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggegaf)
	} else {
		switch string(_aagda) {
		case "":
			*_bbdfd = 0
		case "\u0062":
			*_bbdfd = 1
		case "\u0074\u0072":
			*_bbdfd = 2
		case "\u006c":
			*_bbdfd = 3
		case "\u0072":
			*_bbdfd = 4
		case "\u0074":
			*_bbdfd = 5
		}
	}
	_ggegaf, _cgba = d.Token()
	if _cgba != nil {
		return _cgba
	}
	if _cgfd, _gagbg := _ggegaf.(_e.EndElement); _gagbg && _cgfd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggegaf)
}

func (_acgg *CT_MarkerSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cceea := range start.Attr {
		if _cceea.Name.Local == "\u0076\u0061\u006c" {
			_bcded, _efaea := _b.ParseUint(_cceea.Value, 10, 8)
			if _efaea != nil {
				return _efaea
			}
			_bfce := uint8(_bcded)
			_acgg.ValAttr = &_bfce
			continue
		}
	}
	for {
		_bgbe, _dabac := d.Token()
		if _dabac != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _dabac)
		}
		if _ebddc, _adcda := _bgbe.(_e.EndElement); _adcda && _ebddc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_ebcg *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _ebcg.VaryColors != nil {
		if _fcfbd := _ebcg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fcfbd != nil {
			return _fcfbd
		}
	}
	for _ffebf, _cdag := range _ebcg.Ser {
		if _cbba := _cdag.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ffebf)); _cbba != nil {
			return _cbba
		}
	}
	if _ebcg.DLbls != nil {
		if _gggad := _ebcg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gggad != nil {
			return _gggad
		}
	}
	if _ebcg.ExtLst != nil {
		if _ddgc := _ebcg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddgc != nil {
			return _ddgc
		}
	}
	return nil
}

func NewCT_Boolean() *CT_Boolean { _dab := &CT_Boolean{}; return _dab }

type ST_TickLblPos byte

// Validate validates the CT_ChartSpace and its children
func (_bbb *CT_ChartSpace) Validate() error {
	return _bbb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

// Validate validates the CT_Surface and its children
func (_dbcee *CT_Surface) Validate() error {
	return _dbcee.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}

func (_gfegbc ST_TrendlineType) ValidateWithPath(path string) error {
	switch _gfegbc {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfegbc))
	}
	return nil
}

func (_ebfc *ST_BubbleScale) Validate() error { return _ebfc.ValidateWithPath("") }

type CT_SizeRepresents struct{ ValAttr ST_SizeRepresents }

func (_agadbg *ST_Grouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_agadbg = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_agadbg = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_agadbg = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_agadbg = 3
	}
	return nil
}

// Validate validates the EG_PieChartShared and its children
func (_bdfeb *EG_PieChartShared) Validate() error {
	return _bdfeb.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

func (_decda ST_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _decda.ST_HoleSizePercent != nil {
		e.EncodeToken(_e.CharData(*_decda.ST_HoleSizePercent))
	}
	if _decda.ST_HoleSizeUByte != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_decda.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_edadc *CT_PieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _edadc.VaryColors != nil {
		_acdga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_edadc.VaryColors, _acdga)
	}
	if _edadc.Ser != nil {
		_bgecgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fcdag := range _edadc.Ser {
			e.EncodeElement(_fcdag, _bgecgc)
		}
	}
	if _edadc.DLbls != nil {
		_gaceg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_edadc.DLbls, _gaceg)
	}
	if _edadc.FirstSliceAng != nil {
		_gbgda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_edadc.FirstSliceAng, _gbgda)
	}
	if _edadc.ExtLst != nil {
		_dbgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edadc.ExtLst, _dbgfb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_cgdg *CT_BubbleChart) ValidateWithPath(path string) error {
	if _cgdg.VaryColors != nil {
		if _acgf := _cgdg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _acgf != nil {
			return _acgf
		}
	}
	for _ffde, _gedc := range _cgdg.Ser {
		if _afda := _gedc.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ffde)); _afda != nil {
			return _afda
		}
	}
	if _cgdg.DLbls != nil {
		if _bgg := _cgdg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bgg != nil {
			return _bgg
		}
	}
	if _cgdg.Bubble3D != nil {
		if _aba := _cgdg.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _aba != nil {
			return _aba
		}
	}
	if _cgdg.BubbleScale != nil {
		if _eaaf := _cgdg.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _eaaf != nil {
			return _eaaf
		}
	}
	if _cgdg.ShowNegBubbles != nil {
		if _ccc := _cgdg.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _ccc != nil {
			return _ccc
		}
	}
	if _cgdg.SizeRepresents != nil {
		if _defeg := _cgdg.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _defeg != nil {
			return _defeg
		}
	}
	for _eeac, _fgd := range _cgdg.AxId {
		if _gdbd := _fgd.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _eeac)); _gdbd != nil {
			return _gdbd
		}
	}
	if _cgdg.ExtLst != nil {
		if _cbegf := _cgdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbegf != nil {
			return _cbegf
		}
	}
	return nil
}

type CT_Orientation struct{ ValAttr ST_Orientation }

type CT_TrendlineType struct{ ValAttr ST_TrendlineType }

func (_egffe ST_DispBlanksAs) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_decdf := _e.Attr{}
	_decdf.Name = name
	switch _egffe {
	case ST_DispBlanksAsUnset:
		_decdf.Value = ""
	case ST_DispBlanksAsSpan:
		_decdf.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_decdf.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_decdf.Value = "\u007a\u0065\u0072\u006f"
	}
	return _decdf, nil
}

func (_cbgea ST_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cbgea.String(), start)
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_geec *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _geec.MultiLvlStrRef != nil {
		if _cfg := _geec.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _cfg != nil {
			return _cfg
		}
	}
	if _geec.NumRef != nil {
		if _dcc := _geec.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _dcc != nil {
			return _dcc
		}
	}
	if _geec.NumLit != nil {
		if _ega := _geec.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _ega != nil {
			return _ega
		}
	}
	if _geec.StrRef != nil {
		if _gegg := _geec.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _gegg != nil {
			return _gegg
		}
	}
	if _geec.StrLit != nil {
		if _dccg := _geec.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _dccg != nil {
			return _dccg
		}
	}
	return nil
}

func (_feaac ST_ScatterStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_debcfa := _e.Attr{}
	_debcfa.Name = name
	switch _feaac {
	case ST_ScatterStyleUnset:
		_debcfa.Value = ""
	case ST_ScatterStyleNone:
		_debcfa.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_debcfa.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_debcfa.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_debcfa.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_debcfa.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_debcfa.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _debcfa, nil
}

// Validate validates the CT_LegendEntry and its children
func (_afaf *CT_LegendEntry) Validate() error {
	return _afaf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}

func (_cdeb *EG_AreaChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_abbfc:
	for {
		_ecdd, _eacac := d.Token()
		if _eacac != nil {
			return _eacac
		}
		switch _daebb := _ecdd.(type) {
		case _e.StartElement:
			switch _daebb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_cdeb.Grouping = NewCT_Grouping()
				if _acdef := d.DecodeElement(_cdeb.Grouping, &_daebb); _acdef != nil {
					return _acdef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cdeb.VaryColors = NewCT_Boolean()
				if _bdce := d.DecodeElement(_cdeb.VaryColors, &_daebb); _bdce != nil {
					return _bdce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffcfc := NewCT_AreaSer()
				if _egad := d.DecodeElement(_ffcfc, &_daebb); _egad != nil {
					return _egad
				}
				_cdeb.Ser = append(_cdeb.Ser, _ffcfc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cdeb.DLbls = NewCT_DLbls()
				if _aaacaa := d.DecodeElement(_cdeb.DLbls, &_daebb); _aaacaa != nil {
					return _aaacaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cdeb.DropLines = NewCT_ChartLines()
				if _gadd := d.DecodeElement(_cdeb.DropLines, &_daebb); _gadd != nil {
					return _gadd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _daebb.Name)
				if _cbfc := d.Skip(); _cbfc != nil {
					return _cbfc
				}
			}
		case _e.EndElement:
			break _abbfc
		case _e.CharData:
		}
	}
	return nil
}

func (_ccdfb *CT_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dcdeb := range start.Attr {
		if _dcdeb.Name.Local == "\u0076\u0061\u006c" {
			_ccdfb.ValAttr.UnmarshalXMLAttr(_dcdeb)
			continue
		}
	}
	for {
		_dgadb, _ecgg := d.Token()
		if _ecgg != nil {
			return _bf.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _ecgg)
		}
		if _gbgb, _eeagf := _dgadb.(_e.EndElement); _eeagf && _gbgb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_AxPos and its children
func (_dcab *CT_AxPos) Validate() error {
	return _dcab.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}

func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_ebda, _gfebac := _b.ParseUint(s, 10, 8)
	if _gfebac != nil {
		return ST_HoleSize{}, _gfebac
	}
	_fbgbf := uint8(_ebda)
	return ST_HoleSize{ST_HoleSizeUByte: &_fbgbf}, nil
}

type ST_DispBlanksAs byte

// Validate validates the CT_Scaling and its children
func (_fdfb *CT_Scaling) Validate() error {
	return _fdfb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}

type Group_DLbl struct {
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_aebd ST_SplitType) Validate() error { return _aebd.ValidateWithPath("") }

func (_dbbgf ST_LayoutMode) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bacba := _e.Attr{}
	_bacba.Name = name
	switch _dbbgf {
	case ST_LayoutModeUnset:
		_bacba.Value = ""
	case ST_LayoutModeEdge:
		_bacba.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_bacba.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _bacba, nil
}

type CT_Period struct{ ValAttr *uint32 }

type CT_PivotFmts struct{ PivotFmt []*CT_PivotFmt }

func NewCT_PageSetup() *CT_PageSetup { _ebcbag := &CT_PageSetup{}; return _ebcbag }

func (_afbg *CT_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dddbf, _cfde := _afbg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _cfde != nil {
		return _cfde
	}
	start.Attr = append(start.Attr, _dddbf)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_RotY() *CT_RotY { _ffda := &CT_RotY{}; return _ffda }

func (_fgbaab ST_TrendlineType) String() string {
	switch _fgbaab {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}

// Validate validates the CT_PictureFormat and its children
func (_acbdc *CT_PictureFormat) Validate() error {
	return _acbdc.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}

func (_adafb *ST_MarkerStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_adafb = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_adafb = 1
	case "\u0064\u0061\u0073\u0068":
		*_adafb = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_adafb = 3
	case "\u0064\u006f\u0074":
		*_adafb = 4
	case "\u006e\u006f\u006e\u0065":
		*_adafb = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_adafb = 6
	case "\u0070\u006c\u0075\u0073":
		*_adafb = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_adafb = 8
	case "\u0073\u0074\u0061\u0072":
		*_adafb = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_adafb = 10
	case "\u0078":
		*_adafb = 11
	case "\u0061\u0075\u0074\u006f":
		*_adafb = 12
	}
	return nil
}

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_baabge *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _baabge.MultiLvlStrCache != nil {
		if _fcbb := _baabge.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _fcbb != nil {
			return _fcbb
		}
	}
	if _baabge.ExtLst != nil {
		if _aaebf := _baabge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aaebf != nil {
			return _aaebf
		}
	}
	return nil
}

func (_acgag ST_LayoutTarget) String() string {
	switch _acgag {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}

func (_ggcde ST_ErrValType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_edgae := _e.Attr{}
	_edgae.Name = name
	switch _ggcde {
	case ST_ErrValTypeUnset:
		_edgae.Value = ""
	case ST_ErrValTypeCust:
		_edgae.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_edgae.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_edgae.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_edgae.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_edgae.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _edgae, nil
}

func (_ebfe *CT_RotX) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ebfe.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_ebfe.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_StrRef() *CT_StrRef { _fbcef := &CT_StrRef{}; return _fbcef }

func (_dgc *CT_AxDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bcg:
	for {
		_dgd, _bbd := d.Token()
		if _bbd != nil {
			return _bbd
		}
		switch _fab := _dgd.(type) {
		case _e.StartElement:
			switch _fab.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_dgc.MultiLvlStrRef = NewCT_MultiLvlStrRef()
				if _gfb := d.DecodeElement(_dgc.MultiLvlStrRef, &_fab); _gfb != nil {
					return _gfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_dgc.NumRef = NewCT_NumRef()
				if _dcbd := d.DecodeElement(_dgc.NumRef, &_fab); _dcbd != nil {
					return _dcbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_dgc.NumLit = NewCT_NumData()
				if _dbf := d.DecodeElement(_dgc.NumLit, &_fab); _dbf != nil {
					return _dbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_dgc.StrRef = NewCT_StrRef()
				if _fgaa := d.DecodeElement(_dgc.StrRef, &_fab); _fgaa != nil {
					return _fgaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_dgc.StrLit = NewCT_StrData()
				if _bfef := d.DecodeElement(_dgc.StrLit, &_fab); _bfef != nil {
					return _bfef
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fab.Name)
				if _acc := d.Skip(); _acc != nil {
					return _acc
				}
			}
		case _e.EndElement:
			break _bcg
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsChoice and its children
func (_daba *CT_DispUnitsChoice) Validate() error {
	return _daba.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}

func NewCT_ErrValType() *CT_ErrValType { _egef := &CT_ErrValType{}; return _egef }

func NewCT_AreaSer() *CT_AreaSer {
	_cgfg := &CT_AreaSer{}
	_cgfg.Idx = NewCT_UnsignedInt()
	_cgfg.Order = NewCT_UnsignedInt()
	return _cgfg
}

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}

func (_fcbg *CT_StockChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_abaed:
	for {
		_egdf, _eccc := d.Token()
		if _eccc != nil {
			return _eccc
		}
		switch _dcadg := _egdf.(type) {
		case _e.StartElement:
			switch _dcadg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_acdc := NewCT_LineSer()
				if _eeacd := d.DecodeElement(_acdc, &_dcadg); _eeacd != nil {
					return _eeacd
				}
				_fcbg.Ser = append(_fcbg.Ser, _acdc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fcbg.DLbls = NewCT_DLbls()
				if _efdd := d.DecodeElement(_fcbg.DLbls, &_dcadg); _efdd != nil {
					return _efdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_fcbg.DropLines = NewCT_ChartLines()
				if _fbced := d.DecodeElement(_fcbg.DropLines, &_dcadg); _fbced != nil {
					return _fbced
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_fcbg.HiLowLines = NewCT_ChartLines()
				if _gafbe := d.DecodeElement(_fcbg.HiLowLines, &_dcadg); _gafbe != nil {
					return _gafbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_fcbg.UpDownBars = NewCT_UpDownBars()
				if _edcd := d.DecodeElement(_fcbg.UpDownBars, &_dcadg); _edcd != nil {
					return _edcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_acdba := NewCT_UnsignedInt()
				if _aeee := d.DecodeElement(_acdba, &_dcadg); _aeee != nil {
					return _aeee
				}
				_fcbg.AxId = append(_fcbg.AxId, _acdba)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcbg.ExtLst = NewCT_ExtensionList()
				if _beddg := d.DecodeElement(_fcbg.ExtLst, &_dcadg); _beddg != nil {
					return _beddg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _dcadg.Name)
				if _ffgbb := d.Skip(); _ffgbb != nil {
					return _ffgbb
				}
			}
		case _e.EndElement:
			break _abaed
		case _e.CharData:
		}
	}
	return nil
}

type CT_Skip struct{ ValAttr uint32 }

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_gbfbb *CT_Protection) ValidateWithPath(path string) error {
	if _gbfbb.ChartObject != nil {
		if _gaebc := _gbfbb.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _gaebc != nil {
			return _gaebc
		}
	}
	if _gbfbb.Data != nil {
		if _acebf := _gbfbb.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _acebf != nil {
			return _acebf
		}
	}
	if _gbfbb.Formatting != nil {
		if _cgccf := _gbfbb.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _cgccf != nil {
			return _cgccf
		}
	}
	if _gbfbb.Selection != nil {
		if _bffea := _gbfbb.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _bffea != nil {
			return _bffea
		}
	}
	if _gbfbb.UserInterface != nil {
		if _gccbc := _gbfbb.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _gccbc != nil {
			return _gccbc
		}
	}
	return nil
}

// Validate validates the CT_AxisUnit and its children
func (_add *CT_AxisUnit) Validate() error {
	return _add.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}

func (_bfedd *CT_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bfedd.ValAttr = ST_PictureFormat(1)
	for _, _cfebe := range start.Attr {
		if _cfebe.Name.Local == "\u0076\u0061\u006c" {
			_bfedd.ValAttr.UnmarshalXMLAttr(_cfebe)
			continue
		}
	}
	for {
		_cbgb, _dbgf := d.Token()
		if _dbgf != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _dbgf)
		}
		if _dada, _gbfdc := _cbgb.(_e.EndElement); _gbfdc && _dada.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ddgd *CT_DTable) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gcab:
	for {
		_cdad, _agac := d.Token()
		if _agac != nil {
			return _agac
		}
		switch _dggf := _cdad.(type) {
		case _e.StartElement:
			switch _dggf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_ddgd.ShowHorzBorder = NewCT_Boolean()
				if _cebf := d.DecodeElement(_ddgd.ShowHorzBorder, &_dggf); _cebf != nil {
					return _cebf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_ddgd.ShowVertBorder = NewCT_Boolean()
				if _fdcc := d.DecodeElement(_ddgd.ShowVertBorder, &_dggf); _fdcc != nil {
					return _fdcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_ddgd.ShowOutline = NewCT_Boolean()
				if _eebac := d.DecodeElement(_ddgd.ShowOutline, &_dggf); _eebac != nil {
					return _eebac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_ddgd.ShowKeys = NewCT_Boolean()
				if _dfeg := d.DecodeElement(_ddgd.ShowKeys, &_dggf); _dfeg != nil {
					return _dfeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddgd.SpPr = _cb.NewCT_ShapeProperties()
				if _deg := d.DecodeElement(_ddgd.SpPr, &_dggf); _deg != nil {
					return _deg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ddgd.TxPr = _cb.NewCT_TextBody()
				if _adcf := d.DecodeElement(_ddgd.TxPr, &_dggf); _adcf != nil {
					return _adcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddgd.ExtLst = NewCT_ExtensionList()
				if _ecba := d.DecodeElement(_ddgd.ExtLst, &_dggf); _ecba != nil {
					return _ecba
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _dggf.Name)
				if _gdag := d.Skip(); _gdag != nil {
					return _gdag
				}
			}
		case _e.EndElement:
			break _gcab
		case _e.CharData:
		}
	}
	return nil
}

func (_ecd *CT_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dadd, _gbf := _ecd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _gbf != nil {
		return _gbf
	}
	start.Attr = append(start.Attr, _dadd)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bdf *CT_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdf.ValAttr = ST_AxPos(1)
	for _, _geggc := range start.Attr {
		if _geggc.Name.Local == "\u0076\u0061\u006c" {
			_bdf.ValAttr.UnmarshalXMLAttr(_geggc)
			continue
		}
	}
	for {
		_fcaf, _aeg := d.Token()
		if _aeg != nil {
			return _bf.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _aeg)
		}
		if _bac, _ccg := _fcaf.(_e.EndElement); _ccg && _bac.Name == start.Name {
			break
		}
	}
	return nil
}

func NewGroup_DLbls() *Group_DLbls { _adgab := &Group_DLbls{}; return _adgab }

// Validate validates the CT_SizeRepresents and its children
func (_cfdf *CT_SizeRepresents) Validate() error {
	return _cfdf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}

func (_fgeg *CT_ScatterSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgeg.Idx = NewCT_UnsignedInt()
	_fgeg.Order = NewCT_UnsignedInt()
_fdaffc:
	for {
		_cdabb, _dgffa := d.Token()
		if _dgffa != nil {
			return _dgffa
		}
		switch _gebff := _cdabb.(type) {
		case _e.StartElement:
			switch _gebff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bddfg := d.DecodeElement(_fgeg.Idx, &_gebff); _bddfg != nil {
					return _bddfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _bcdcc := d.DecodeElement(_fgeg.Order, &_gebff); _bcdcc != nil {
					return _bcdcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fgeg.Tx = NewCT_SerTx()
				if _gfedg := d.DecodeElement(_fgeg.Tx, &_gebff); _gfedg != nil {
					return _gfedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fgeg.SpPr = _cb.NewCT_ShapeProperties()
				if _dcgec := d.DecodeElement(_fgeg.SpPr, &_gebff); _dcgec != nil {
					return _dcgec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_fgeg.Marker = NewCT_Marker()
				if _gbff := d.DecodeElement(_fgeg.Marker, &_gebff); _gbff != nil {
					return _gbff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_aeccf := NewCT_DPt()
				if _aecd := d.DecodeElement(_aeccf, &_gebff); _aecd != nil {
					return _aecd
				}
				_fgeg.DPt = append(_fgeg.DPt, _aeccf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fgeg.DLbls = NewCT_DLbls()
				if _edeg := d.DecodeElement(_fgeg.DLbls, &_gebff); _edeg != nil {
					return _edeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_eade := NewCT_Trendline()
				if _cdgd := d.DecodeElement(_eade, &_gebff); _cdgd != nil {
					return _cdgd
				}
				_fgeg.Trendline = append(_fgeg.Trendline, _eade)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_cddb := NewCT_ErrBars()
				if _dbgfa := d.DecodeElement(_cddb, &_gebff); _dbgfa != nil {
					return _dbgfa
				}
				_fgeg.ErrBars = append(_fgeg.ErrBars, _cddb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_fgeg.XVal = NewCT_AxDataSource()
				if _gaad := d.DecodeElement(_fgeg.XVal, &_gebff); _gaad != nil {
					return _gaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_fgeg.YVal = NewCT_NumDataSource()
				if _beag := d.DecodeElement(_fgeg.YVal, &_gebff); _beag != nil {
					return _beag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_fgeg.Smooth = NewCT_Boolean()
				if _dgecd := d.DecodeElement(_fgeg.Smooth, &_gebff); _dgecd != nil {
					return _dgecd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgeg.ExtLst = NewCT_ExtensionList()
				if _efda := d.DecodeElement(_fgeg.ExtLst, &_gebff); _efda != nil {
					return _efda
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _gebff.Name)
				if _eegc := d.Skip(); _eegc != nil {
					return _eegc
				}
			}
		case _e.EndElement:
			break _fdaffc
		case _e.CharData:
		}
	}
	return nil
}

type CT_Marker struct {
	Symbol *CT_MarkerStyle
	Size   *CT_MarkerSize
	SpPr   *_cb.CT_ShapeProperties
	ExtLst *CT_ExtensionList
}

func (_gafea *ST_ErrDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gafea = 0
	case "\u0078":
		*_gafea = 1
	case "\u0079":
		*_gafea = 2
	}
	return nil
}

func (_feceb *ST_DepthPercent) ValidateWithPath(path string) error {
	_gedefe := []string{}
	if _feceb.ST_DepthPercentWithSymbol != nil {
		_gedefe = append(_gedefe, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _feceb.ST_DepthPercentUShort != nil {
		_gedefe = append(_gedefe, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_gedefe) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gedefe)
	}
	return nil
}

func (_dgdac *CT_PageSetup) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _begfd := range start.Attr {
		if _begfd.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_ebbca, _dcdab := _b.ParseUint(_begfd.Value, 10, 32)
			if _dcdab != nil {
				return _dcdab
			}
			_cgbda := uint32(_ebbca)
			_dgdac.PaperSizeAttr = &_cgbda
			continue
		}
		if _begfd.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_cdaf, _ffcag := _begfd.Value, error(nil)
			if _ffcag != nil {
				return _ffcag
			}
			_dgdac.PaperHeightAttr = &_cdaf
			continue
		}
		if _begfd.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_ggbgg, _ffgdfg := _begfd.Value, error(nil)
			if _ffgdfg != nil {
				return _ffgdfg
			}
			_dgdac.PaperWidthAttr = &_ggbgg
			continue
		}
		if _begfd.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_baeg, _fbafdg := _b.ParseUint(_begfd.Value, 10, 32)
			if _fbafdg != nil {
				return _fbafdg
			}
			_gfabd := uint32(_baeg)
			_dgdac.FirstPageNumberAttr = &_gfabd
			continue
		}
		if _begfd.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_dgdac.OrientationAttr.UnmarshalXMLAttr(_begfd)
			continue
		}
		if _begfd.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_fcfg, _cabbff := _b.ParseBool(_begfd.Value)
			if _cabbff != nil {
				return _cabbff
			}
			_dgdac.BlackAndWhiteAttr = &_fcfg
			continue
		}
		if _begfd.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_dabbe, _fabgb := _b.ParseBool(_begfd.Value)
			if _fabgb != nil {
				return _fabgb
			}
			_dgdac.DraftAttr = &_dabbe
			continue
		}
		if _begfd.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_geabe, _cbcde := _b.ParseBool(_begfd.Value)
			if _cbcde != nil {
				return _cbcde
			}
			_dgdac.UseFirstPageNumberAttr = &_geabe
			continue
		}
		if _begfd.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_baadb, _dfbgb := _b.ParseInt(_begfd.Value, 10, 32)
			if _dfbgb != nil {
				return _dfbgb
			}
			_bggef := int32(_baadb)
			_dgdac.HorizontalDpiAttr = &_bggef
			continue
		}
		if _begfd.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_fdaa, _eccdf := _b.ParseInt(_begfd.Value, 10, 32)
			if _eccdf != nil {
				return _eccdf
			}
			_ggfdf := int32(_fdaa)
			_dgdac.VerticalDpiAttr = &_ggfdf
			continue
		}
		if _begfd.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_bfaga, _fcfbg := _b.ParseUint(_begfd.Value, 10, 32)
			if _fcfbg != nil {
				return _fcfbg
			}
			_feecg := uint32(_bfaga)
			_dgdac.CopiesAttr = &_feecg
			continue
		}
	}
	for {
		_aace, _ddef := d.Token()
		if _ddef != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _ddef)
		}
		if _bdfb, _aaaaf := _aace.(_e.EndElement); _aaaaf && _bdfb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_gfgee *EG_PieChartShared) ValidateWithPath(path string) error {
	if _gfgee.VaryColors != nil {
		if _cgdcc := _gfgee.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cgdcc != nil {
			return _cgdcc
		}
	}
	for _bcdge, _bagf := range _gfgee.Ser {
		if _cggc := _bagf.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bcdge)); _cggc != nil {
			return _cggc
		}
	}
	if _gfgee.DLbls != nil {
		if _ccfee := _gfgee.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ccfee != nil {
			return _ccfee
		}
	}
	return nil
}

type ST_OfPieType byte

func (_ceg *CT_BubbleScale) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfa := range start.Attr {
		if _dfa.Name.Local == "\u0076\u0061\u006c" {
			_cgcc, _gcee := ParseUnionST_BubbleScale(_dfa.Value)
			if _gcee != nil {
				return _gcee
			}
			_ceg.ValAttr = &_cgcc
			continue
		}
	}
	for {
		_ffg, _bfaeb := d.Token()
		if _bfaeb != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _bfaeb)
		}
		if _cge, _fgc := _ffg.(_e.EndElement); _fgc && _cge.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_PieSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_cb.CT_ShapeProperties
	Explosion *CT_UnsignedInt
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	ExtLst    *CT_ExtensionList
}

func (_daaaf *CT_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _daaaf.ValAttr != ST_SizeRepresentsUnset {
		_eegcf, _febbc := _daaaf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _febbc != nil {
			return _febbc
		}
		start.Attr = append(start.Attr, _eegcf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gddea *CT_StockChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_adade := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _cedd := range _gddea.Ser {
		e.EncodeElement(_cedd, _adade)
	}
	if _gddea.DLbls != nil {
		_fdaeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gddea.DLbls, _fdaeg)
	}
	if _gddea.DropLines != nil {
		_bage := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gddea.DropLines, _bage)
	}
	if _gddea.HiLowLines != nil {
		_adebf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gddea.HiLowLines, _adebf)
	}
	if _gddea.UpDownBars != nil {
		_bfgag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_gddea.UpDownBars, _bfgag)
	}
	_cbcaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _feea := range _gddea.AxId {
		e.EncodeElement(_feea, _cbcaa)
	}
	if _gddea.ExtLst != nil {
		_bcccbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gddea.ExtLst, _bcccbc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fdbag *CT_StrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fdbag.PtCount != nil {
		_gedcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_fdbag.PtCount, _gedcd)
	}
	if _fdbag.Pt != nil {
		_dfbad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _cdbbf := range _fdbag.Pt {
			e.EncodeElement(_cdbbf, _dfbad)
		}
	}
	if _fdbag.ExtLst != nil {
		_bdgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fdbag.ExtLst, _bdgd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_DLblChoice() *CT_DLblChoice { _bdbc := &CT_DLblChoice{}; return _bdbc }

// Validate validates the CT_DepthPercent and its children
func (_dbbgd *CT_DepthPercent) Validate() error {
	return _dbbgd.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}

func (_gded ST_RadarStyle) Validate() error { return _gded.ValidateWithPath("") }

type CT_SerTx struct{ Choice *CT_SerTxChoice }

// Validate validates the EG_AxShared and its children
func (_bbggf *EG_AxShared) Validate() error {
	return _bbggf.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}

func (_feffb ST_CrossBetween) String() string {
	switch _feffb {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_fgcfa *CT_Shape) ValidateWithPath(path string) error {
	if _eeec := _fgcfa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eeec != nil {
		return _eeec
	}
	return nil
}

func (_beffc ST_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _beffc.ST_LblOffsetPercent != nil {
		e.EncodeToken(_e.CharData(*_beffc.ST_LblOffsetPercent))
	}
	if _beffc.ST_LblOffsetUShort != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_beffc.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_ddcd *CT_ValAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_egdbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_ddcd.AxId, _egdbe)
	_bbfda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_ddcd.Scaling, _bbfda)
	if _ddcd.Delete != nil {
		_begcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ddcd.Delete, _begcc)
	}
	_dcfgd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_ddcd.AxPos, _dcfgd)
	if _ddcd.MajorGridlines != nil {
		_fbabg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ddcd.MajorGridlines, _fbabg)
	}
	if _ddcd.MinorGridlines != nil {
		_gdfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ddcd.MinorGridlines, _gdfb)
	}
	if _ddcd.Title != nil {
		_gbabfd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_ddcd.Title, _gbabfd)
	}
	if _ddcd.NumFmt != nil {
		_acbfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ddcd.NumFmt, _acbfa)
	}
	if _ddcd.MajorTickMark != nil {
		_baded := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ddcd.MajorTickMark, _baded)
	}
	if _ddcd.MinorTickMark != nil {
		_efaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ddcd.MinorTickMark, _efaa)
	}
	if _ddcd.TickLblPos != nil {
		_cdbfgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_ddcd.TickLblPos, _cdbfgf)
	}
	if _ddcd.SpPr != nil {
		_bebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ddcd.SpPr, _bebg)
	}
	if _ddcd.TxPr != nil {
		_cbfef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ddcd.TxPr, _cbfef)
	}
	_cgdad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_ddcd.CrossAx, _cgdad)
	if _ddcd.Choice != nil {
		_ddcd.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _ddcd.CrossBetween != nil {
		_aggee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_ddcd.CrossBetween, _aggee)
	}
	if _ddcd.MajorUnit != nil {
		_bgffc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ddcd.MajorUnit, _bgffc)
	}
	if _ddcd.MinorUnit != nil {
		_dbfe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ddcd.MinorUnit, _dbfe)
	}
	if _ddcd.DispUnits != nil {
		_ecefa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_ddcd.DispUnits, _ecefa)
	}
	if _ddcd.ExtLst != nil {
		_ecacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ddcd.ExtLst, _ecacf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_UpDownBars and its children
func (_facge *CT_UpDownBars) Validate() error {
	return _facge.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}

// Validate validates the CT_Marker and its children
func (_ccfb *CT_Marker) Validate() error {
	return _ccfb.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}

func (_cafgbd *ST_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgga, _cgada := d.Token()
	if _cgada != nil {
		return _cgada
	}
	if _ggege, _gdbga := _fgga.(_e.EndElement); _gdbga && _ggege.Name == start.Name {
		*_cafgbd = 1
		return nil
	}
	if _cfgf, _gdagb := _fgga.(_e.CharData); !_gdagb {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgga)
	} else {
		switch string(_cfgf) {
		case "":
			*_cafgbd = 0
		case "\u0062\u0061\u0072":
			*_cafgbd = 1
		case "\u0063\u006f\u006c":
			*_cafgbd = 2
		}
	}
	_fgga, _cgada = d.Token()
	if _cgada != nil {
		return _cgada
	}
	if _ebecf, _bcceb := _fgga.(_e.EndElement); _bcceb && _ebecf.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgga)
}

func (_ffabf *CT_RotX) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gccf := range start.Attr {
		if _gccf.Name.Local == "\u0076\u0061\u006c" {
			_acdf, _fdbcc := _b.ParseInt(_gccf.Value, 10, 8)
			if _fdbcc != nil {
				return _fdbcc
			}
			_cagea := int8(_acdf)
			_ffabf.ValAttr = &_cagea
			continue
		}
	}
	for {
		_ggdb, _edcba := d.Token()
		if _edcba != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _edcba)
		}
		if _ccddb, _badgca := _ggdb.(_e.EndElement); _badgca && _ccddb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_NumDataSource struct{ Choice *CT_NumDataSourceChoice }

func (_gcag ST_LayoutMode) String() string {
	switch _gcag {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

func (_fcgba *CT_StrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_daace:
	for {
		_bbbfc, _ddge := d.Token()
		if _ddge != nil {
			return _ddge
		}
		switch _fdgged := _bbbfc.(type) {
		case _e.StartElement:
			switch _fdgged.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _cgfea := d.DecodeElement(&_fcgba.F, &_fdgged); _cgfea != nil {
					return _cgfea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_fcgba.StrCache = NewCT_StrData()
				if _gdee := d.DecodeElement(_fcgba.StrCache, &_fdgged); _gdee != nil {
					return _gdee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcgba.ExtLst = NewCT_ExtensionList()
				if _aedcf := d.DecodeElement(_fcgba.ExtLst, &_fdgged); _aedcf != nil {
					return _aedcf
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _fdgged.Name)
				if _dadaf := d.Skip(); _dadaf != nil {
					return _dadaf
				}
			}
		case _e.EndElement:
			break _daace
		case _e.CharData:
		}
	}
	return nil
}

type CT_TextLanguageID struct{ ValAttr string }

func (_ebggf ST_Overlap) String() string {
	if _ebggf.ST_OverlapPercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_ebggf.ST_OverlapPercent)
	}
	if _ebggf.ST_OverlapByte != nil {
		return _bf.Sprintf("\u0025\u0076", *_ebggf.ST_OverlapByte)
	}
	return ""
}

// Validate validates the EG_SerShared and its children
func (_aced *EG_SerShared) Validate() error {
	return _aced.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_RadarChart struct {
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean
	Ser        []*CT_RadarSer
	DLbls      *CT_DLbls
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_gfdec ST_CrossBetween) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_geaa := _e.Attr{}
	_geaa.Name = name
	switch _gfdec {
	case ST_CrossBetweenUnset:
		_geaa.Value = ""
	case ST_CrossBetweenBetween:
		_geaa.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_geaa.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _geaa, nil
}

func (_efgc *ST_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcbgd, _ebgab := d.Token()
	if _ebgab != nil {
		return _ebgab
	}
	if _eaeecf, _aceba := _dcbgd.(_e.EndElement); _aceba && _eaeecf.Name == start.Name {
		*_efgc = 1
		return nil
	}
	if _befce, _aebcg := _dcbgd.(_e.CharData); !_aebcg {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcbgd)
	} else {
		switch string(_befce) {
		case "":
			*_efgc = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_efgc = 1
		case "\u0062":
			*_efgc = 2
		case "\u0063\u0074\u0072":
			*_efgc = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_efgc = 4
		case "\u0069\u006e\u0045n\u0064":
			*_efgc = 5
		case "\u006c":
			*_efgc = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_efgc = 7
		case "\u0072":
			*_efgc = 8
		case "\u0074":
			*_efgc = 9
		}
	}
	_dcbgd, _ebgab = d.Token()
	if _ebgab != nil {
		return _ebgab
	}
	if _ecec, _cdafa := _dcbgd.(_e.EndElement); _cdafa && _ecec.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcbgd)
}

func NewCT_RadarChart() *CT_RadarChart {
	_fbgea := &CT_RadarChart{}
	_fbgea.RadarStyle = NewCT_RadarStyle()
	return _fbgea
}

func NewCT_Skip() *CT_Skip { _cecg := &CT_Skip{}; _cecg.ValAttr = 1; return _cecg }

func (_bggbc ST_PageSetupOrientation) Validate() error { return _bggbc.ValidateWithPath("") }

func (_bbc *CT_ExtensionList) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ggga:
	for {
		_becef, _dbgg := d.Token()
		if _dbgg != nil {
			return _dbgg
		}
		switch _daegg := _becef.(type) {
		case _e.StartElement:
			switch _daegg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_acdd := NewCT_Extension()
				if _cfdg := d.DecodeElement(_acdd, &_daegg); _cfdg != nil {
					return _cfdg
				}
				_bbc.Ext = append(_bbc.Ext, _acdd)
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _daegg.Name)
				if _dadcc := d.Skip(); _dadcc != nil {
					return _dadcc
				}
			}
		case _e.EndElement:
			break _ggga
		case _e.CharData:
		}
	}
	return nil
}

func (_bcdce *ST_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbcfc, _bdab := d.Token()
	if _bdab != nil {
		return _bdab
	}
	if _gdbfc, _gdcgf := _fbcfc.(_e.EndElement); _gdcgf && _gdbfc.Name == start.Name {
		*_bcdce = 1
		return nil
	}
	if _fagcf, _bgcfb := _fbcfc.(_e.CharData); !_bgcfb {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbcfc)
	} else {
		switch string(_fagcf) {
		case "":
			*_bcdce = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_bcdce = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_bcdce = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_bcdce = 3
		}
	}
	_fbcfc, _bdab = d.Token()
	if _bdab != nil {
		return _bdab
	}
	if _aeeff, _abaaa := _fbcfc.(_e.EndElement); _abaaa && _aeeff.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbcfc)
}

func NewCT_Lvl() *CT_Lvl { _defc := &CT_Lvl{}; return _defc }

type ST_LayoutTarget byte

func (_agebed *Group_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _agebed.NumFmt != nil {
		_dafeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_agebed.NumFmt, _dafeb)
	}
	if _agebed.SpPr != nil {
		_edfgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agebed.SpPr, _edfgg)
	}
	if _agebed.TxPr != nil {
		_bbaac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_agebed.TxPr, _bbaac)
	}
	if _agebed.DLblPos != nil {
		_cbebd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_agebed.DLblPos, _cbebd)
	}
	if _agebed.ShowLegendKey != nil {
		_ddggd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_agebed.ShowLegendKey, _ddggd)
	}
	if _agebed.ShowVal != nil {
		_bagb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_agebed.ShowVal, _bagb)
	}
	if _agebed.ShowCatName != nil {
		_dcfdgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_agebed.ShowCatName, _dcfdgb)
	}
	if _agebed.ShowSerName != nil {
		_accc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_agebed.ShowSerName, _accc)
	}
	if _agebed.ShowPercent != nil {
		_cddad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_agebed.ShowPercent, _cddad)
	}
	if _agebed.ShowBubbleSize != nil {
		_adba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_agebed.ShowBubbleSize, _adba)
	}
	if _agebed.Separator != nil {
		_acdbfc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_ba.AddPreserveSpaceAttr(&_acdbfc, *_agebed.Separator)
		e.EncodeElement(_agebed.Separator, _acdbfc)
	}
	if _agebed.ShowLeaderLines != nil {
		_acffd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_agebed.ShowLeaderLines, _acffd)
	}
	if _agebed.LeaderLines != nil {
		_fbbgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_agebed.LeaderLines, _fbbgf)
	}
	return nil
}

type ST_BarDir byte

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_bddbd *CT_Title) ValidateWithPath(path string) error {
	if _bddbd.Tx != nil {
		if _bgeef := _bddbd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bgeef != nil {
			return _bgeef
		}
	}
	if _bddbd.Layout != nil {
		if _baabgd := _bddbd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _baabgd != nil {
			return _baabgd
		}
	}
	if _bddbd.Overlay != nil {
		if _dfdaf := _bddbd.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _dfdaf != nil {
			return _dfdaf
		}
	}
	if _bddbd.SpPr != nil {
		if _bgeff := _bddbd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgeff != nil {
			return _bgeff
		}
	}
	if _bddbd.TxPr != nil {
		if _eebbe := _bddbd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eebbe != nil {
			return _eebbe
		}
	}
	if _bddbd.ExtLst != nil {
		if _acfea := _bddbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acfea != nil {
			return _acfea
		}
	}
	return nil
}

type ST_PageSetupOrientation byte

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

func (_bbeed *CT_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbeed.ValAttr != ST_TickMarkUnset {
		_gdfa, _cccbfa := _bbeed.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cccbfa != nil {
			return _cccbfa
		}
		start.Attr = append(start.Attr, _gdfa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cadc *CT_PageMargins) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.LAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.RAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0074"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.TAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.BAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.HeaderAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _bf.Sprintf("\u0025\u0076", _cadc.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dbfdf *CT_PivotFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dbfdf.Idx = NewCT_UnsignedInt()
_aaefd:
	for {
		_fceb, _fdbed := d.Token()
		if _fdbed != nil {
			return _fdbed
		}
		switch _cfded := _fceb.(type) {
		case _e.StartElement:
			switch _cfded.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ceac := d.DecodeElement(_dbfdf.Idx, &_cfded); _ceac != nil {
					return _ceac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dbfdf.SpPr = _cb.NewCT_ShapeProperties()
				if _gegga := d.DecodeElement(_dbfdf.SpPr, &_cfded); _gegga != nil {
					return _gegga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dbfdf.TxPr = _cb.NewCT_TextBody()
				if _gadfgc := d.DecodeElement(_dbfdf.TxPr, &_cfded); _gadfgc != nil {
					return _gadfgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_dbfdf.Marker = NewCT_Marker()
				if _dgff := d.DecodeElement(_dbfdf.Marker, &_cfded); _dgff != nil {
					return _dgff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_dbfdf.DLbl = NewCT_DLbl()
				if _cgadd := d.DecodeElement(_dbfdf.DLbl, &_cfded); _cgadd != nil {
					return _cgadd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbfdf.ExtLst = NewCT_ExtensionList()
				if _afdee := d.DecodeElement(_dbfdf.ExtLst, &_cfded); _afdee != nil {
					return _afdee
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _cfded.Name)
				if _aaafb := d.Skip(); _aaafb != nil {
					return _aaafb
				}
			}
		case _e.EndElement:
			break _aaefd
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_PivotSource() *CT_PivotSource {
	_bbdad := &CT_PivotSource{}
	_bbdad.FmtId = NewCT_UnsignedInt()
	return _bbdad
}

func NewEG_SerShared() *EG_SerShared {
	_gagb := &EG_SerShared{}
	_gagb.Idx = NewCT_UnsignedInt()
	_gagb.Order = NewCT_UnsignedInt()
	return _gagb
}

func (_fffcc *CT_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fffcc.ValAttr != ST_SplitTypeUnset {
		_daaf, _cbfbcb := _fffcc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cbfbcb != nil {
			return _cbfbcb
		}
		start.Attr = append(start.Attr, _daaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PictureOptions struct {
	ApplyToFront     *CT_Boolean
	ApplyToSides     *CT_Boolean
	ApplyToEnd       *CT_Boolean
	PictureFormat    *CT_PictureFormat
	PictureStackUnit *CT_PictureStackUnit
}

func (_gbfg *CT_TrendlineLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_begaca:
	for {
		_cabcd, _ccbb := d.Token()
		if _ccbb != nil {
			return _ccbb
		}
		switch _ddbca := _cabcd.(type) {
		case _e.StartElement:
			switch _ddbca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_gbfg.Layout = NewCT_Layout()
				if _degdb := d.DecodeElement(_gbfg.Layout, &_ddbca); _degdb != nil {
					return _degdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gbfg.Tx = NewCT_Tx()
				if _eaff := d.DecodeElement(_gbfg.Tx, &_ddbca); _eaff != nil {
					return _eaff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gbfg.NumFmt = NewCT_NumFmt()
				if _bdfdf := d.DecodeElement(_gbfg.NumFmt, &_ddbca); _bdfdf != nil {
					return _bdfdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gbfg.SpPr = _cb.NewCT_ShapeProperties()
				if _ceddg := d.DecodeElement(_gbfg.SpPr, &_ddbca); _ceddg != nil {
					return _ceddg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gbfg.TxPr = _cb.NewCT_TextBody()
				if _fbfbe := d.DecodeElement(_gbfg.TxPr, &_ddbca); _fbfbe != nil {
					return _fbfbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbfg.ExtLst = NewCT_ExtensionList()
				if _bbaeg := d.DecodeElement(_gbfg.ExtLst, &_ddbca); _bbaeg != nil {
					return _bbaeg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _ddbca.Name)
				if _cfaae := d.Skip(); _cfaae != nil {
					return _cfaae
				}
			}
		case _e.EndElement:
			break _begaca
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_gebef *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _gebef.Wireframe != nil {
		if _afeda := _gebef.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _afeda != nil {
			return _afeda
		}
	}
	for _eecgc, _gfbfd := range _gebef.Ser {
		if _bbcg := _gfbfd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eecgc)); _bbcg != nil {
			return _bbcg
		}
	}
	if _gebef.BandFmts != nil {
		if _dgadbg := _gebef.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _dgadbg != nil {
			return _dgadbg
		}
	}
	for _dbefa, _dcace := range _gebef.AxId {
		if _cadgc := _dcace.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dbefa)); _cadgc != nil {
			return _cadgc
		}
	}
	if _gebef.ExtLst != nil {
		if _gaebb := _gebef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaebb != nil {
			return _gaebb
		}
	}
	return nil
}

// Validate validates the CT_Perspective and its children
func (_aacgg *CT_Perspective) Validate() error {
	return _aacgg.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}

func (_ddbf *CT_Style) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _ddbf.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LegendEntryChoice() *CT_LegendEntryChoice { _cbbcf := &CT_LegendEntryChoice{}; return _cbbcf }

func (_fgb *CT_BarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgb.Idx = NewCT_UnsignedInt()
	_fgb.Order = NewCT_UnsignedInt()
_aegb:
	for {
		_ccbg, _afdbc := d.Token()
		if _afdbc != nil {
			return _afdbc
		}
		switch _acf := _ccbg.(type) {
		case _e.StartElement:
			switch _acf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _aedg := d.DecodeElement(_fgb.Idx, &_acf); _aedg != nil {
					return _aedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ffd := d.DecodeElement(_fgb.Order, &_acf); _ffd != nil {
					return _ffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fgb.Tx = NewCT_SerTx()
				if _bgce := d.DecodeElement(_fgb.Tx, &_acf); _bgce != nil {
					return _bgce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fgb.SpPr = _cb.NewCT_ShapeProperties()
				if _abcd := d.DecodeElement(_fgb.SpPr, &_acf); _abcd != nil {
					return _abcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_fgb.InvertIfNegative = NewCT_Boolean()
				if _bdag := d.DecodeElement(_fgb.InvertIfNegative, &_acf); _bdag != nil {
					return _bdag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_fgb.PictureOptions = NewCT_PictureOptions()
				if _ccbf := d.DecodeElement(_fgb.PictureOptions, &_acf); _ccbf != nil {
					return _ccbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_dbb := NewCT_DPt()
				if _fbd := d.DecodeElement(_dbb, &_acf); _fbd != nil {
					return _fbd
				}
				_fgb.DPt = append(_fgb.DPt, _dbb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fgb.DLbls = NewCT_DLbls()
				if _dcad := d.DecodeElement(_fgb.DLbls, &_acf); _dcad != nil {
					return _dcad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_ebca := NewCT_Trendline()
				if _agae := d.DecodeElement(_ebca, &_acf); _agae != nil {
					return _agae
				}
				_fgb.Trendline = append(_fgb.Trendline, _ebca)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_fgb.ErrBars = NewCT_ErrBars()
				if _defd := d.DecodeElement(_fgb.ErrBars, &_acf); _defd != nil {
					return _defd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_fgb.Cat = NewCT_AxDataSource()
				if _bce := d.DecodeElement(_fgb.Cat, &_acf); _bce != nil {
					return _bce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_fgb.Val = NewCT_NumDataSource()
				if _gce := d.DecodeElement(_fgb.Val, &_acf); _gce != nil {
					return _gce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_fgb.Shape = NewCT_Shape()
				if _eced := d.DecodeElement(_fgb.Shape, &_acf); _eced != nil {
					return _eced
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgb.ExtLst = NewCT_ExtensionList()
				if _eada := d.DecodeElement(_fgb.ExtLst, &_acf); _eada != nil {
					return _eada
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _acf.Name)
				if _efadb := d.Skip(); _efadb != nil {
					return _efadb
				}
			}
		case _e.EndElement:
			break _aegb
		case _e.CharData:
		}
	}
	return nil
}

func (_gdadb *CT_SerTxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gdadb.StrRef != nil {
		_fbdbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_gdadb.StrRef, _fbdbg)
	}
	if _gdadb.V != nil {
		_gebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
		_ba.AddPreserveSpaceAttr(&_gebg, *_gdadb.V)
		e.EncodeElement(_gdadb.V, _gebg)
	}
	return nil
}

func (_gdcge *CT_RelId) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _bf.Sprintf("\u0025\u0076", _gdcge.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_bebd *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _bebd.ValAttr != nil {
		if *_bebd.ValAttr < 0 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bebd.ValAttr)
		}
		if *_bebd.ValAttr > 360 {
			return _bf.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_bebd.ValAttr)
		}
	}
	return nil
}

type EG_AreaChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

type CT_AxDataSource struct{ Choice *CT_AxDataSourceChoice }

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_fded *CT_CatAx) ValidateWithPath(path string) error {
	if _aegf := _fded.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _aegf != nil {
		return _aegf
	}
	if _gbab := _fded.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _gbab != nil {
		return _gbab
	}
	if _fded.Delete != nil {
		if _fbga := _fded.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fbga != nil {
			return _fbga
		}
	}
	if _ggaec := _fded.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ggaec != nil {
		return _ggaec
	}
	if _fded.MajorGridlines != nil {
		if _gaf := _fded.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _gaf != nil {
			return _gaf
		}
	}
	if _fded.MinorGridlines != nil {
		if _cgfbg := _fded.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cgfbg != nil {
			return _cgfbg
		}
	}
	if _fded.Title != nil {
		if _aaaeb := _fded.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _aaaeb != nil {
			return _aaaeb
		}
	}
	if _fded.NumFmt != nil {
		if _cfce := _fded.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cfce != nil {
			return _cfce
		}
	}
	if _fded.MajorTickMark != nil {
		if _afccc := _fded.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _afccc != nil {
			return _afccc
		}
	}
	if _fded.MinorTickMark != nil {
		if _badd := _fded.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _badd != nil {
			return _badd
		}
	}
	if _fded.TickLblPos != nil {
		if _agce := _fded.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _agce != nil {
			return _agce
		}
	}
	if _fded.SpPr != nil {
		if _bbacb := _fded.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bbacb != nil {
			return _bbacb
		}
	}
	if _fded.TxPr != nil {
		if _edd := _fded.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _edd != nil {
			return _edd
		}
	}
	if _cfgb := _fded.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _cfgb != nil {
		return _cfgb
	}
	if _fded.Choice != nil {
		if _bfde := _fded.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _bfde != nil {
			return _bfde
		}
	}
	if _fded.Auto != nil {
		if _gdc := _fded.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _gdc != nil {
			return _gdc
		}
	}
	if _fded.LblAlgn != nil {
		if _abfa := _fded.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _abfa != nil {
			return _abfa
		}
	}
	if _fded.LblOffset != nil {
		if _aage := _fded.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _aage != nil {
			return _aage
		}
	}
	if _fded.TickLblSkip != nil {
		if _egdbb := _fded.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _egdbb != nil {
			return _egdbb
		}
	}
	if _fded.TickMarkSkip != nil {
		if _cecd := _fded.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _cecd != nil {
			return _cecd
		}
	}
	if _fded.NoMultiLvlLbl != nil {
		if _dccge := _fded.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _dccge != nil {
			return _dccge
		}
	}
	if _fded.ExtLst != nil {
		if _acd := _fded.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acd != nil {
			return _acd
		}
	}
	return nil
}

func (_bedcd *CT_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bedcd.ValAttr != ST_BarDirUnset {
		_eadc, _baff := _bedcd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _baff != nil {
			return _baff
		}
		start.Attr = append(start.Attr, _eadc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dfbge ST_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dfbge.String(), start)
}

// Validate validates the CT_PageSetup and its children
func (_eeaf *CT_PageSetup) Validate() error {
	return _eeaf.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_fgdbf *CT_BubbleSer) ValidateWithPath(path string) error {
	if _bge := _fgdbf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bge != nil {
		return _bge
	}
	if _agfd := _fgdbf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _agfd != nil {
		return _agfd
	}
	if _fgdbf.Tx != nil {
		if _gbde := _fgdbf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gbde != nil {
			return _gbde
		}
	}
	if _fgdbf.SpPr != nil {
		if _agfc := _fgdbf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _agfc != nil {
			return _agfc
		}
	}
	if _fgdbf.InvertIfNegative != nil {
		if _afg := _fgdbf.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _afg != nil {
			return _afg
		}
	}
	for _cbga, _abfdg := range _fgdbf.DPt {
		if _bbed := _abfdg.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cbga)); _bbed != nil {
			return _bbed
		}
	}
	if _fgdbf.DLbls != nil {
		if _egg := _fgdbf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _egg != nil {
			return _egg
		}
	}
	for _affc, _fbdf := range _fgdbf.Trendline {
		if _bbac := _fbdf.ValidateWithPath(_bf.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _affc)); _bbac != nil {
			return _bbac
		}
	}
	for _cdgg, _cacd := range _fgdbf.ErrBars {
		if _gbae := _cacd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _cdgg)); _gbae != nil {
			return _gbae
		}
	}
	if _fgdbf.XVal != nil {
		if _ggg := _fgdbf.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _ggg != nil {
			return _ggg
		}
	}
	if _fgdbf.YVal != nil {
		if _gcbf := _fgdbf.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _gcbf != nil {
			return _gcbf
		}
	}
	if _fgdbf.BubbleSize != nil {
		if _fbca := _fgdbf.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fbca != nil {
			return _fbca
		}
	}
	if _fgdbf.Bubble3D != nil {
		if _cfdc := _fgdbf.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _cfdc != nil {
			return _cfdc
		}
	}
	if _fgdbf.ExtLst != nil {
		if _bfeca := _fgdbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bfeca != nil {
			return _bfeca
		}
	}
	return nil
}

func (_abcac *EG_AxSharedChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _abcac.Crosses != nil {
		_bebf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_abcac.Crosses, _bebf)
	}
	if _abcac.CrossesAt != nil {
		_gafg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_abcac.CrossesAt, _gafg)
	}
	return nil
}

func (_dccd *CT_ErrBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dccd.ErrBarType = NewCT_ErrBarType()
	_dccd.ErrValType = NewCT_ErrValType()
_dbfb:
	for {
		_fdgfe, _debea := d.Token()
		if _debea != nil {
			return _debea
		}
		switch _aefd := _fdgfe.(type) {
		case _e.StartElement:
			switch _aefd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_dccd.ErrDir = NewCT_ErrDir()
				if _cebe := d.DecodeElement(_dccd.ErrDir, &_aefd); _cebe != nil {
					return _cebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _fbdg := d.DecodeElement(_dccd.ErrBarType, &_aefd); _fbdg != nil {
					return _fbdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _beabe := d.DecodeElement(_dccd.ErrValType, &_aefd); _beabe != nil {
					return _beabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_dccd.NoEndCap = NewCT_Boolean()
				if _ffcga := d.DecodeElement(_dccd.NoEndCap, &_aefd); _ffcga != nil {
					return _ffcga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_dccd.Plus = NewCT_NumDataSource()
				if _baddg := d.DecodeElement(_dccd.Plus, &_aefd); _baddg != nil {
					return _baddg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_dccd.Minus = NewCT_NumDataSource()
				if _gddd := d.DecodeElement(_dccd.Minus, &_aefd); _gddd != nil {
					return _gddd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_dccd.Val = NewCT_Double()
				if _bafe := d.DecodeElement(_dccd.Val, &_aefd); _bafe != nil {
					return _bafe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dccd.SpPr = _cb.NewCT_ShapeProperties()
				if _cdecc := d.DecodeElement(_dccd.SpPr, &_aefd); _cdecc != nil {
					return _cdecc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dccd.ExtLst = NewCT_ExtensionList()
				if _cdga := d.DecodeElement(_dccd.ExtLst, &_aefd); _cdga != nil {
					return _cdga
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _aefd.Name)
				if _efagg := d.Skip(); _efagg != nil {
					return _efagg
				}
			}
		case _e.EndElement:
			break _dbfb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the Group_DLbl and its children
func (_fcagc *Group_DLbl) Validate() error {
	return _fcagc.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}

func NewCT_PieSer() *CT_PieSer {
	_bbddd := &CT_PieSer{}
	_bbddd.Idx = NewCT_UnsignedInt()
	_bbddd.Order = NewCT_UnsignedInt()
	return _bbddd
}

func (_fcbbg *CT_StrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_edbgdb:
	for {
		_bfbbg, _edabf := d.Token()
		if _edabf != nil {
			return _edabf
		}
		switch _fbfbc := _bfbbg.(type) {
		case _e.StartElement:
			switch _fbfbc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_fcbbg.PtCount = NewCT_UnsignedInt()
				if _fgcea := d.DecodeElement(_fcbbg.PtCount, &_fbfbc); _fgcea != nil {
					return _fgcea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_gceag := NewCT_StrVal()
				if _cebfd := d.DecodeElement(_gceag, &_fbfbc); _cebfd != nil {
					return _cebfd
				}
				_fcbbg.Pt = append(_fcbbg.Pt, _gceag)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcbbg.ExtLst = NewCT_ExtensionList()
				if _becge := d.DecodeElement(_fcbbg.ExtLst, &_fbfbc); _becge != nil {
					return _becge
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fbfbc.Name)
				if _ddbg := d.Skip(); _ddbg != nil {
					return _ddbg
				}
			}
		case _e.EndElement:
			break _edbgdb
		case _e.CharData:
		}
	}
	return nil
}

func (_dfff *ST_BarDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dfff = 0
	case "\u0062\u0061\u0072":
		*_dfff = 1
	case "\u0063\u006f\u006c":
		*_dfff = 2
	}
	return nil
}

func (_cdbfg *CT_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _acfgd := range start.Attr {
		if _acfgd.Name.Local == "\u0076\u0061\u006c" {
			_cdbfg.ValAttr.UnmarshalXMLAttr(_acfgd)
			continue
		}
	}
	for {
		_bcag, _beffe := d.Token()
		if _beffe != nil {
			return _bf.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _beffe)
		}
		if _ggaae, _aggg := _bcag.(_e.EndElement); _aggg && _ggaae.Name == start.Name {
			break
		}
	}
	return nil
}

type UserShapes struct{ _d.CT_Drawing }

func (_ceadb ST_TickMark) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cfcga := _e.Attr{}
	_cfcga.Name = name
	switch _ceadb {
	case ST_TickMarkUnset:
		_cfcga.Value = ""
	case ST_TickMarkCross:
		_cfcga.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_cfcga.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_cfcga.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_cfcga.Value = "\u006f\u0075\u0074"
	}
	return _cfcga, nil
}

// Validate validates the CT_Title and its children
func (_befbcb *CT_Title) Validate() error {
	return _befbcb.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_feeb *CT_GapAmount) ValidateWithPath(path string) error {
	if _feeb.ValAttr != nil {
		if _fdeg := _feeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fdeg != nil {
			return _fdeg
		}
	}
	return nil
}

func (_bbfef ST_ErrBarType) Validate() error { return _bbfef.ValidateWithPath("") }

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_deff *CT_ExternalData) ValidateWithPath(path string) error {
	if _deff.AutoUpdate != nil {
		if _fgeac := _deff.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _fgeac != nil {
			return _fgeac
		}
	}
	return nil
}

func (_cgfgg *ST_TrendlineType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cgfgg = 0
	case "\u0065\u0078\u0070":
		*_cgfgg = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_cgfgg = 2
	case "\u006c\u006f\u0067":
		*_cgfgg = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_cgfgg = 4
	case "\u0070\u006f\u006c\u0079":
		*_cgfgg = 5
	case "\u0070\u006f\u0077e\u0072":
		*_cgfgg = 6
	}
	return nil
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

type CT_DPt struct {
	Idx              *CT_UnsignedInt
	InvertIfNegative *CT_Boolean
	Marker           *CT_Marker
	Bubble3D         *CT_Boolean
	Explosion        *CT_UnsignedInt
	SpPr             *_cb.CT_ShapeProperties
	PictureOptions   *CT_PictureOptions
	ExtLst           *CT_ExtensionList
}

func NewCT_DateAx() *CT_DateAx {
	_bdace := &CT_DateAx{}
	_bdace.AxId = NewCT_UnsignedInt()
	_bdace.Scaling = NewCT_Scaling()
	_bdace.AxPos = NewCT_AxPos()
	_bdace.CrossAx = NewCT_UnsignedInt()
	return _bdace
}

func (_fggd *CT_BarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fggd.Idx, _bgb)
	_aga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_fggd.Order, _aga)
	if _fggd.Tx != nil {
		_eef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fggd.Tx, _eef)
	}
	if _fggd.SpPr != nil {
		_bdfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fggd.SpPr, _bdfc)
	}
	if _fggd.InvertIfNegative != nil {
		_fec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_fggd.InvertIfNegative, _fec)
	}
	if _fggd.PictureOptions != nil {
		_bbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_fggd.PictureOptions, _bbe)
	}
	if _fggd.DPt != nil {
		_eaeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dagc := range _fggd.DPt {
			e.EncodeElement(_dagc, _eaeg)
		}
	}
	if _fggd.DLbls != nil {
		_eafa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fggd.DLbls, _eafa)
	}
	if _fggd.Trendline != nil {
		_bfacg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bcga := range _fggd.Trendline {
			e.EncodeElement(_bcga, _bfacg)
		}
	}
	if _fggd.ErrBars != nil {
		_agg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_fggd.ErrBars, _agg)
	}
	if _fggd.Cat != nil {
		_adca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_fggd.Cat, _adca)
	}
	if _fggd.Val != nil {
		_bdbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fggd.Val, _bdbb)
	}
	if _fggd.Shape != nil {
		_dcae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_fggd.Shape, _dcae)
	}
	if _fggd.ExtLst != nil {
		_ggf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fggd.ExtLst, _ggf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bfgcc *CT_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gecc := range start.Attr {
		if _gecc.Name.Local == "\u0076\u0061\u006c" {
			_bfgcc.ValAttr.UnmarshalXMLAttr(_gecc)
			continue
		}
	}
	for {
		_dfbcg, _dgaba := d.Token()
		if _dgaba != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _dgaba)
		}
		if _dggfd, _edcb := _dfbcg.(_e.EndElement); _edcb && _dggfd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_eede *CT_ChartLines) ValidateWithPath(path string) error {
	if _eede.SpPr != nil {
		if _gag := _eede.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gag != nil {
			return _gag
		}
	}
	return nil
}

func (_caafg *CT_ScatterChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_caed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_caafg.ScatterStyle, _caed)
	if _caafg.VaryColors != nil {
		_ecgcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_caafg.VaryColors, _ecgcb)
	}
	if _caafg.Ser != nil {
		_cggfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _acee := range _caafg.Ser {
			e.EncodeElement(_acee, _cggfe)
		}
	}
	if _caafg.DLbls != nil {
		_bfdcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_caafg.DLbls, _bfdcb)
	}
	_fedd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bacgf := range _caafg.AxId {
		e.EncodeElement(_bacgf, _fedd)
	}
	if _caafg.ExtLst != nil {
		_dacc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_caafg.ExtLst, _dacc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dgfc *CT_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dgfc.ValAttr != ST_ErrValTypeUnset {
		_fgaf, _dadg := _dgfc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _dadg != nil {
			return _dadg
		}
		start.Attr = append(start.Attr, _fgaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Orientation() *CT_Orientation { _ddacg := &CT_Orientation{}; return _ddacg }

func (_dbca *EG_SurfaceChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dbca.Wireframe != nil {
		_faafd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_dbca.Wireframe, _faafd)
	}
	if _dbca.Ser != nil {
		_dccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _defce := range _dbca.Ser {
			e.EncodeElement(_defce, _dccf)
		}
	}
	if _dbca.BandFmts != nil {
		_fddd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_dbca.BandFmts, _fddd)
	}
	return nil
}

func NewCT_BarChart() *CT_BarChart { _gfg := &CT_BarChart{}; _gfg.BarDir = NewCT_BarDir(); return _gfg }

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_gcaae *CT_ValAx) ValidateWithPath(path string) error {
	if _fbbcf := _gcaae.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _fbbcf != nil {
		return _fbbcf
	}
	if _afbdfg := _gcaae.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _afbdfg != nil {
		return _afbdfg
	}
	if _gcaae.Delete != nil {
		if _gfbge := _gcaae.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _gfbge != nil {
			return _gfbge
		}
	}
	if _ebacf := _gcaae.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ebacf != nil {
		return _ebacf
	}
	if _gcaae.MajorGridlines != nil {
		if _feae := _gcaae.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _feae != nil {
			return _feae
		}
	}
	if _gcaae.MinorGridlines != nil {
		if _cgdef := _gcaae.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cgdef != nil {
			return _cgdef
		}
	}
	if _gcaae.Title != nil {
		if _ecgeb := _gcaae.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ecgeb != nil {
			return _ecgeb
		}
	}
	if _gcaae.NumFmt != nil {
		if _dggfdg := _gcaae.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _dggfdg != nil {
			return _dggfdg
		}
	}
	if _gcaae.MajorTickMark != nil {
		if _afaeb := _gcaae.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _afaeb != nil {
			return _afaeb
		}
	}
	if _gcaae.MinorTickMark != nil {
		if _daeda := _gcaae.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _daeda != nil {
			return _daeda
		}
	}
	if _gcaae.TickLblPos != nil {
		if _aedcd := _gcaae.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _aedcd != nil {
			return _aedcd
		}
	}
	if _gcaae.SpPr != nil {
		if _bdba := _gcaae.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bdba != nil {
			return _bdba
		}
	}
	if _gcaae.TxPr != nil {
		if _geacd := _gcaae.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _geacd != nil {
			return _geacd
		}
	}
	if _gdbde := _gcaae.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _gdbde != nil {
		return _gdbde
	}
	if _gcaae.Choice != nil {
		if _adgag := _gcaae.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _adgag != nil {
			return _adgag
		}
	}
	if _gcaae.CrossBetween != nil {
		if _egfad := _gcaae.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _egfad != nil {
			return _egfad
		}
	}
	if _gcaae.MajorUnit != nil {
		if _ccgcc := _gcaae.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _ccgcc != nil {
			return _ccgcc
		}
	}
	if _gcaae.MinorUnit != nil {
		if _ffdcd := _gcaae.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _ffdcd != nil {
			return _ffdcd
		}
	}
	if _gcaae.DispUnits != nil {
		if _geca := _gcaae.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _geca != nil {
			return _geca
		}
	}
	if _gcaae.ExtLst != nil {
		if _aedfa := _gcaae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aedfa != nil {
			return _aedfa
		}
	}
	return nil
}

func (_fgcd *CT_ExternalData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _beddb := range start.Attr {
		if _beddb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _beddb.Name.Local == "\u0069\u0064" || _beddb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _beddb.Name.Local == "\u0069\u0064" {
			_gfca, _agfcg := _beddb.Value, error(nil)
			if _agfcg != nil {
				return _agfcg
			}
			_fgcd.IdAttr = _gfca
			continue
		}
	}
_bbge:
	for {
		_ffgc, _fbafe := d.Token()
		if _fbafe != nil {
			return _fbafe
		}
		switch _befe := _ffgc.(type) {
		case _e.StartElement:
			switch _befe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_fgcd.AutoUpdate = NewCT_Boolean()
				if _bada := d.DecodeElement(_fgcd.AutoUpdate, &_befe); _bada != nil {
					return _bada
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _befe.Name)
				if _cefb := d.Skip(); _cefb != nil {
					return _cefb
				}
			}
		case _e.EndElement:
			break _bbge
		case _e.CharData:
		}
	}
	return nil
}

type CT_Double struct{ ValAttr float64 }

func (_ecfag ST_TickMark) String() string {
	switch _ecfag {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_abce *CT_OfPieChart) ValidateWithPath(path string) error {
	if _ggbf := _abce.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _ggbf != nil {
		return _ggbf
	}
	if _abce.VaryColors != nil {
		if _fbeae := _abce.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fbeae != nil {
			return _fbeae
		}
	}
	for _ceead, _dgfa := range _abce.Ser {
		if _baga := _dgfa.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ceead)); _baga != nil {
			return _baga
		}
	}
	if _abce.DLbls != nil {
		if _cgedf := _abce.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cgedf != nil {
			return _cgedf
		}
	}
	if _abce.GapWidth != nil {
		if _fbcf := _abce.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _fbcf != nil {
			return _fbcf
		}
	}
	if _abce.SplitType != nil {
		if _bdga := _abce.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _bdga != nil {
			return _bdga
		}
	}
	if _abce.SplitPos != nil {
		if _ebgb := _abce.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _ebgb != nil {
			return _ebgb
		}
	}
	if _abce.CustSplit != nil {
		if _abef := _abce.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _abef != nil {
			return _abef
		}
	}
	if _abce.SecondPieSize != nil {
		if _bfcbdc := _abce.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _bfcbdc != nil {
			return _bfcbdc
		}
	}
	for _cdfgd, _dcda := range _abce.SerLines {
		if _ggbg := _dcda.ValidateWithPath(_bf.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _cdfgd)); _ggbg != nil {
			return _ggbg
		}
	}
	if _abce.ExtLst != nil {
		if _cfeb := _abce.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfeb != nil {
			return _cfeb
		}
	}
	return nil
}

func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_feaf, _ddcde := _b.ParseUint(s, 10, 32)
	if _ddcde != nil {
		return ST_BubbleScale{}, _ddcde
	}
	_ffgce := uint32(_feaf)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_ffgce}, nil
}

func (_adbbg *CT_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _edea := range start.Attr {
		if _edea.Name.Local == "\u0076\u0061\u006c" {
			_adbbg.ValAttr.UnmarshalXMLAttr(_edea)
			continue
		}
	}
	for {
		_gaggd, _ccfbb := d.Token()
		if _ccfbb != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _ccfbb)
		}
		if _efggg, _bgcbe := _gaggd.(_e.EndElement); _bgcbe && _efggg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_acac *CT_LineSer) ValidateWithPath(path string) error {
	if _bbbf := _acac.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bbbf != nil {
		return _bbbf
	}
	if _gaac := _acac.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gaac != nil {
		return _gaac
	}
	if _acac.Tx != nil {
		if _dcge := _acac.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dcge != nil {
			return _dcge
		}
	}
	if _acac.SpPr != nil {
		if _fbbac := _acac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fbbac != nil {
			return _fbbac
		}
	}
	if _acac.Marker != nil {
		if _babb := _acac.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _babb != nil {
			return _babb
		}
	}
	for _bdfe, _dcbad := range _acac.DPt {
		if _bfaa := _dcbad.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _bdfe)); _bfaa != nil {
			return _bfaa
		}
	}
	if _acac.DLbls != nil {
		if _ccfef := _acac.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ccfef != nil {
			return _ccfef
		}
	}
	for _cccd, _gcdb := range _acac.Trendline {
		if _bdcb := _gcdb.ValidateWithPath(_bf.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _cccd)); _bdcb != nil {
			return _bdcb
		}
	}
	if _acac.ErrBars != nil {
		if _daeb := _acac.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _daeb != nil {
			return _daeb
		}
	}
	if _acac.Cat != nil {
		if _decab := _acac.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _decab != nil {
			return _decab
		}
	}
	if _acac.Val != nil {
		if _edgeb := _acac.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _edgeb != nil {
			return _edgeb
		}
	}
	if _acac.Smooth != nil {
		if _abffa := _acac.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _abffa != nil {
			return _abffa
		}
	}
	if _acac.ExtLst != nil {
		if _fcdb := _acac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcdb != nil {
			return _fcdb
		}
	}
	return nil
}

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

type ST_DLblPos byte

func (_afbe ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _afbe {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afbe))
	}
	return nil
}

func (_dadcf ST_BubbleScale) String() string {
	if _dadcf.ST_BubbleScalePercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_dadcf.ST_BubbleScalePercent)
	}
	if _dadcf.ST_BubbleScaleUInt != nil {
		return _bf.Sprintf("\u0025\u0076", *_dadcf.ST_BubbleScaleUInt)
	}
	return ""
}

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_fece *CT_ErrBars) ValidateWithPath(path string) error {
	if _fece.ErrDir != nil {
		if _ecfe := _fece.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _ecfe != nil {
			return _ecfe
		}
	}
	if _bdgg := _fece.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _bdgg != nil {
		return _bdgg
	}
	if _ffee := _fece.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _ffee != nil {
		return _ffee
	}
	if _fece.NoEndCap != nil {
		if _fbcgb := _fece.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _fbcgb != nil {
			return _fbcgb
		}
	}
	if _fece.Plus != nil {
		if _ggccb := _fece.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _ggccb != nil {
			return _ggccb
		}
	}
	if _fece.Minus != nil {
		if _bdcf := _fece.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _bdcf != nil {
			return _bdcf
		}
	}
	if _fece.Val != nil {
		if _adcd := _fece.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _adcd != nil {
			return _adcd
		}
	}
	if _fece.SpPr != nil {
		if _fabf := _fece.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fabf != nil {
			return _fabf
		}
	}
	if _fece.ExtLst != nil {
		if _dccdc := _fece.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dccdc != nil {
			return _dccdc
		}
	}
	return nil
}

func (_cebgc ST_LayoutMode) Validate() error { return _cebgc.ValidateWithPath("") }

func (_feagc ST_ErrValType) String() string {
	switch _feagc {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}

type CT_SurfaceSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_cb.CT_ShapeProperties
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_afec ST_SizeRepresents) String() string {
	switch _afec {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}

type ST_LegendPos byte

func (_eeef *EG_LineChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_begaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_eeef.Grouping, _begaf)
	if _eeef.VaryColors != nil {
		_agfbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_eeef.VaryColors, _agfbe)
	}
	if _eeef.Ser != nil {
		_ggeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cdgbg := range _eeef.Ser {
			e.EncodeElement(_cdgbg, _ggeb)
		}
	}
	if _eeef.DLbls != nil {
		_efgee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eeef.DLbls, _efgee)
	}
	if _eeef.DropLines != nil {
		_cfbgd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eeef.DropLines, _cfbgd)
	}
	return nil
}

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_cgff *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }

func (_bgecb *CT_NumFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _bf.Sprintf("\u0025\u0076", _bgecb.FormatCodeAttr)})
	if _bgecb.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_bgecb.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_gegeb, _cdabbf := _b.ParseUint(s, 10, 16)
	if _cdabbf != nil {
		return ST_HPercent{}, _cdabbf
	}
	_cagdb := uint16(_gegeb)
	return ST_HPercent{ST_HPercentUShort: &_cagdb}, nil
}

func (_bgfcdc ST_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bgfcdc.ST_ThicknessPercent != nil {
		e.EncodeToken(_e.CharData(*_bgfcdc.ST_ThicknessPercent))
	}
	if _bgfcdc.Uint32 != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_bgfcdc.Uint32)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_decc *Group_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _decc.Layout != nil {
		_agfea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_decc.Layout, _agfea)
	}
	if _decc.Tx != nil {
		_dbecf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_decc.Tx, _dbecf)
	}
	if _decc.NumFmt != nil {
		_gbbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_decc.NumFmt, _gbbe)
	}
	if _decc.SpPr != nil {
		_fcbbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_decc.SpPr, _fcbbd)
	}
	if _decc.TxPr != nil {
		_dfbaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_decc.TxPr, _dfbaf)
	}
	if _decc.DLblPos != nil {
		_ffegd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_decc.DLblPos, _ffegd)
	}
	if _decc.ShowLegendKey != nil {
		_caca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_decc.ShowLegendKey, _caca)
	}
	if _decc.ShowVal != nil {
		_bebb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_decc.ShowVal, _bebb)
	}
	if _decc.ShowCatName != nil {
		_bcfce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_decc.ShowCatName, _bcfce)
	}
	if _decc.ShowSerName != nil {
		_gagbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_decc.ShowSerName, _gagbc)
	}
	if _decc.ShowPercent != nil {
		_dcdca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_decc.ShowPercent, _dcdca)
	}
	if _decc.ShowBubbleSize != nil {
		_ebaae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_decc.ShowBubbleSize, _ebaae)
	}
	if _decc.Separator != nil {
		_afbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_ba.AddPreserveSpaceAttr(&_afbb, *_decc.Separator)
		e.EncodeElement(_decc.Separator, _afbb)
	}
	return nil
}

func (_efbf *CT_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_defb:
	for {
		_gaaa, _cbegc := d.Token()
		if _cbegc != nil {
			return _cbegc
		}
		switch _ggdc := _gaaa.(type) {
		case _e.StartElement:
			switch _ggdc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_gacf := NewCT_DLbl()
				if _cdbc := d.DecodeElement(_gacf, &_ggdc); _cdbc != nil {
					return _cdbc
				}
				_efbf.DLbl = append(_efbf.DLbl, _gacf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _egff := d.DecodeElement(&_efbf.Choice.Delete, &_ggdc); _egff != nil {
					return _egff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _cfefg := d.DecodeElement(&_efbf.Choice.NumFmt, &_ggdc); _cfefg != nil {
					return _cfefg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _dcfg := d.DecodeElement(&_efbf.Choice.SpPr, &_ggdc); _dcfg != nil {
					return _dcfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _abac := d.DecodeElement(&_efbf.Choice.TxPr, &_ggdc); _abac != nil {
					return _abac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _gaebg := d.DecodeElement(&_efbf.Choice.DLblPos, &_ggdc); _gaebg != nil {
					return _gaebg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _bgdg := d.DecodeElement(&_efbf.Choice.ShowLegendKey, &_ggdc); _bgdg != nil {
					return _bgdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _egdd := d.DecodeElement(&_efbf.Choice.ShowVal, &_ggdc); _egdd != nil {
					return _egdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _acda := d.DecodeElement(&_efbf.Choice.ShowCatName, &_ggdc); _acda != nil {
					return _acda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _ffbc := d.DecodeElement(&_efbf.Choice.ShowSerName, &_ggdc); _ffbc != nil {
					return _ffbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _fbbd := d.DecodeElement(&_efbf.Choice.ShowPercent, &_ggdc); _fbbd != nil {
					return _fbbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _ggfg := d.DecodeElement(&_efbf.Choice.ShowBubbleSize, &_ggdc); _ggfg != nil {
					return _ggfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _cbde := d.DecodeElement(&_efbf.Choice.Separator, &_ggdc); _cbde != nil {
					return _cbde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _fcgg := d.DecodeElement(&_efbf.Choice.ShowLeaderLines, &_ggdc); _fcgg != nil {
					return _fcgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _efbf.Choice == nil {
					_efbf.Choice = NewCT_DLblsChoice()
				}
				if _dbef := d.DecodeElement(&_efbf.Choice.LeaderLines, &_ggdc); _dbef != nil {
					return _dbef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efbf.ExtLst = NewCT_ExtensionList()
				if _fefeg := d.DecodeElement(_efbf.ExtLst, &_ggdc); _fefeg != nil {
					return _fefeg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _ggdc.Name)
				if _fecdd := d.Skip(); _fecdd != nil {
					return _fecdd
				}
			}
		case _e.EndElement:
			break _defb
		case _e.CharData:
		}
	}
	return nil
}

func (_cbeca *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cbeca = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_cbeca = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_cbeca = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_cbeca = 3
	}
	return nil
}

func (_ababb *CT_LineSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ababb.Idx = NewCT_UnsignedInt()
	_ababb.Order = NewCT_UnsignedInt()
_caab:
	for {
		_ebaa, _cgdab := d.Token()
		if _cgdab != nil {
			return _cgdab
		}
		switch _becec := _ebaa.(type) {
		case _e.StartElement:
			switch _becec.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dcg := d.DecodeElement(_ababb.Idx, &_becec); _dcg != nil {
					return _dcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _afgb := d.DecodeElement(_ababb.Order, &_becec); _afgb != nil {
					return _afgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ababb.Tx = NewCT_SerTx()
				if _adcdb := d.DecodeElement(_ababb.Tx, &_becec); _adcdb != nil {
					return _adcdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ababb.SpPr = _cb.NewCT_ShapeProperties()
				if _gdda := d.DecodeElement(_ababb.SpPr, &_becec); _gdda != nil {
					return _gdda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_ababb.Marker = NewCT_Marker()
				if _bcgb := d.DecodeElement(_ababb.Marker, &_becec); _bcgb != nil {
					return _bcgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_cdccd := NewCT_DPt()
				if _abad := d.DecodeElement(_cdccd, &_becec); _abad != nil {
					return _abad
				}
				_ababb.DPt = append(_ababb.DPt, _cdccd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ababb.DLbls = NewCT_DLbls()
				if _defdc := d.DecodeElement(_ababb.DLbls, &_becec); _defdc != nil {
					return _defdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_eega := NewCT_Trendline()
				if _ffgcac := d.DecodeElement(_eega, &_becec); _ffgcac != nil {
					return _ffgcac
				}
				_ababb.Trendline = append(_ababb.Trendline, _eega)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ababb.ErrBars = NewCT_ErrBars()
				if _gecb := d.DecodeElement(_ababb.ErrBars, &_becec); _gecb != nil {
					return _gecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ababb.Cat = NewCT_AxDataSource()
				if _ggcg := d.DecodeElement(_ababb.Cat, &_becec); _ggcg != nil {
					return _ggcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ababb.Val = NewCT_NumDataSource()
				if _afafb := d.DecodeElement(_ababb.Val, &_becec); _afafb != nil {
					return _afafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_ababb.Smooth = NewCT_Boolean()
				if _cdeeb := d.DecodeElement(_ababb.Smooth, &_becec); _cdeeb != nil {
					return _cdeeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ababb.ExtLst = NewCT_ExtensionList()
				if _bcad := d.DecodeElement(_ababb.ExtLst, &_becec); _bcad != nil {
					return _bcad
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _becec.Name)
				if _dagb := d.Skip(); _dagb != nil {
					return _dagb
				}
			}
		case _e.EndElement:
			break _caab
		case _e.CharData:
		}
	}
	return nil
}

func (_aaeg *CT_DispUnits) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bcfd:
	for {
		_fddb, _bfcc := d.Token()
		if _bfcc != nil {
			return _bfcc
		}
		switch _abcb := _fddb.(type) {
		case _e.StartElement:
			switch _abcb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_aaeg.Choice = NewCT_DispUnitsChoice()
				if _dddb := d.DecodeElement(&_aaeg.Choice.CustUnit, &_abcb); _dddb != nil {
					return _dddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_aaeg.Choice = NewCT_DispUnitsChoice()
				if _acbc := d.DecodeElement(&_aaeg.Choice.BuiltInUnit, &_abcb); _acbc != nil {
					return _acbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_aaeg.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _eee := d.DecodeElement(_aaeg.DispUnitsLbl, &_abcb); _eee != nil {
					return _eee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aaeg.ExtLst = NewCT_ExtensionList()
				if _ecag := d.DecodeElement(_aaeg.ExtLst, &_abcb); _ecag != nil {
					return _ecag
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _abcb.Name)
				if _ccbdb := d.Skip(); _ccbdb != nil {
					return _ccbdb
				}
			}
		case _e.EndElement:
			break _bcfd
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice { _dgg := &CT_AxDataSourceChoice{}; return _dgg }

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_dfgbc *CT_Thickness) ValidateWithPath(path string) error {
	if _acbdg := _dfgbc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acbdg != nil {
		return _acbdg
	}
	return nil
}

type EG_SurfaceChartShared struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
}

func NewEG_AreaChartShared() *EG_AreaChartShared { _befdb := &EG_AreaChartShared{}; return _befdb }

// Validate validates the CT_PictureStackUnit and its children
func (_dcaa *CT_PictureStackUnit) Validate() error {
	return _dcaa.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}

// Validate validates the CT_Crosses and its children
func (_eadaf *CT_Crosses) Validate() error {
	return _eadaf.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}

func (_feaa *CT_CatAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gdbaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_feaa.AxId, _gdbaf)
	_aecg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_feaa.Scaling, _aecg)
	if _feaa.Delete != nil {
		_fdgge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_feaa.Delete, _fdgge)
	}
	_bca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_feaa.AxPos, _bca)
	if _feaa.MajorGridlines != nil {
		_gcea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_feaa.MajorGridlines, _gcea)
	}
	if _feaa.MinorGridlines != nil {
		_abab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_feaa.MinorGridlines, _abab)
	}
	if _feaa.Title != nil {
		_cdec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_feaa.Title, _cdec)
	}
	if _feaa.NumFmt != nil {
		_ebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_feaa.NumFmt, _ebg)
	}
	if _feaa.MajorTickMark != nil {
		_cbdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_feaa.MajorTickMark, _cbdf)
	}
	if _feaa.MinorTickMark != nil {
		_adcc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_feaa.MinorTickMark, _adcc)
	}
	if _feaa.TickLblPos != nil {
		_accd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_feaa.TickLblPos, _accd)
	}
	if _feaa.SpPr != nil {
		_fcccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_feaa.SpPr, _fcccg)
	}
	if _feaa.TxPr != nil {
		_bcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_feaa.TxPr, _bcf)
	}
	_debc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_feaa.CrossAx, _debc)
	if _feaa.Choice != nil {
		_feaa.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _feaa.Auto != nil {
		_bag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_feaa.Auto, _bag)
	}
	if _feaa.LblAlgn != nil {
		_cagd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_feaa.LblAlgn, _cagd)
	}
	if _feaa.LblOffset != nil {
		_geeg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_feaa.LblOffset, _geeg)
	}
	if _feaa.TickLblSkip != nil {
		_ggae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_feaa.TickLblSkip, _ggae)
	}
	if _feaa.TickMarkSkip != nil {
		_ccbfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_feaa.TickMarkSkip, _ccbfa)
	}
	if _feaa.NoMultiLvlLbl != nil {
		_bbgg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_feaa.NoMultiLvlLbl, _bbgg)
	}
	if _feaa.ExtLst != nil {
		_cbbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_feaa.ExtLst, _cbbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_DLblChoice struct {
	Delete         *CT_Boolean
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

// Validate validates the CT_BubbleSer and its children
func (_geee *CT_BubbleSer) Validate() error {
	return _geee.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_dbaf *CT_BubbleScale) ValidateWithPath(path string) error {
	if _dbaf.ValAttr != nil {
		if _ded := _dbaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ded != nil {
			return _ded
		}
	}
	return nil
}

func NewCT_RadarSer() *CT_RadarSer {
	_efbdf := &CT_RadarSer{}
	_efbdf.Idx = NewCT_UnsignedInt()
	_efbdf.Order = NewCT_UnsignedInt()
	return _efbdf
}

func (_effb *CT_BubbleChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_beeg:
	for {
		_efac, _dfbc := d.Token()
		if _dfbc != nil {
			return _dfbc
		}
		switch _dfdg := _efac.(type) {
		case _e.StartElement:
			switch _dfdg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_effb.VaryColors = NewCT_Boolean()
				if _cbc := d.DecodeElement(_effb.VaryColors, &_dfdg); _cbc != nil {
					return _cbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cbgf := NewCT_BubbleSer()
				if _ffad := d.DecodeElement(_cbgf, &_dfdg); _ffad != nil {
					return _ffad
				}
				_effb.Ser = append(_effb.Ser, _cbgf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_effb.DLbls = NewCT_DLbls()
				if _gdec := d.DecodeElement(_effb.DLbls, &_dfdg); _gdec != nil {
					return _gdec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_effb.Bubble3D = NewCT_Boolean()
				if _gccb := d.DecodeElement(_effb.Bubble3D, &_dfdg); _gccb != nil {
					return _gccb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_effb.BubbleScale = NewCT_BubbleScale()
				if _egac := d.DecodeElement(_effb.BubbleScale, &_dfdg); _egac != nil {
					return _egac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_effb.ShowNegBubbles = NewCT_Boolean()
				if _cbbd := d.DecodeElement(_effb.ShowNegBubbles, &_dfdg); _cbbd != nil {
					return _cbbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_effb.SizeRepresents = NewCT_SizeRepresents()
				if _dgcc := d.DecodeElement(_effb.SizeRepresents, &_dfdg); _dgcc != nil {
					return _dgcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cef := NewCT_UnsignedInt()
				if _dafa := d.DecodeElement(_cef, &_dfdg); _dafa != nil {
					return _dafa
				}
				_effb.AxId = append(_effb.AxId, _cef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_effb.ExtLst = NewCT_ExtensionList()
				if _fccg := d.DecodeElement(_effb.ExtLst, &_dfdg); _fccg != nil {
					return _fccg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _dfdg.Name)
				if _ebbg := d.Skip(); _ebbg != nil {
					return _ebbg
				}
			}
		case _e.EndElement:
			break _beeg
		case _e.CharData:
		}
	}
	return nil
}

func (_cdgcf ST_Crosses) ValidateWithPath(path string) error {
	switch _cdgcf {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdgcf))
	}
	return nil
}

// Validate validates the CT_PlotArea and its children
func (_cdfe *CT_PlotArea) Validate() error {
	return _cdfe.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_cdcdb *CT_Lvl) ValidateWithPath(path string) error {
	for _dbee, _ebgg := range _cdcdb.Pt {
		if _aaeb := _ebgg.ValidateWithPath(_bf.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _dbee)); _aaeb != nil {
			return _aaeb
		}
	}
	return nil
}

func (_daacge *CT_PieSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ddff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_daacge.Idx, _ddff)
	_aeadg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_daacge.Order, _aeadg)
	if _daacge.Tx != nil {
		_gcaca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_daacge.Tx, _gcaca)
	}
	if _daacge.SpPr != nil {
		_dfgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_daacge.SpPr, _dfgd)
	}
	if _daacge.Explosion != nil {
		_gdf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_daacge.Explosion, _gdf)
	}
	if _daacge.DPt != nil {
		_gaaba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _ddfa := range _daacge.DPt {
			e.EncodeElement(_ddfa, _gaaba)
		}
	}
	if _daacge.DLbls != nil {
		_dcbab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_daacge.DLbls, _dcbab)
	}
	if _daacge.Cat != nil {
		_acecg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_daacge.Cat, _acecg)
	}
	if _daacge.Val != nil {
		_bffge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_daacge.Val, _bffge)
	}
	if _daacge.ExtLst != nil {
		_aedef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_daacge.ExtLst, _aedef)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

type ST_Crosses byte

func (_adbg *ST_PageSetupOrientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cedfc, _gffbb := d.Token()
	if _gffbb != nil {
		return _gffbb
	}
	if _adfce, _bgdga := _cedfc.(_e.EndElement); _bgdga && _adfce.Name == start.Name {
		*_adbg = 1
		return nil
	}
	if _fdfg, _dagbd := _cedfc.(_e.CharData); !_dagbd {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cedfc)
	} else {
		switch string(_fdfg) {
		case "":
			*_adbg = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_adbg = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_adbg = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_adbg = 3
		}
	}
	_cedfc, _gffbb = d.Token()
	if _gffbb != nil {
		return _gffbb
	}
	if _fegcf, _bfdb := _cedfc.(_e.EndElement); _bfdb && _fegcf.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cedfc)
}

func (_ebdf ST_TrendlineType) Validate() error { return _ebdf.ValidateWithPath("") }

func (_decac *CT_View3D) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _decac.RotX != nil {
		_cgccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_decac.RotX, _cgccg)
	}
	if _decac.HPercent != nil {
		_gddac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_decac.HPercent, _gddac)
	}
	if _decac.RotY != nil {
		_edgcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_decac.RotY, _edgcd)
	}
	if _decac.DepthPercent != nil {
		_accb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_decac.DepthPercent, _accb)
	}
	if _decac.RAngAx != nil {
		_gcedb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_decac.RAngAx, _gcedb)
	}
	if _decac.Perspective != nil {
		_aggde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_decac.Perspective, _aggde)
	}
	if _decac.ExtLst != nil {
		_fcee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_decac.ExtLst, _fcee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_gcde *CT_CustSplit) ValidateWithPath(path string) error {
	for _acdg, _fbce := range _gcde.SecondPiePt {
		if _fce := _fbce.ValidateWithPath(_bf.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _acdg)); _fce != nil {
			return _fce
		}
	}
	return nil
}

func (_gbgc *EG_PieChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gbgc.VaryColors != nil {
		_gbcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gbgc.VaryColors, _gbcc)
	}
	if _gbgc.Ser != nil {
		_gaga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dcgbg := range _gbgc.Ser {
			e.EncodeElement(_dcgbg, _gaga)
		}
	}
	if _gbgc.DLbls != nil {
		_bacea := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gbgc.DLbls, _bacea)
	}
	return nil
}

func (_beegd ST_LayoutTarget) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bged := _e.Attr{}
	_bged.Name = name
	switch _beegd {
	case ST_LayoutTargetUnset:
		_bged.Value = ""
	case ST_LayoutTargetInner:
		_bged.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_bged.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _bged, nil
}

// Validate validates the CT_SurfaceChart and its children
func (_bbbd *CT_SurfaceChart) Validate() error {
	return _bbbd.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}

const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

func NewCT_LayoutTarget() *CT_LayoutTarget { _cgae := &CT_LayoutTarget{}; return _cgae }

func (_ggeda *Group_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_degcd:
	for {
		_beddc, _cdfeb := d.Token()
		if _cdfeb != nil {
			return _cdfeb
		}
		switch _geeafb := _beddc.(type) {
		case _e.StartElement:
			switch _geeafb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_ggeda.Layout = NewCT_Layout()
				if _ccfcf := d.DecodeElement(_ggeda.Layout, &_geeafb); _ccfcf != nil {
					return _ccfcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ggeda.Tx = NewCT_Tx()
				if _ccafc := d.DecodeElement(_ggeda.Tx, &_geeafb); _ccafc != nil {
					return _ccafc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ggeda.NumFmt = NewCT_NumFmt()
				if _ffegc := d.DecodeElement(_ggeda.NumFmt, &_geeafb); _ffegc != nil {
					return _ffegc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ggeda.SpPr = _cb.NewCT_ShapeProperties()
				if _cefdc := d.DecodeElement(_ggeda.SpPr, &_geeafb); _cefdc != nil {
					return _cefdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ggeda.TxPr = _cb.NewCT_TextBody()
				if _adcef := d.DecodeElement(_ggeda.TxPr, &_geeafb); _adcef != nil {
					return _adcef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_ggeda.DLblPos = NewCT_DLblPos()
				if _dccfb := d.DecodeElement(_ggeda.DLblPos, &_geeafb); _dccfb != nil {
					return _dccfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_ggeda.ShowLegendKey = NewCT_Boolean()
				if _aceef := d.DecodeElement(_ggeda.ShowLegendKey, &_geeafb); _aceef != nil {
					return _aceef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_ggeda.ShowVal = NewCT_Boolean()
				if _aacda := d.DecodeElement(_ggeda.ShowVal, &_geeafb); _aacda != nil {
					return _aacda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_ggeda.ShowCatName = NewCT_Boolean()
				if _bdffc := d.DecodeElement(_ggeda.ShowCatName, &_geeafb); _bdffc != nil {
					return _bdffc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_ggeda.ShowSerName = NewCT_Boolean()
				if _gafbd := d.DecodeElement(_ggeda.ShowSerName, &_geeafb); _gafbd != nil {
					return _gafbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_ggeda.ShowPercent = NewCT_Boolean()
				if _efcdg := d.DecodeElement(_ggeda.ShowPercent, &_geeafb); _efcdg != nil {
					return _efcdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_ggeda.ShowBubbleSize = NewCT_Boolean()
				if _gegag := d.DecodeElement(_ggeda.ShowBubbleSize, &_geeafb); _gegag != nil {
					return _gegag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_ggeda.Separator = new(string)
				if _dgfdb := d.DecodeElement(_ggeda.Separator, &_geeafb); _dgfdb != nil {
					return _dgfdb
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _geeafb.Name)
				if _bagfe := d.Skip(); _bagfe != nil {
					return _bagfe
				}
			}
		case _e.EndElement:
			break _degcd
		case _e.CharData:
		}
	}
	return nil
}

type ST_TrendlineType byte

func NewCT_SurfaceChart() *CT_SurfaceChart { _agebf := &CT_SurfaceChart{}; return _agebf }

func (_egcbf ST_LblOffset) String() string {
	if _egcbf.ST_LblOffsetPercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_egcbf.ST_LblOffsetPercent)
	}
	if _egcbf.ST_LblOffsetUShort != nil {
		return _bf.Sprintf("\u0025\u0076", *_egcbf.ST_LblOffsetUShort)
	}
	return ""
}

func (_cbef ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _cbef {
	case 0, 1, 2, 3:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbef))
	}
	return nil
}

func NewCT_HeaderFooter() *CT_HeaderFooter { _aagd := &CT_HeaderFooter{}; return _aagd }

func (_bbgdg *CT_Line3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bbgdg.Grouping = NewCT_Grouping()
_gega:
	for {
		_dadde, _dfda := d.Token()
		if _dfda != nil {
			return _dfda
		}
		switch _fedc := _dadde.(type) {
		case _e.StartElement:
			switch _fedc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _babg := d.DecodeElement(_bbgdg.Grouping, &_fedc); _babg != nil {
					return _babg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bbgdg.VaryColors = NewCT_Boolean()
				if _ceee := d.DecodeElement(_bbgdg.VaryColors, &_fedc); _ceee != nil {
					return _ceee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfcba := NewCT_LineSer()
				if _gbaef := d.DecodeElement(_bfcba, &_fedc); _gbaef != nil {
					return _gbaef
				}
				_bbgdg.Ser = append(_bbgdg.Ser, _bfcba)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bbgdg.DLbls = NewCT_DLbls()
				if _dbfc := d.DecodeElement(_bbgdg.DLbls, &_fedc); _dbfc != nil {
					return _dbfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bbgdg.DropLines = NewCT_ChartLines()
				if _ccebc := d.DecodeElement(_bbgdg.DropLines, &_fedc); _ccebc != nil {
					return _ccebc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_bbgdg.GapDepth = NewCT_GapAmount()
				if _gcfg := d.DecodeElement(_bbgdg.GapDepth, &_fedc); _gcfg != nil {
					return _gcfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_edaf := NewCT_UnsignedInt()
				if _gbdae := d.DecodeElement(_edaf, &_fedc); _gbdae != nil {
					return _gbdae
				}
				_bbgdg.AxId = append(_bbgdg.AxId, _edaf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbgdg.ExtLst = NewCT_ExtensionList()
				if _gfaed := d.DecodeElement(_bbgdg.ExtLst, &_fedc); _gfaed != nil {
					return _gfaed
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _fedc.Name)
				if _gdbb := d.Skip(); _gdbb != nil {
					return _gdbb
				}
			}
		case _e.EndElement:
			break _gega
		case _e.CharData:
		}
	}
	return nil
}

func (_gcfbf *ST_BuiltInUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gcfbf = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_gcfbf = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_gcfbf = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_gcfbf = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_gcfbf = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_gcfbf = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_gcfbf = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_gcfbf = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_gcfbf = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_gcfbf = 9
	}
	return nil
}

func (_cgfb *CT_BandFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cgfb.BandFmt != nil {
		_dbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _aeb := range _cgfb.BandFmt {
			e.EncodeElement(_aeb, _dbe)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_acaca ST_TickLblPos) Validate() error { return _acaca.ValidateWithPath("") }

func (_bgffb ST_ErrBarType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gfgef := _e.Attr{}
	_gfgef.Name = name
	switch _bgffb {
	case ST_ErrBarTypeUnset:
		_gfgef.Value = ""
	case ST_ErrBarTypeBoth:
		_gfgef.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_gfgef.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_gfgef.Value = "\u0070\u006c\u0075\u0073"
	}
	return _gfgef, nil
}

func (_efbge ST_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_efbge.String(), start)
}

func NewCT_StockChart() *CT_StockChart { _daead := &CT_StockChart{}; return _daead }

var ST_GapAmountPercentPatternRe = _ef.MustCompile(ST_GapAmountPercentPattern)

// Validate validates the CT_Line3DChart and its children
func (_aada *CT_Line3DChart) Validate() error {
	return _aada.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

func (_agcb *CT_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_egae, _geace := _agcb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _geace != nil {
		return _geace
	}
	start.Attr = append(start.Attr, _egae)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ffccbf ST_PageSetupOrientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ffdce := _e.Attr{}
	_ffdce.Name = name
	switch _ffccbf {
	case ST_PageSetupOrientationUnset:
		_ffdce.Value = ""
	case ST_PageSetupOrientationDefault:
		_ffdce.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_ffdce.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_ffdce.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _ffdce, nil
}

type CT_Trendline struct {
	Name          *string
	SpPr          *_cb.CT_ShapeProperties
	TrendlineType *CT_TrendlineType
	Order         *CT_Order
	Period        *CT_Period
	Forward       *CT_Double
	Backward      *CT_Double
	Intercept     *CT_Double
	DispRSqr      *CT_Boolean
	DispEq        *CT_Boolean
	TrendlineLbl  *CT_TrendlineLbl
	ExtLst        *CT_ExtensionList
}

func (_cacdc *CT_Trendline) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cacdc.TrendlineType = NewCT_TrendlineType()
_dbcbd:
	for {
		_edgbf, _eegac := d.Token()
		if _eegac != nil {
			return _eegac
		}
		switch _babe := _edgbf.(type) {
		case _e.StartElement:
			switch _babe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_cacdc.Name = new(string)
				if _cdcg := d.DecodeElement(_cacdc.Name, &_babe); _cdcg != nil {
					return _cdcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cacdc.SpPr = _cb.NewCT_ShapeProperties()
				if _bddeg := d.DecodeElement(_cacdc.SpPr, &_babe); _bddeg != nil {
					return _bddeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _faee := d.DecodeElement(_cacdc.TrendlineType, &_babe); _faee != nil {
					return _faee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_cacdc.Order = NewCT_Order()
				if _fegfg := d.DecodeElement(_cacdc.Order, &_babe); _fegfg != nil {
					return _fegfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_cacdc.Period = NewCT_Period()
				if _aafee := d.DecodeElement(_cacdc.Period, &_babe); _aafee != nil {
					return _aafee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_cacdc.Forward = NewCT_Double()
				if _cdcdbd := d.DecodeElement(_cacdc.Forward, &_babe); _cdcdbd != nil {
					return _cdcdbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_cacdc.Backward = NewCT_Double()
				if _cdeg := d.DecodeElement(_cacdc.Backward, &_babe); _cdeg != nil {
					return _cdeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_cacdc.Intercept = NewCT_Double()
				if _gfag := d.DecodeElement(_cacdc.Intercept, &_babe); _gfag != nil {
					return _gfag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_cacdc.DispRSqr = NewCT_Boolean()
				if _dagaga := d.DecodeElement(_cacdc.DispRSqr, &_babe); _dagaga != nil {
					return _dagaga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_cacdc.DispEq = NewCT_Boolean()
				if _dfecg := d.DecodeElement(_cacdc.DispEq, &_babe); _dfecg != nil {
					return _dfecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_cacdc.TrendlineLbl = NewCT_TrendlineLbl()
				if _aeffe := d.DecodeElement(_cacdc.TrendlineLbl, &_babe); _aeffe != nil {
					return _aeffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cacdc.ExtLst = NewCT_ExtensionList()
				if _cdgfa := d.DecodeElement(_cacdc.ExtLst, &_babe); _cdgfa != nil {
					return _cdgfa
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _babe.Name)
				if _cffe := d.Skip(); _cffe != nil {
					return _cffe
				}
			}
		case _e.EndElement:
			break _dbcbd
		case _e.CharData:
		}
	}
	return nil
}

func (_ceeaf *CT_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ceeaf.ValAttr != ST_OfPieTypeUnset {
		_cgabb, _adcfcd := _ceeaf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _adcfcd != nil {
			return _adcfcd
		}
		start.Attr = append(start.Attr, _cgabb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_dff *CT_Chart) ValidateWithPath(path string) error {
	if _dff.Title != nil {
		if _ffcf := _dff.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ffcf != nil {
			return _ffcf
		}
	}
	if _dff.AutoTitleDeleted != nil {
		if _afeb := _dff.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _afeb != nil {
			return _afeb
		}
	}
	if _dff.PivotFmts != nil {
		if _fefb := _dff.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _fefb != nil {
			return _fefb
		}
	}
	if _dff.View3D != nil {
		if _bcab := _dff.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _bcab != nil {
			return _bcab
		}
	}
	if _dff.Floor != nil {
		if _bcfa := _dff.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _bcfa != nil {
			return _bcfa
		}
	}
	if _dff.SideWall != nil {
		if _edc := _dff.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _edc != nil {
			return _edc
		}
	}
	if _dff.BackWall != nil {
		if _gdgf := _dff.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _gdgf != nil {
			return _gdgf
		}
	}
	if _beea := _dff.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _beea != nil {
		return _beea
	}
	if _dff.Legend != nil {
		if _baec := _dff.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _baec != nil {
			return _baec
		}
	}
	if _dff.PlotVisOnly != nil {
		if _geac := _dff.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _geac != nil {
			return _geac
		}
	}
	if _dff.DispBlanksAs != nil {
		if _bbag := _dff.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _bbag != nil {
			return _bbag
		}
	}
	if _dff.ShowDLblsOverMax != nil {
		if _feac := _dff.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _feac != nil {
			return _feac
		}
	}
	if _dff.ExtLst != nil {
		if _ffcd := _dff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffcd != nil {
			return _ffcd
		}
	}
	return nil
}

func (_bfdea ST_Grouping) Validate() error { return _bfdea.ValidateWithPath("") }

func (_ggbc *CT_ChartLines) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gbge:
	for {
		_afcfa, _bacb := d.Token()
		if _bacb != nil {
			return _bacb
		}
		switch _gfbd := _afcfa.(type) {
		case _e.StartElement:
			switch _gfbd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ggbc.SpPr = _cb.NewCT_ShapeProperties()
				if _fbdd := d.DecodeElement(_ggbc.SpPr, &_gfbd); _fbdd != nil {
					return _fbdd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _gfbd.Name)
				if _fcaa := d.Skip(); _fcaa != nil {
					return _fcaa
				}
			}
		case _e.EndElement:
			break _gbge
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

func (_dfefa ST_Shape) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ccgfg := _e.Attr{}
	_ccgfg.Name = name
	switch _dfefa {
	case ST_ShapeUnset:
		_ccgfg.Value = ""
	case ST_ShapeCone:
		_ccgfg.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_ccgfg.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_ccgfg.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_ccgfg.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_ccgfg.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_ccgfg.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _ccgfg, nil
}

type CT_DTable struct {
	ShowHorzBorder *CT_Boolean
	ShowVertBorder *CT_Boolean
	ShowOutline    *CT_Boolean
	ShowKeys       *CT_Boolean
	SpPr           *_cb.CT_ShapeProperties
	TxPr           *_cb.CT_TextBody
	ExtLst         *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_cgbf *CT_NumDataSource) ValidateWithPath(path string) error {
	if _fgcdb := _cgbf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _fgcdb != nil {
		return _fgcdb
	}
	return nil
}

func (_dddba *CT_StrVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _bf.Sprintf("\u0025\u0076", _dddba.IdxAttr)})
	e.EncodeToken(start)
	_egddfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_ba.AddPreserveSpaceAttr(&_egddfb, _dddba.V)
	e.EncodeElement(_dddba.V, _egddfb)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_daagc *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _daagc.StrRef != nil {
		if _edgb := _daagc.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _edgb != nil {
			return _edgb
		}
	}
	return nil
}

func NewCT_SplitType() *CT_SplitType { _bfeda := &CT_SplitType{}; return _bfeda }

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_afa *CT_AreaSer) ValidateWithPath(path string) error {
	if _cee := _afa.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cee != nil {
		return _cee
	}
	if _geg := _afa.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _geg != nil {
		return _geg
	}
	if _afa.Tx != nil {
		if _dade := _afa.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dade != nil {
			return _dade
		}
	}
	if _afa.SpPr != nil {
		if _efbb := _afa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _efbb != nil {
			return _efbb
		}
	}
	if _afa.PictureOptions != nil {
		if _fge := _afa.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _fge != nil {
			return _fge
		}
	}
	for _ccf, _ade := range _afa.DPt {
		if _bg := _ade.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ccf)); _bg != nil {
			return _bg
		}
	}
	if _afa.DLbls != nil {
		if _gbga := _afa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gbga != nil {
			return _gbga
		}
	}
	for _daf, _ffc := range _afa.Trendline {
		if _aec := _ffc.ValidateWithPath(_bf.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _daf)); _aec != nil {
			return _aec
		}
	}
	for _gea, _fda := range _afa.ErrBars {
		if _gda := _fda.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _gea)); _gda != nil {
			return _gda
		}
	}
	if _afa.Cat != nil {
		if _eb := _afa.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _eb != nil {
			return _eb
		}
	}
	if _afa.Val != nil {
		if _adbf := _afa.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _adbf != nil {
			return _adbf
		}
	}
	if _afa.ExtLst != nil {
		if _adc := _afa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adc != nil {
			return _adc
		}
	}
	return nil
}

func (_dcfad *CT_HeaderFooter) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcfad.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_dcfad.AlignWithMarginsAttr))})
	}
	if _dcfad.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_dcfad.DifferentOddEvenAttr))})
	}
	if _dcfad.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_dcfad.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _dcfad.OddHeader != nil {
		_ebgf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_ebgf, *_dcfad.OddHeader)
		e.EncodeElement(_dcfad.OddHeader, _ebgf)
	}
	if _dcfad.OddFooter != nil {
		_geae := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_geae, *_dcfad.OddFooter)
		e.EncodeElement(_dcfad.OddFooter, _geae)
	}
	if _dcfad.EvenHeader != nil {
		_deacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_deacg, *_dcfad.EvenHeader)
		e.EncodeElement(_dcfad.EvenHeader, _deacg)
	}
	if _dcfad.EvenFooter != nil {
		_fafcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_fafcb, *_dcfad.EvenFooter)
		e.EncodeElement(_dcfad.EvenFooter, _fafcb)
	}
	if _dcfad.FirstHeader != nil {
		_begg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_begg, *_dcfad.FirstHeader)
		e.EncodeElement(_dcfad.FirstHeader, _begg)
	}
	if _dcfad.FirstFooter != nil {
		_ccde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_ba.AddPreserveSpaceAttr(&_ccde, *_dcfad.FirstFooter)
		e.EncodeElement(_dcfad.FirstFooter, _ccde)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gfbgb ST_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gfbgb.ST_BubbleScalePercent != nil {
		e.EncodeToken(_e.CharData(*_gfbgb.ST_BubbleScalePercent))
	}
	if _gfbgb.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_gfbgb.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_ecaca *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _ecaca.TxPr != nil {
		if _aagcc := _ecaca.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aagcc != nil {
			return _aagcc
		}
	}
	return nil
}

// Validate validates the CT_HoleSize and its children
func (_bfdad *CT_HoleSize) Validate() error {
	return _bfdad.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}

// Validate validates the CT_PlotAreaChoice and its children
func (_gcacab *CT_PlotAreaChoice) Validate() error {
	return _gcacab.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_ebad *CT_DLbl) ValidateWithPath(path string) error {
	if _fbgbb := _ebad.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fbgbb != nil {
		return _fbgbb
	}
	if _ebad.Choice != nil {
		if _feed := _ebad.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _feed != nil {
			return _feed
		}
	}
	if _ebad.ExtLst != nil {
		if _bdagf := _ebad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bdagf != nil {
			return _bdagf
		}
	}
	return nil
}

func (_gdgg ST_Orientation) String() string {
	switch _gdgg {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}

func NewCT_GapAmount() *CT_GapAmount { _cdgf := &CT_GapAmount{}; return _cdgf }

func (_efbg *CT_Pie3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _efbg.VaryColors != nil {
		_gfff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_efbg.VaryColors, _gfff)
	}
	if _efbg.Ser != nil {
		_eabb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cceeaf := range _efbg.Ser {
			e.EncodeElement(_cceeaf, _eabb)
		}
	}
	if _efbg.DLbls != nil {
		_ddedf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_efbg.DLbls, _ddedf)
	}
	if _efbg.ExtLst != nil {
		_fbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efbg.ExtLst, _fbfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

func (_dcecd ST_LayoutTarget) Validate() error { return _dcecd.ValidateWithPath("") }

func (_gfda *CT_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfda.ValAttr != ST_ShapeUnset {
		_eefd, _fefad := _gfda.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fefad != nil {
			return _fefad
		}
		start.Attr = append(start.Attr, _eefd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eddfga ST_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_eddfga.String(), start)
}

func (_fcedg *ST_BarGrouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fcedg = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_fcedg = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_fcedg = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_fcedg = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_fcedg = 4
	}
	return nil
}

// Validate validates the CT_CatAx and its children
func (_bdca *CT_CatAx) Validate() error {
	return _bdca.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}

func (_beaed *CT_Legend) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gdbg:
	for {
		_efga, _eeacc := d.Token()
		if _eeacc != nil {
			return _eeacc
		}
		switch _cdcf := _efga.(type) {
		case _e.StartElement:
			switch _cdcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_beaed.LegendPos = NewCT_LegendPos()
				if _cdcd := d.DecodeElement(_beaed.LegendPos, &_cdcf); _cdcd != nil {
					return _cdcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_cbdfg := NewCT_LegendEntry()
				if _eabg := d.DecodeElement(_cbdfg, &_cdcf); _eabg != nil {
					return _eabg
				}
				_beaed.LegendEntry = append(_beaed.LegendEntry, _cbdfg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_beaed.Layout = NewCT_Layout()
				if _adda := d.DecodeElement(_beaed.Layout, &_cdcf); _adda != nil {
					return _adda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_beaed.Overlay = NewCT_Boolean()
				if _gedeff := d.DecodeElement(_beaed.Overlay, &_cdcf); _gedeff != nil {
					return _gedeff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_beaed.SpPr = _cb.NewCT_ShapeProperties()
				if _cfbe := d.DecodeElement(_beaed.SpPr, &_cdcf); _cfbe != nil {
					return _cfbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_beaed.TxPr = _cb.NewCT_TextBody()
				if _daff := d.DecodeElement(_beaed.TxPr, &_cdcf); _daff != nil {
					return _daff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_beaed.ExtLst = NewCT_ExtensionList()
				if _bdde := d.DecodeElement(_beaed.ExtLst, &_cdcf); _bdde != nil {
					return _bdde
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _cdcf.Name)
				if _feffg := d.Skip(); _feffg != nil {
					return _feffg
				}
			}
		case _e.EndElement:
			break _gdbg
		case _e.CharData:
		}
	}
	return nil
}

func (_aefag *ST_OfPieType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_aefag = 0
	case "\u0070\u0069\u0065":
		*_aefag = 1
	case "\u0062\u0061\u0072":
		*_aefag = 2
	}
	return nil
}

func (_bdcec ST_ErrDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_debecd := _e.Attr{}
	_debecd.Name = name
	switch _bdcec {
	case ST_ErrDirUnset:
		_debecd.Value = ""
	case ST_ErrDirX:
		_debecd.Value = "\u0078"
	case ST_ErrDirY:
		_debecd.Value = "\u0079"
	}
	return _debecd, nil
}

// Validate validates the CT_ValAx and its children
func (_fgfbd *CT_ValAx) Validate() error {
	return _fgfbd.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}

func (_eafee ST_BarGrouping) ValidateWithPath(path string) error {
	switch _eafee {
	case 0, 1, 2, 3, 4:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eafee))
	}
	return nil
}

func (_fbff ST_DispBlanksAs) Validate() error { return _fbff.ValidateWithPath("") }

type CT_Thickness struct{ ValAttr ST_Thickness }

func (_dcacc *CT_Lvl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dcacc.Pt != nil {
		_edac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _fcgbd := range _dcacc.Pt {
			e.EncodeElement(_fcgbd, _edac)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cbcb *CT_PictureOptions) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cbcb.ApplyToFront != nil {
		_agebe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_cbcb.ApplyToFront, _agebe)
	}
	if _cbcb.ApplyToSides != nil {
		_becb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_cbcb.ApplyToSides, _becb)
	}
	if _cbcb.ApplyToEnd != nil {
		_aead := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_cbcb.ApplyToEnd, _aead)
	}
	if _cbcb.PictureFormat != nil {
		_bfdca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_cbcb.PictureFormat, _bfdca)
	}
	if _cbcb.PictureStackUnit != nil {
		_gebfd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cbcb.PictureStackUnit, _gebfd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BarChart and its children
func (_cda *CT_BarChart) Validate() error {
	return _cda.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

func (_eegfaf ST_HoleSize) String() string {
	if _eegfaf.ST_HoleSizePercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_eegfaf.ST_HoleSizePercent)
	}
	if _eegfaf.ST_HoleSizeUByte != nil {
		return _bf.Sprintf("\u0025\u0076", *_eegfaf.ST_HoleSizeUByte)
	}
	return ""
}

// Validate validates the CT_Chart and its children
func (_dced *CT_Chart) Validate() error {
	return _dced.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}

func (_eefb *CT_Protection) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_efefb:
	for {
		_egcc, _gbgeb := d.Token()
		if _gbgeb != nil {
			return _gbgeb
		}
		switch _gbdf := _egcc.(type) {
		case _e.StartElement:
			switch _gbdf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_eefb.ChartObject = NewCT_Boolean()
				if _ebfac := d.DecodeElement(_eefb.ChartObject, &_gbdf); _ebfac != nil {
					return _ebfac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_eefb.Data = NewCT_Boolean()
				if _adgcb := d.DecodeElement(_eefb.Data, &_gbdf); _adgcb != nil {
					return _adgcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_eefb.Formatting = NewCT_Boolean()
				if _dafb := d.DecodeElement(_eefb.Formatting, &_gbdf); _dafb != nil {
					return _dafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_eefb.Selection = NewCT_Boolean()
				if _eadac := d.DecodeElement(_eefb.Selection, &_gbdf); _eadac != nil {
					return _eadac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_eefb.UserInterface = NewCT_Boolean()
				if _geag := d.DecodeElement(_eefb.UserInterface, &_gbdf); _geag != nil {
					return _geag
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _gbdf.Name)
				if _acdgf := d.Skip(); _acdgf != nil {
					return _acdgf
				}
			}
		case _e.EndElement:
			break _efefb
		case _e.CharData:
		}
	}
	return nil
}

func (_bfgdc *CT_Period) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfca := range start.Attr {
		if _dfca.Name.Local == "\u0076\u0061\u006c" {
			_gdca, _fedf := _b.ParseUint(_dfca.Value, 10, 32)
			if _fedf != nil {
				return _fedf
			}
			_bcec := uint32(_gdca)
			_bfgdc.ValAttr = &_bcec
			continue
		}
	}
	for {
		_dfga, _edab := d.Token()
		if _edab != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _edab)
		}
		if _ccfc, _eddg := _dfga.(_e.EndElement); _eddg && _ccfc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_dcbc *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _bfd := _dcbc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfd != nil {
		return _bfd
	}
	return nil
}

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

func (_edffb ST_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _edffb.ST_GapAmountPercent != nil {
		e.EncodeToken(_e.CharData(*_edffb.ST_GapAmountPercent))
	}
	if _edffb.ST_GapAmountUShort != nil {
		e.EncodeToken(_e.CharData(_bf.Sprintf("\u0025\u0064", *_edffb.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type CT_Area3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_NumFmt() *CT_NumFmt { _ddbc := &CT_NumFmt{}; return _ddbc }

func (_cfdba *ST_ScatterStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cfdba = 0
	case "\u006e\u006f\u006e\u0065":
		*_cfdba = 1
	case "\u006c\u0069\u006e\u0065":
		*_cfdba = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_cfdba = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_cfdba = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_cfdba = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_cfdba = 6
	}
	return nil
}

func (_defee *ST_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcdfa, _bdcag := d.Token()
	if _bdcag != nil {
		return _bdcag
	}
	if _gfgge, _geabf := _dcdfa.(_e.EndElement); _geabf && _gfgge.Name == start.Name {
		*_defee = 1
		return nil
	}
	if _bffcb, _aacggd := _dcdfa.(_e.CharData); !_aacggd {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcdfa)
	} else {
		switch string(_bffcb) {
		case "":
			*_defee = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_defee = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_defee = 2
		}
	}
	_dcdfa, _bdcag = d.Token()
	if _bdcag != nil {
		return _bdcag
	}
	if _abade, _ddbbf := _dcdfa.(_e.EndElement); _ddbbf && _abade.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcdfa)
}

func (_ecffe *CT_OfPieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dgdc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_ecffe.OfPieType, _dgdc)
	if _ecffe.VaryColors != nil {
		_cdbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ecffe.VaryColors, _cdbf)
	}
	if _ecffe.Ser != nil {
		_edfcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcaaf := range _ecffe.Ser {
			e.EncodeElement(_gcaaf, _edfcf)
		}
	}
	if _ecffe.DLbls != nil {
		_acad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ecffe.DLbls, _acad)
	}
	if _ecffe.GapWidth != nil {
		_baddc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_ecffe.GapWidth, _baddc)
	}
	if _ecffe.SplitType != nil {
		_eecd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_ecffe.SplitType, _eecd)
	}
	if _ecffe.SplitPos != nil {
		_cabcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_ecffe.SplitPos, _cabcb)
	}
	if _ecffe.CustSplit != nil {
		_ddgbg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_ecffe.CustSplit, _ddgbg)
	}
	if _ecffe.SecondPieSize != nil {
		_facd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_ecffe.SecondPieSize, _facd)
	}
	if _ecffe.SerLines != nil {
		_ddcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _gcgg := range _ecffe.SerLines {
			e.EncodeElement(_gcgg, _ddcg)
		}
	}
	if _ecffe.ExtLst != nil {
		_dbga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ecffe.ExtLst, _dbga)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bgfbd *CT_DispUnitsLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bgfbd.Layout != nil {
		_abaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_bgfbd.Layout, _abaa)
	}
	if _bgfbd.Tx != nil {
		_degc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bgfbd.Tx, _degc)
	}
	if _bgfbd.SpPr != nil {
		_effef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bgfbd.SpPr, _effef)
	}
	if _bgfbd.TxPr != nil {
		_cceb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bgfbd.TxPr, _cceb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PivotSource struct {
	Name   string
	FmtId  *CT_UnsignedInt
	ExtLst []*CT_ExtensionList
}

func _cadca(_dceca bool) uint8 {
	if _dceca {
		return 1
	}
	return 0
}

func (_aeggc *CT_Surface) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cebed:
	for {
		_fbfc, _dgbd := d.Token()
		if _dgbd != nil {
			return _dgbd
		}
		switch _aeac := _fbfc.(type) {
		case _e.StartElement:
			switch _aeac.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_aeggc.Thickness = NewCT_Thickness()
				if _fafag := d.DecodeElement(_aeggc.Thickness, &_aeac); _fafag != nil {
					return _fafag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aeggc.SpPr = _cb.NewCT_ShapeProperties()
				if _becff := d.DecodeElement(_aeggc.SpPr, &_aeac); _becff != nil {
					return _becff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_aeggc.PictureOptions = NewCT_PictureOptions()
				if _fcebd := d.DecodeElement(_aeggc.PictureOptions, &_aeac); _fcebd != nil {
					return _fcebd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeggc.ExtLst = NewCT_ExtensionList()
				if _adbc := d.DecodeElement(_aeggc.ExtLst, &_aeac); _adbc != nil {
					return _adbc
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _aeac.Name)
				if _bbaea := d.Skip(); _bbaea != nil {
					return _bbaea
				}
			}
		case _e.EndElement:
			break _cebed
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ErrBars and its children
func (_gddf *CT_ErrBars) Validate() error {
	return _gddf.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

// Validate validates the CT_NumDataSourceChoice and its children
func (_cagef *CT_NumDataSourceChoice) Validate() error {
	return _cagef.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}

type CT_StockChart struct {
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_afbcc *ST_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgdd, _cfbfa := d.Token()
	if _cfbfa != nil {
		return _cfbfa
	}
	if _fcdbg, _adebd := _cgdd.(_e.EndElement); _adebd && _fcdbg.Name == start.Name {
		*_afbcc = 1
		return nil
	}
	if _ecabb, _gbddg := _cgdd.(_e.CharData); !_gbddg {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cgdd)
	} else {
		switch string(_ecabb) {
		case "":
			*_afbcc = 0
		case "\u0065\u0078\u0070":
			*_afbcc = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_afbcc = 2
		case "\u006c\u006f\u0067":
			*_afbcc = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_afbcc = 4
		case "\u0070\u006f\u006c\u0079":
			*_afbcc = 5
		case "\u0070\u006f\u0077e\u0072":
			*_afbcc = 6
		}
	}
	_cgdd, _cfbfa = d.Token()
	if _cfbfa != nil {
		return _cfbfa
	}
	if _bgbg, _ccea := _cgdd.(_e.EndElement); _ccea && _bgbg.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cgdd)
}

type ST_ErrDir byte

func NewCT_TrendlineType() *CT_TrendlineType { _dadgac := &CT_TrendlineType{}; return _dadgac }

func (_fada *CT_HeaderFooter) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fgbd := range start.Attr {
		if _fgbd.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_ecdc, _faaa := _b.ParseBool(_fgbd.Value)
			if _faaa != nil {
				return _faaa
			}
			_fada.AlignWithMarginsAttr = &_ecdc
			continue
		}
		if _fgbd.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_beefb, _defge := _b.ParseBool(_fgbd.Value)
			if _defge != nil {
				return _defge
			}
			_fada.DifferentOddEvenAttr = &_beefb
			continue
		}
		if _fgbd.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_aefda, _efeb := _b.ParseBool(_fgbd.Value)
			if _efeb != nil {
				return _efeb
			}
			_fada.DifferentFirstAttr = &_aefda
			continue
		}
	}
_egded:
	for {
		_aagaa, _edae := d.Token()
		if _edae != nil {
			return _edae
		}
		switch _bgge := _aagaa.(type) {
		case _e.StartElement:
			switch _bgge.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_fada.OddHeader = new(string)
				if _cdee := d.DecodeElement(_fada.OddHeader, &_bgge); _cdee != nil {
					return _cdee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_fada.OddFooter = new(string)
				if _bacag := d.DecodeElement(_fada.OddFooter, &_bgge); _bacag != nil {
					return _bacag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_fada.EvenHeader = new(string)
				if _ceec := d.DecodeElement(_fada.EvenHeader, &_bgge); _ceec != nil {
					return _ceec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_fada.EvenFooter = new(string)
				if _fdgc := d.DecodeElement(_fada.EvenFooter, &_bgge); _fdgc != nil {
					return _fdgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_fada.FirstHeader = new(string)
				if _gfdb := d.DecodeElement(_fada.FirstHeader, &_bgge); _gfdb != nil {
					return _gfdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_fada.FirstFooter = new(string)
				if _baeaf := d.DecodeElement(_fada.FirstFooter, &_bgge); _baeaf != nil {
					return _baeaf
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _bgge.Name)
				if _bfcg := d.Skip(); _bfcg != nil {
					return _bfcg
				}
			}
		case _e.EndElement:
			break _egded
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Thickness and its children
func (_agdgb *CT_Thickness) Validate() error {
	return _agdgb.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_fdga *CT_AxDataSourceChoice) Validate() error {
	return _fdga.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}

type CT_PictureFormat struct{ ValAttr ST_PictureFormat }

func (_fggg *UserShapes) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fggg.CT_Drawing = *_d.NewCT_Drawing()
	for {
		_agea, _gfdfb := d.Token()
		if _gfdfb != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _gfdfb)
		}
		if _bdebc, _egcdg := _agea.(_e.EndElement); _egcdg && _bdebc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_daefe ST_BarDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gfgfab := _e.Attr{}
	_gfgfab.Name = name
	switch _daefe {
	case ST_BarDirUnset:
		_gfgfab.Value = ""
	case ST_BarDirBar:
		_gfgfab.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_gfgfab.Value = "\u0063\u006f\u006c"
	}
	return _gfgfab, nil
}

type CT_ChartLines struct{ SpPr *_cb.CT_ShapeProperties }

func (_dbgcb *Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _dbgcb.CT_RelId.MarshalXML(e, start)
}

// Validate validates the CT_LogBase and its children
func (_baecb *CT_LogBase) Validate() error {
	return _baecb.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}

func (_efege *CT_LineSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ageb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_efege.Idx, _ageb)
	_aabfc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_efege.Order, _aabfc)
	if _efege.Tx != nil {
		_gefge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_efege.Tx, _gefge)
	}
	if _efege.SpPr != nil {
		_aceb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_efege.SpPr, _aceb)
	}
	if _efege.Marker != nil {
		_ebae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_efege.Marker, _ebae)
	}
	if _efege.DPt != nil {
		_defde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _aebf := range _efege.DPt {
			e.EncodeElement(_aebf, _defde)
		}
	}
	if _efege.DLbls != nil {
		_gdgb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_efege.DLbls, _gdgb)
	}
	if _efege.Trendline != nil {
		_bcgdd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _cadg := range _efege.Trendline {
			e.EncodeElement(_cadg, _bcgdd)
		}
	}
	if _efege.ErrBars != nil {
		_aabae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_efege.ErrBars, _aabae)
	}
	if _efege.Cat != nil {
		_cgbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_efege.Cat, _cgbc)
	}
	if _efege.Val != nil {
		_bgccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_efege.Val, _bgccf)
	}
	if _efege.Smooth != nil {
		_cdfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_efege.Smooth, _cdfc)
	}
	if _efege.ExtLst != nil {
		_cacda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efege.ExtLst, _cacda)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_dacde *CT_MarkerSize) ValidateWithPath(path string) error {
	if _dacde.ValAttr != nil {
		if *_dacde.ValAttr < 2 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dacde.ValAttr)
		}
		if *_dacde.ValAttr > 72 {
			return _bf.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dacde.ValAttr)
		}
	}
	return nil
}

func (_dfdaa *CT_PivotSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dfdaa.FmtId = NewCT_UnsignedInt()
_bagc:
	for {
		_egdaa, _gcae := d.Token()
		if _gcae != nil {
			return _gcae
		}
		switch _ceeec := _egdaa.(type) {
		case _e.StartElement:
			switch _ceeec.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _ccgdg := d.DecodeElement(&_dfdaa.Name, &_ceeec); _ccgdg != nil {
					return _ccgdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _eacdc := d.DecodeElement(_dfdaa.FmtId, &_ceeec); _eacdc != nil {
					return _eacdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egdc := NewCT_ExtensionList()
				if _cbfge := d.DecodeElement(_egdc, &_ceeec); _cbfge != nil {
					return _cbfge
				}
				_dfdaa.ExtLst = append(_dfdaa.ExtLst, _egdc)
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _ceeec.Name)
				if _fecefg := d.Skip(); _fecefg != nil {
					return _fecefg
				}
			}
		case _e.EndElement:
			break _bagc
		case _e.CharData:
		}
	}
	return nil
}

func (_efabb *CT_StrVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _beadf := range start.Attr {
		if _beadf.Name.Local == "\u0069\u0064\u0078" {
			_gdeb, _bgbfa := _b.ParseUint(_beadf.Value, 10, 32)
			if _bgbfa != nil {
				return _bgbfa
			}
			_efabb.IdxAttr = uint32(_gdeb)
			continue
		}
	}
_aafg:
	for {
		_ccgdc, _ffeag := d.Token()
		if _ffeag != nil {
			return _ffeag
		}
		switch _bcdff := _ccgdc.(type) {
		case _e.StartElement:
			switch _bcdff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _gbefe := d.DecodeElement(&_efabb.V, &_bcdff); _gbefe != nil {
					return _gbefe
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _bcdff.Name)
				if _adecc := d.Skip(); _adecc != nil {
					return _adecc
				}
			}
		case _e.EndElement:
			break _aafg
		case _e.CharData:
		}
	}
	return nil
}

func (_fba *CT_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fba.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_fba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gfaac *CT_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _faef := range start.Attr {
		if _faef.Name.Local == "\u0076\u0061\u006c" {
			_gfaac.ValAttr.UnmarshalXMLAttr(_faef)
			continue
		}
	}
	for {
		_cfff, _gdbe := d.Token()
		if _gdbe != nil {
			return _bf.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _gdbe)
		}
		if _aaaa, _eceaf := _cfff.(_e.EndElement); _eceaf && _aaaa.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cbgda ST_TimeUnit) Validate() error { return _cbgda.ValidateWithPath("") }

func NewCT_ChartSpace() *CT_ChartSpace {
	_bafb := &CT_ChartSpace{}
	_bafb.Chart = NewCT_Chart()
	return _bafb
}

func (_edadg ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _edadg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_edadg))
	}
	return nil
}

func (_edcgc ST_OfPieType) String() string {
	switch _edcgc {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}

func (_fabeb ST_TickMark) Validate() error { return _fabeb.ValidateWithPath("") }

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func (_fgadb ST_MarkerStyle) Validate() error { return _fgadb.ValidateWithPath("") }

func (_dcba *CT_DispUnitsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcba.CustUnit != nil {
		_gccee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dcba.CustUnit, _gccee)
	}
	if _dcba.BuiltInUnit != nil {
		_cadd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_dcba.BuiltInUnit, _cadd)
	}
	return nil
}

func (_egcgc *EG_SurfaceChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_efde:
	for {
		_aedbe, _fgdab := d.Token()
		if _fgdab != nil {
			return _fgdab
		}
		switch _gdebe := _aedbe.(type) {
		case _e.StartElement:
			switch _gdebe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_egcgc.Wireframe = NewCT_Boolean()
				if _cfgabd := d.DecodeElement(_egcgc.Wireframe, &_gdebe); _cfgabd != nil {
					return _cfgabd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bfgaga := NewCT_SurfaceSer()
				if _degdf := d.DecodeElement(_bfgaga, &_gdebe); _degdf != nil {
					return _degdf
				}
				_egcgc.Ser = append(_egcgc.Ser, _bfgaga)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_egcgc.BandFmts = NewCT_BandFmts()
				if _faeda := d.DecodeElement(_egcgc.BandFmts, &_gdebe); _faeda != nil {
					return _faeda
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _gdebe.Name)
				if _fgaagg := d.Skip(); _fgaagg != nil {
					return _fgaagg
				}
			}
		case _e.EndElement:
			break _efde
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_bcfc := &CT_PictureStackUnit{}
	_bcfc.ValAttr = 0 + 1
	return _bcfc
}

func NewCT_PieChart() *CT_PieChart { _dbggge := &CT_PieChart{}; return _dbggge }

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_bgcc *CT_DispUnits) ValidateWithPath(path string) error {
	if _bgcc.Choice != nil {
		if _egag := _bgcc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _egag != nil {
			return _egag
		}
	}
	if _bgcc.DispUnitsLbl != nil {
		if _gefca := _bgcc.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _gefca != nil {
			return _gefca
		}
	}
	if _bgcc.ExtLst != nil {
		if _dfbf := _bgcc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfbf != nil {
			return _dfbf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_bdade *CT_TrendlineType) ValidateWithPath(path string) error {
	if _egdeg := _bdade.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _egdeg != nil {
		return _egdeg
	}
	return nil
}

func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_bcfe, _gbbgf := _b.ParseUint(s, 10, 16)
	if _gbbgf != nil {
		return ST_GapAmount{}, _gbbgf
	}
	_cbdgc := uint16(_bcfe)
	return ST_GapAmount{ST_GapAmountUShort: &_cbdgc}, nil
}

func (_beeeg *CT_PageSetup) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _beeeg.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.PaperSizeAttr)})
	}
	if _beeeg.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.PaperHeightAttr)})
	}
	if _beeeg.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.PaperWidthAttr)})
	}
	if _beeeg.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.FirstPageNumberAttr)})
	}
	if _beeeg.OrientationAttr != ST_PageSetupOrientationUnset {
		_acbd, _begb := _beeeg.OrientationAttr.MarshalXMLAttr(_e.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _begb != nil {
			return _begb
		}
		start.Attr = append(start.Attr, _acbd)
	}
	if _beeeg.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_beeeg.BlackAndWhiteAttr))})
	}
	if _beeeg.DraftAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_beeeg.DraftAttr))})
	}
	if _beeeg.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _bf.Sprintf("\u0025\u0064", _cadca(*_beeeg.UseFirstPageNumberAttr))})
	}
	if _beeeg.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.HorizontalDpiAttr)})
	}
	if _beeeg.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.VerticalDpiAttr)})
	}
	if _beeeg.CopiesAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _bf.Sprintf("\u0025\u0076", *_beeeg.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gcac *CT_Perspective) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gcac.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_gcac.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_egab ST_LegendPos) String() string {
	switch _egab {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}

type CT_BarDir struct{ ValAttr ST_BarDir }

func NewCT_Surface() *CT_Surface { _gcffb := &CT_Surface{}; return _gcffb }

func (_bbfee ST_PictureFormat) Validate() error { return _bbfee.ValidateWithPath("") }

func (_gebc *CT_LogBase) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gebc.ValAttr = 2
	for _, _febgd := range start.Attr {
		if _febgd.Name.Local == "\u0076\u0061\u006c" {
			_gaff, _ddeb := _b.ParseFloat(_febgd.Value, 64)
			if _ddeb != nil {
				return _ddeb
			}
			_gebc.ValAttr = _gaff
			continue
		}
	}
	for {
		_edbfa, _gbfd := d.Token()
		if _gbfd != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _gbfd)
		}
		if _afbgf, _cegd := _edbfa.(_e.EndElement); _cegd && _afbgf.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_Overlap() *CT_Overlap { _dgfe := &CT_Overlap{}; return _dgfe }

type ST_Grouping byte

type CT_ScatterSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_cb.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   []*CT_ErrBars
	XVal      *CT_AxDataSource
	YVal      *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

func (_deca *CT_DateAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deca.AxId = NewCT_UnsignedInt()
	_deca.Scaling = NewCT_Scaling()
	_deca.AxPos = NewCT_AxPos()
	_deca.CrossAx = NewCT_UnsignedInt()
_bgef:
	for {
		_cagcc, _cagcca := d.Token()
		if _cagcca != nil {
			return _cagcca
		}
		switch _ffcgg := _cagcc.(type) {
		case _e.StartElement:
			switch _ffcgg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _faedb := d.DecodeElement(_deca.AxId, &_ffcgg); _faedb != nil {
					return _faedb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _fbafd := d.DecodeElement(_deca.Scaling, &_ffcgg); _fbafd != nil {
					return _fbafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_deca.Delete = NewCT_Boolean()
				if _dfad := d.DecodeElement(_deca.Delete, &_ffcgg); _dfad != nil {
					return _dfad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _dead := d.DecodeElement(_deca.AxPos, &_ffcgg); _dead != nil {
					return _dead
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_deca.MajorGridlines = NewCT_ChartLines()
				if _cbaaf := d.DecodeElement(_deca.MajorGridlines, &_ffcgg); _cbaaf != nil {
					return _cbaaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_deca.MinorGridlines = NewCT_ChartLines()
				if _agab := d.DecodeElement(_deca.MinorGridlines, &_ffcgg); _agab != nil {
					return _agab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_deca.Title = NewCT_Title()
				if _ddgb := d.DecodeElement(_deca.Title, &_ffcgg); _ddgb != nil {
					return _ddgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_deca.NumFmt = NewCT_NumFmt()
				if _ggde := d.DecodeElement(_deca.NumFmt, &_ffcgg); _ggde != nil {
					return _ggde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_deca.MajorTickMark = NewCT_TickMark()
				if _gbfc := d.DecodeElement(_deca.MajorTickMark, &_ffcgg); _gbfc != nil {
					return _gbfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_deca.MinorTickMark = NewCT_TickMark()
				if _aged := d.DecodeElement(_deca.MinorTickMark, &_ffcgg); _aged != nil {
					return _aged
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_deca.TickLblPos = NewCT_TickLblPos()
				if _aafe := d.DecodeElement(_deca.TickLblPos, &_ffcgg); _aafe != nil {
					return _aafe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_deca.SpPr = _cb.NewCT_ShapeProperties()
				if _bga := d.DecodeElement(_deca.SpPr, &_ffcgg); _bga != nil {
					return _bga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_deca.TxPr = _cb.NewCT_TextBody()
				if _dccb := d.DecodeElement(_deca.TxPr, &_ffcgg); _dccb != nil {
					return _dccb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _ebcb := d.DecodeElement(_deca.CrossAx, &_ffcgg); _ebcb != nil {
					return _ebcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_deca.Choice = NewEG_AxSharedChoice()
				if _bffe := d.DecodeElement(&_deca.Choice.Crosses, &_ffcgg); _bffe != nil {
					return _bffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_deca.Choice = NewEG_AxSharedChoice()
				if _dafg := d.DecodeElement(&_deca.Choice.CrossesAt, &_ffcgg); _dafg != nil {
					return _dafg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_deca.Auto = NewCT_Boolean()
				if _dgcff := d.DecodeElement(_deca.Auto, &_ffcgg); _dgcff != nil {
					return _dgcff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_deca.LblOffset = NewCT_LblOffset()
				if _ebe := d.DecodeElement(_deca.LblOffset, &_ffcgg); _ebe != nil {
					return _ebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deca.BaseTimeUnit = NewCT_TimeUnit()
				if _ffca := d.DecodeElement(_deca.BaseTimeUnit, &_ffcgg); _ffca != nil {
					return _ffca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_deca.MajorUnit = NewCT_AxisUnit()
				if _fcdd := d.DecodeElement(_deca.MajorUnit, &_ffcgg); _fcdd != nil {
					return _fcdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deca.MajorTimeUnit = NewCT_TimeUnit()
				if _cfga := d.DecodeElement(_deca.MajorTimeUnit, &_ffcgg); _cfga != nil {
					return _cfga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_deca.MinorUnit = NewCT_AxisUnit()
				if _egbg := d.DecodeElement(_deca.MinorUnit, &_ffcgg); _egbg != nil {
					return _egbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deca.MinorTimeUnit = NewCT_TimeUnit()
				if _fdfd := d.DecodeElement(_deca.MinorTimeUnit, &_ffcgg); _fdfd != nil {
					return _fdfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deca.ExtLst = NewCT_ExtensionList()
				if _egbb := d.DecodeElement(_deca.ExtLst, &_ffcgg); _egbb != nil {
					return _egbb
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _ffcgg.Name)
				if _cabb := d.Skip(); _cabb != nil {
					return _cabb
				}
			}
		case _e.EndElement:
			break _bgef
		case _e.CharData:
		}
	}
	return nil
}

type CT_BubbleChart struct {
	VaryColors     *CT_Boolean
	Ser            []*CT_BubbleSer
	DLbls          *CT_DLbls
	Bubble3D       *CT_Boolean
	BubbleScale    *CT_BubbleScale
	ShowNegBubbles *CT_Boolean
	SizeRepresents *CT_SizeRepresents
	AxId           []*CT_UnsignedInt
	ExtLst         *CT_ExtensionList
}

func (_aabag ST_DLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_eceac := _e.Attr{}
	_eceac.Name = name
	switch _aabag {
	case ST_DLblPosUnset:
		_eceac.Value = ""
	case ST_DLblPosBestFit:
		_eceac.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_eceac.Value = "\u0062"
	case ST_DLblPosCtr:
		_eceac.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_eceac.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_eceac.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_eceac.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_eceac.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_eceac.Value = "\u0072"
	case ST_DLblPosT:
		_eceac.Value = "\u0074"
	}
	return _eceac, nil
}

type CT_Pie3DChart struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
	ExtLst     *CT_ExtensionList
}

func (_ffadg ST_ScatterStyle) String() string {
	switch _ffadg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_dged *CT_PictureOptions) ValidateWithPath(path string) error {
	if _dged.ApplyToFront != nil {
		if _afgee := _dged.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _afgee != nil {
			return _afgee
		}
	}
	if _dged.ApplyToSides != nil {
		if _ddgdb := _dged.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _ddgdb != nil {
			return _ddgdb
		}
	}
	if _dged.ApplyToEnd != nil {
		if _dccc := _dged.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _dccc != nil {
			return _dccc
		}
	}
	if _dged.PictureFormat != nil {
		if _fbge := _dged.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _fbge != nil {
			return _fbge
		}
	}
	if _dged.PictureStackUnit != nil {
		if _fbgc := _dged.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _fbgc != nil {
			return _fbgc
		}
	}
	return nil
}

type CT_PageSetup struct {
	PaperSizeAttr          *uint32
	PaperHeightAttr        *string
	PaperWidthAttr         *string
	FirstPageNumberAttr    *uint32
	OrientationAttr        ST_PageSetupOrientation
	BlackAndWhiteAttr      *bool
	DraftAttr              *bool
	UseFirstPageNumberAttr *bool
	HorizontalDpiAttr      *int32
	VerticalDpiAttr        *int32
	CopiesAttr             *uint32
}

// Validate validates the CT_NumFmt and its children
func (_decfg *CT_NumFmt) Validate() error {
	return _decfg.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}

type ST_BarGrouping byte

func NewCT_LblAlgn() *CT_LblAlgn { _ccce := &CT_LblAlgn{}; _ccce.ValAttr = ST_LblAlgn(1); return _ccce }

// Validate validates the CT_BandFmts and its children
func (_ced *CT_BandFmts) Validate() error {
	return _ced.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_aef *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _fde := _aef.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _fde != nil {
		return _fde
	}
	if _aef.Grouping != nil {
		if _gdg := _aef.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gdg != nil {
			return _gdg
		}
	}
	if _aef.VaryColors != nil {
		if _bee := _aef.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bee != nil {
			return _bee
		}
	}
	for _cfa, _feec := range _aef.Ser {
		if _afc := _feec.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cfa)); _afc != nil {
			return _afc
		}
	}
	if _aef.DLbls != nil {
		if _ceed := _aef.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ceed != nil {
			return _ceed
		}
	}
	if _aef.GapWidth != nil {
		if _caf := _aef.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _caf != nil {
			return _caf
		}
	}
	if _aef.GapDepth != nil {
		if _cbaa := _aef.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _cbaa != nil {
			return _cbaa
		}
	}
	if _aef.Shape != nil {
		if _dec := _aef.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _dec != nil {
			return _dec
		}
	}
	for _aaba, _cfc := range _aef.AxId {
		if _bedc := _cfc.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _aaba)); _bedc != nil {
			return _bedc
		}
	}
	if _aef.ExtLst != nil {
		if _efe := _aef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efe != nil {
			return _efe
		}
	}
	return nil
}

// Validate validates the CT_RotY and its children
func (_ccdbe *CT_RotY) Validate() error {
	return _ccdbe.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

func (_edcbc *ST_Thickness) ValidateWithPath(path string) error {
	_cagcb := []string{}
	if _edcbc.ST_ThicknessPercent != nil {
		_cagcb = append(_cagcb, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _edcbc.Uint32 != nil {
		_cagcb = append(_cagcb, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_cagcb) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cagcb)
	}
	return nil
}

func (_aacbg *CT_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aacbg.ValAttr != ST_GroupingUnset {
		_efef, _aaac := _aacbg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _aaac != nil {
			return _aaac
		}
		start.Attr = append(start.Attr, _efef)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gceac ST_Grouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aebdg := _e.Attr{}
	_aebdg.Name = name
	switch _gceac {
	case ST_GroupingUnset:
		_aebdg.Value = ""
	case ST_GroupingPercentStacked:
		_aebdg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_aebdg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_aebdg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _aebdg, nil
}

func (_ggcdb *ST_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bebae, _fcebb := d.Token()
	if _fcebb != nil {
		return _fcebb
	}
	if _ecdf, _bdccd := _bebae.(_e.EndElement); _bdccd && _ecdf.Name == start.Name {
		*_ggcdb = 1
		return nil
	}
	if _gcdcd, _bdeefd := _bebae.(_e.CharData); !_bdeefd {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bebae)
	} else {
		switch string(_gcdcd) {
		case "":
			*_ggcdb = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_ggcdb = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_ggcdb = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ggcdb = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_ggcdb = 4
		}
	}
	_bebae, _fcebb = d.Token()
	if _fcebb != nil {
		return _fcebb
	}
	if _eefce, _fecdb := _bebae.(_e.EndElement); _fecdb && _eefce.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bebae)
}

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_dgea *CT_Grouping) ValidateWithPath(path string) error {
	if _bcdf := _dgea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bcdf != nil {
		return _bcdf
	}
	return nil
}

func (_cead *ST_HoleSize) ValidateWithPath(path string) error {
	_dgbaad := []string{}
	if _cead.ST_HoleSizePercent != nil {
		_dgbaad = append(_dgbaad, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _cead.ST_HoleSizeUByte != nil {
		_dgbaad = append(_dgbaad, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_dgbaad) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dgbaad)
	}
	return nil
}

type CT_SurfaceChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

func (_efdec *ST_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgbc, _ffeba := d.Token()
	if _ffeba != nil {
		return _ffeba
	}
	if _ffebc, _dfgfb := _fgbc.(_e.EndElement); _dfgfb && _ffebc.Name == start.Name {
		*_efdec = 1
		return nil
	}
	if _dfgc, _acafd := _fgbc.(_e.CharData); !_acafd {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgbc)
	} else {
		switch string(_dfgc) {
		case "":
			*_efdec = 0
		case "\u0064\u0061\u0079\u0073":
			*_efdec = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_efdec = 2
		case "\u0079\u0065\u0061r\u0073":
			*_efdec = 3
		}
	}
	_fgbc, _ffeba = d.Token()
	if _ffeba != nil {
		return _ffeba
	}
	if _aegd, _gfegd := _fgbc.(_e.EndElement); _gfegd && _aegd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgbc)
}

func (_fddee *CT_DepthPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _daab := range start.Attr {
		if _daab.Name.Local == "\u0076\u0061\u006c" {
			_ecae, _acfb := ParseUnionST_DepthPercent(_daab.Value)
			if _acfb != nil {
				return _acfb
			}
			_fddee.ValAttr = &_ecae
			continue
		}
	}
	for {
		_agba, _cafaa := d.Token()
		if _cafaa != nil {
			return _bf.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _cafaa)
		}
		if _daca, _ebf := _agba.(_e.EndElement); _ebf && _daca.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_NumDataSource() *CT_NumDataSource {
	_ggeg := &CT_NumDataSource{}
	_ggeg.Choice = NewCT_NumDataSourceChoice()
	return _ggeg
}

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"

func (_adfgd *ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_adfgd.CT_ChartSpace = *NewCT_ChartSpace()
_dcebe:
	for {
		_feaed, _aedgd := d.Token()
		if _aedgd != nil {
			return _aedgd
		}
		switch _faaaf := _feaed.(type) {
		case _e.StartElement:
			switch _faaaf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_adfgd.Date1904 = NewCT_Boolean()
				if _dddgc := d.DecodeElement(_adfgd.Date1904, &_faaaf); _dddgc != nil {
					return _dddgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_adfgd.Lang = NewCT_TextLanguageID()
				if _abage := d.DecodeElement(_adfgd.Lang, &_faaaf); _abage != nil {
					return _abage
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_adfgd.RoundedCorners = NewCT_Boolean()
				if _fabgbe := d.DecodeElement(_adfgd.RoundedCorners, &_faaaf); _fabgbe != nil {
					return _fabgbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_adfgd.Style = NewCT_Style()
				if _afddg := d.DecodeElement(_adfgd.Style, &_faaaf); _afddg != nil {
					return _afddg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_adfgd.ClrMapOvr = _cb.NewCT_ColorMapping()
				if _bbcb := d.DecodeElement(_adfgd.ClrMapOvr, &_faaaf); _bbcb != nil {
					return _bbcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_adfgd.PivotSource = NewCT_PivotSource()
				if _gfdbf := d.DecodeElement(_adfgd.PivotSource, &_faaaf); _gfdbf != nil {
					return _gfdbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_adfgd.Protection = NewCT_Protection()
				if _befdfg := d.DecodeElement(_adfgd.Protection, &_faaaf); _befdfg != nil {
					return _befdfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _bcbe := d.DecodeElement(_adfgd.Chart, &_faaaf); _bcbe != nil {
					return _bcbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_adfgd.SpPr = _cb.NewCT_ShapeProperties()
				if _gebfc := d.DecodeElement(_adfgd.SpPr, &_faaaf); _gebfc != nil {
					return _gebfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_adfgd.TxPr = _cb.NewCT_TextBody()
				if _gcfec := d.DecodeElement(_adfgd.TxPr, &_faaaf); _gcfec != nil {
					return _gcfec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_adfgd.ExternalData = NewCT_ExternalData()
				if _geagf := d.DecodeElement(_adfgd.ExternalData, &_faaaf); _geagf != nil {
					return _geagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_adfgd.PrintSettings = NewCT_PrintSettings()
				if _dbdbg := d.DecodeElement(_adfgd.PrintSettings, &_faaaf); _dbdbg != nil {
					return _dbdbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_adfgd.UserShapes = NewCT_RelId()
				if _fddc := d.DecodeElement(_adfgd.UserShapes, &_faaaf); _fddc != nil {
					return _fddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adfgd.ExtLst = NewCT_ExtensionList()
				if _deefd := d.DecodeElement(_adfgd.ExtLst, &_faaaf); _deefd != nil {
					return _deefd
				}
			default:
				_ba.Log("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _faaaf.Name)
				if _deab := d.Skip(); _deab != nil {
					return _deab
				}
			}
		case _e.EndElement:
			break _dcebe
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_ggfd *CT_Line3DChart) ValidateWithPath(path string) error {
	if _bbgea := _ggfd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bbgea != nil {
		return _bbgea
	}
	if _ggfd.VaryColors != nil {
		if _agedc := _ggfd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _agedc != nil {
			return _agedc
		}
	}
	for _ffada, _bacef := range _ggfd.Ser {
		if _gdeg := _bacef.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ffada)); _gdeg != nil {
			return _gdeg
		}
	}
	if _ggfd.DLbls != nil {
		if _ebfd := _ggfd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebfd != nil {
			return _ebfd
		}
	}
	if _ggfd.DropLines != nil {
		if _cgcd := _ggfd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cgcd != nil {
			return _cgcd
		}
	}
	if _ggfd.GapDepth != nil {
		if _cgda := _ggfd.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _cgda != nil {
			return _cgda
		}
	}
	for _bbgag, _fbbgg := range _ggfd.AxId {
		if _baecd := _fbbgg.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bbgag)); _baecd != nil {
			return _baecd
		}
	}
	if _ggfd.ExtLst != nil {
		if _ebdeb := _ggfd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ebdeb != nil {
			return _ebdeb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_fabgc *CT_ErrValType) ValidateWithPath(path string) error {
	if _fgcg := _fabgc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgcg != nil {
		return _fgcg
	}
	return nil
}

func (_ebgabb *ST_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deebb, _gggc := d.Token()
	if _gggc != nil {
		return _gggc
	}
	if _cgbff, _bfgac := _deebb.(_e.EndElement); _bfgac && _cgbff.Name == start.Name {
		*_ebgabb = 1
		return nil
	}
	if _ebgd, _dgdbc := _deebb.(_e.CharData); !_dgdbc {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _deebb)
	} else {
		switch string(_ebgd) {
		case "":
			*_ebgabb = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_ebgabb = 1
		case "\u0073\u0074\u0061c\u006b":
			*_ebgabb = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_ebgabb = 3
		}
	}
	_deebb, _gggc = d.Token()
	if _gggc != nil {
		return _gggc
	}
	if _efdf, _dcdff := _deebb.(_e.EndElement); _dcdff && _efdf.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _deebb)
}

type CT_LegendEntry struct {
	Idx    *CT_UnsignedInt
	Choice *CT_LegendEntryChoice
	ExtLst *CT_ExtensionList
}

func (_afag ST_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_afag.String(), start)
}

func (_gcgedf ST_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gcgedf.String(), start)
}

func (_becfa ST_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_becfa.String(), start)
}

func NewCT_ErrBars() *CT_ErrBars {
	_fcaae := &CT_ErrBars{}
	_fcaae.ErrBarType = NewCT_ErrBarType()
	_fcaae.ErrValType = NewCT_ErrValType()
	return _fcaae
}

func (_aeagaa ST_ErrDir) String() string {
	switch _aeagaa {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}

func (_adgc *CT_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_aedc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_adgc.Idx, _aedc)
	if _adgc.Choice != nil {
		_adgc.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _adgc.ExtLst != nil {
		_egfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adgc.ExtLst, _egfg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_agcdf *CT_UnsignedInt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _afbdf := range start.Attr {
		if _afbdf.Name.Local == "\u0076\u0061\u006c" {
			_eaagb, _eaafd := _b.ParseUint(_afbdf.Value, 10, 32)
			if _eaafd != nil {
				return _eaafd
			}
			_agcdf.ValAttr = uint32(_eaagb)
			continue
		}
	}
	for {
		_afba, _cffgg := d.Token()
		if _cffgg != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _cffgg)
		}
		if _dadbe, _fedb := _afba.(_e.EndElement); _fedb && _dadbe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_dgecb ST_Orientation) Validate() error { return _dgecb.ValidateWithPath("") }

// Validate validates the CT_Extension and its children
func (_gccc *CT_Extension) Validate() error {
	return _gccc.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_gcbcd *CT_PivotSource) ValidateWithPath(path string) error {
	if _agfeg := _gcbcd.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _agfeg != nil {
		return _agfeg
	}
	for _eaccb, _bbfd := range _gcbcd.ExtLst {
		if _agdc := _bbfd.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _eaccb)); _agdc != nil {
			return _agdc
		}
	}
	return nil
}

func (_gdegc ST_AxPos) ValidateWithPath(path string) error {
	switch _gdegc {
	case 0, 1, 2, 3, 4:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdegc))
	}
	return nil
}

func (_afbc *CT_Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_afbc.PlotArea = NewCT_PlotArea()
_gfcc:
	for {
		_eba, _bfede := d.Token()
		if _bfede != nil {
			return _bfede
		}
		switch _fgda := _eba.(type) {
		case _e.StartElement:
			switch _fgda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_afbc.Title = NewCT_Title()
				if _abd := d.DecodeElement(_afbc.Title, &_fgda); _abd != nil {
					return _abd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_afbc.AutoTitleDeleted = NewCT_Boolean()
				if _gadf := d.DecodeElement(_afbc.AutoTitleDeleted, &_fgda); _gadf != nil {
					return _gadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_afbc.PivotFmts = NewCT_PivotFmts()
				if _fbdb := d.DecodeElement(_afbc.PivotFmts, &_fgda); _fbdb != nil {
					return _fbdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_afbc.View3D = NewCT_View3D()
				if _afge := d.DecodeElement(_afbc.View3D, &_fgda); _afge != nil {
					return _afge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_afbc.Floor = NewCT_Surface()
				if _dgce := d.DecodeElement(_afbc.Floor, &_fgda); _dgce != nil {
					return _dgce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_afbc.SideWall = NewCT_Surface()
				if _cggg := d.DecodeElement(_afbc.SideWall, &_fgda); _cggg != nil {
					return _cggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_afbc.BackWall = NewCT_Surface()
				if _afad := d.DecodeElement(_afbc.BackWall, &_fgda); _afad != nil {
					return _afad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _cfgc := d.DecodeElement(_afbc.PlotArea, &_fgda); _cfgc != nil {
					return _cfgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_afbc.Legend = NewCT_Legend()
				if _aagc := d.DecodeElement(_afbc.Legend, &_fgda); _aagc != nil {
					return _aagc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_afbc.PlotVisOnly = NewCT_Boolean()
				if _bbec := d.DecodeElement(_afbc.PlotVisOnly, &_fgda); _bbec != nil {
					return _bbec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_afbc.DispBlanksAs = NewCT_DispBlanksAs()
				if _abae := d.DecodeElement(_afbc.DispBlanksAs, &_fgda); _abae != nil {
					return _abae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_afbc.ShowDLblsOverMax = NewCT_Boolean()
				if _dge := d.DecodeElement(_afbc.ShowDLblsOverMax, &_fgda); _dge != nil {
					return _dge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afbc.ExtLst = NewCT_ExtensionList()
				if _edfg := d.DecodeElement(_afbc.ExtLst, &_fgda); _edfg != nil {
					return _edfg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fgda.Name)
				if _bbecc := d.Skip(); _bbecc != nil {
					return _bbecc
				}
			}
		case _e.EndElement:
			break _gfcc
		case _e.CharData:
		}
	}
	return nil
}

type CT_Surface struct {
	Thickness      *CT_Thickness
	SpPr           *_cb.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	ExtLst         *CT_ExtensionList
}

func (_acdacf ST_ErrValType) ValidateWithPath(path string) error {
	switch _acdacf {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acdacf))
	}
	return nil
}

func (_ddb *CT_BandFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ddbd:
	for {
		_fefe, _bfcb := d.Token()
		if _bfcb != nil {
			return _bfcb
		}
		switch _adbb := _fefe.(type) {
		case _e.StartElement:
			switch _adbb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_gede := NewCT_BandFmt()
				if _cage := d.DecodeElement(_gede, &_adbb); _cage != nil {
					return _cage
				}
				_ddb.BandFmt = append(_ddb.BandFmt, _gede)
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _adbb.Name)
				if _bfec := d.Skip(); _bfec != nil {
					return _bfec
				}
			}
		case _e.EndElement:
			break _ddbd
		case _e.CharData:
		}
	}
	return nil
}

func (_cbgbe *CT_SurfaceSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbgbe.Idx = NewCT_UnsignedInt()
	_cbgbe.Order = NewCT_UnsignedInt()
_ecace:
	for {
		_efce, _adga := d.Token()
		if _adga != nil {
			return _adga
		}
		switch _ecggd := _efce.(type) {
		case _e.StartElement:
			switch _ecggd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cbfd := d.DecodeElement(_cbgbe.Idx, &_ecggd); _cbfd != nil {
					return _cbfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eddff := d.DecodeElement(_cbgbe.Order, &_ecggd); _eddff != nil {
					return _eddff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cbgbe.Tx = NewCT_SerTx()
				if _dgffc := d.DecodeElement(_cbgbe.Tx, &_ecggd); _dgffc != nil {
					return _dgffc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cbgbe.SpPr = _cb.NewCT_ShapeProperties()
				if _gdagd := d.DecodeElement(_cbgbe.SpPr, &_ecggd); _gdagd != nil {
					return _gdagd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_cbgbe.Cat = NewCT_AxDataSource()
				if _gfcda := d.DecodeElement(_cbgbe.Cat, &_ecggd); _gfcda != nil {
					return _gfcda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_cbgbe.Val = NewCT_NumDataSource()
				if _aebe := d.DecodeElement(_cbgbe.Val, &_ecggd); _aebe != nil {
					return _aebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbgbe.ExtLst = NewCT_ExtensionList()
				if _ddefae := d.DecodeElement(_cbgbe.ExtLst, &_ecggd); _ddefae != nil {
					return _ddefae
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _ecggd.Name)
				if _ddcf := d.Skip(); _ddcf != nil {
					return _ddcf
				}
			}
		case _e.EndElement:
			break _ecace
		case _e.CharData:
		}
	}
	return nil
}

func (_agbf *CT_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agbf.ValAttr = ST_LblAlgn(1)
	for _, _aebc := range start.Attr {
		if _aebc.Name.Local == "\u0076\u0061\u006c" {
			_agbf.ValAttr.UnmarshalXMLAttr(_aebc)
			continue
		}
	}
	for {
		_fac, _bdfgf := d.Token()
		if _bdfgf != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _bdfgf)
		}
		if _ccgfb, _dgdf := _fac.(_e.EndElement); _dgdf && _ccgfb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_aeef *CT_Order) ValidateWithPath(path string) error {
	if _aeef.ValAttr != nil {
		if *_aeef.ValAttr < 2 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_aeef.ValAttr)
		}
		if *_aeef.ValAttr > 6 {
			return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_aeef.ValAttr)
		}
	}
	return nil
}

type CT_View3D struct {
	RotX         *CT_RotX
	HPercent     *CT_HPercent
	RotY         *CT_RotY
	DepthPercent *CT_DepthPercent
	RAngAx       *CT_Boolean
	Perspective  *CT_Perspective
	ExtLst       *CT_ExtensionList
}

func (_cgabbb *ST_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdged, _debab := d.Token()
	if _debab != nil {
		return _debab
	}
	if _fcec, _ggedd := _gdged.(_e.EndElement); _ggedd && _fcec.Name == start.Name {
		*_cgabbb = 1
		return nil
	}
	if _efcf, _gaadb := _gdged.(_e.CharData); !_gaadb {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdged)
	} else {
		switch string(_efcf) {
		case "":
			*_cgabbb = 0
		case "\u0063\u0072\u006fs\u0073":
			*_cgabbb = 1
		case "\u0069\u006e":
			*_cgabbb = 2
		case "\u006e\u006f\u006e\u0065":
			*_cgabbb = 3
		case "\u006f\u0075\u0074":
			*_cgabbb = 4
		}
	}
	_gdged, _debab = d.Token()
	if _debab != nil {
		return _debab
	}
	if _aadbd, _acaf := _gdged.(_e.EndElement); _acaf && _aadbd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdged)
}

func (_ged *CT_AxDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ged.MultiLvlStrRef != nil {
		_dadc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_ged.MultiLvlStrRef, _dadc)
	}
	if _ged.NumRef != nil {
		_fca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_ged.NumRef, _fca)
	}
	if _ged.NumLit != nil {
		_dcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_ged.NumLit, _dcb)
	}
	if _ged.StrRef != nil {
		_egd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_ged.StrRef, _egd)
	}
	if _ged.StrLit != nil {
		_dda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_ged.StrLit, _dda)
	}
	return nil
}

type CT_CrossBetween struct{ ValAttr ST_CrossBetween }

// Validate validates the CT_PivotFmt and its children
func (_bcef *CT_PivotFmt) Validate() error {
	return _bcef.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}

func NewCT_Pie3DChart() *CT_Pie3DChart { _defdb := &CT_Pie3DChart{}; return _defdb }

func (_fgeef *ST_ErrValType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fgeef = 0
	case "\u0063\u0075\u0073\u0074":
		*_fgeef = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_fgeef = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_fgeef = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_fgeef = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_fgeef = 5
	}
	return nil
}

func (_bfeg ST_DepthPercent) String() string {
	if _bfeg.ST_DepthPercentWithSymbol != nil {
		return _bf.Sprintf("\u0025\u0076", *_bfeg.ST_DepthPercentWithSymbol)
	}
	if _bfeg.ST_DepthPercentUShort != nil {
		return _bf.Sprintf("\u0025\u0076", *_bfeg.ST_DepthPercentUShort)
	}
	return ""
}

type CT_DepthPercent struct{ ValAttr *ST_DepthPercent }

type CT_Crosses struct{ ValAttr ST_Crosses }

func (_cdada *ST_BubbleScale) ValidateWithPath(path string) error {
	_eecag := []string{}
	if _cdada.ST_BubbleScalePercent != nil {
		_eecag = append(_eecag, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _cdada.ST_BubbleScaleUInt != nil {
		_eecag = append(_eecag, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_eecag) > 1 {
		return _bf.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _eecag)
	}
	return nil
}

func (_gaafd *CT_UpDownBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gaafd.GapWidth != nil {
		_adgff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_gaafd.GapWidth, _adgff)
	}
	if _gaafd.UpBars != nil {
		_agbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_gaafd.UpBars, _agbfd)
	}
	if _gaafd.DownBars != nil {
		_dbceg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_gaafd.DownBars, _dbceg)
	}
	if _gaafd.ExtLst != nil {
		_daeggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gaafd.ExtLst, _daeggc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eaabg ST_TimeUnit) String() string {
	switch _eaabg {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}

// Validate validates the CT_OfPieType and its children
func (_caffg *CT_OfPieType) Validate() error {
	return _caffg.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}

func (_abgae *EG_AxShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abgae.AxId = NewCT_UnsignedInt()
	_abgae.Scaling = NewCT_Scaling()
	_abgae.AxPos = NewCT_AxPos()
	_abgae.CrossAx = NewCT_UnsignedInt()
_dgdfc:
	for {
		_faffd, _aeda := d.Token()
		if _aeda != nil {
			return _aeda
		}
		switch _cddbe := _faffd.(type) {
		case _e.StartElement:
			switch _cddbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _dbedaa := d.DecodeElement(_abgae.AxId, &_cddbe); _dbedaa != nil {
					return _dbedaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _aaffe := d.DecodeElement(_abgae.Scaling, &_cddbe); _aaffe != nil {
					return _aaffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_abgae.Delete = NewCT_Boolean()
				if _ddbfd := d.DecodeElement(_abgae.Delete, &_cddbe); _ddbfd != nil {
					return _ddbfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _acegg := d.DecodeElement(_abgae.AxPos, &_cddbe); _acegg != nil {
					return _acegg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_abgae.MajorGridlines = NewCT_ChartLines()
				if _eegfa := d.DecodeElement(_abgae.MajorGridlines, &_cddbe); _eegfa != nil {
					return _eegfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_abgae.MinorGridlines = NewCT_ChartLines()
				if _afdcd := d.DecodeElement(_abgae.MinorGridlines, &_cddbe); _afdcd != nil {
					return _afdcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_abgae.Title = NewCT_Title()
				if _bcada := d.DecodeElement(_abgae.Title, &_cddbe); _bcada != nil {
					return _bcada
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_abgae.NumFmt = NewCT_NumFmt()
				if _cacg := d.DecodeElement(_abgae.NumFmt, &_cddbe); _cacg != nil {
					return _cacg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_abgae.MajorTickMark = NewCT_TickMark()
				if _edff := d.DecodeElement(_abgae.MajorTickMark, &_cddbe); _edff != nil {
					return _edff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_abgae.MinorTickMark = NewCT_TickMark()
				if _cbcab := d.DecodeElement(_abgae.MinorTickMark, &_cddbe); _cbcab != nil {
					return _cbcab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_abgae.TickLblPos = NewCT_TickLblPos()
				if _bdfce := d.DecodeElement(_abgae.TickLblPos, &_cddbe); _bdfce != nil {
					return _bdfce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abgae.SpPr = _cb.NewCT_ShapeProperties()
				if _dffc := d.DecodeElement(_abgae.SpPr, &_cddbe); _dffc != nil {
					return _dffc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_abgae.TxPr = _cb.NewCT_TextBody()
				if _ddcgc := d.DecodeElement(_abgae.TxPr, &_cddbe); _ddcgc != nil {
					return _ddcgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _cceef := d.DecodeElement(_abgae.CrossAx, &_cddbe); _cceef != nil {
					return _cceef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_abgae.Choice = NewEG_AxSharedChoice()
				if _eddee := d.DecodeElement(&_abgae.Choice.Crosses, &_cddbe); _eddee != nil {
					return _eddee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_abgae.Choice = NewEG_AxSharedChoice()
				if _cgdf := d.DecodeElement(&_abgae.Choice.CrossesAt, &_cddbe); _cgdf != nil {
					return _cgdf
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cddbe.Name)
				if _gdegd := d.Skip(); _gdegd != nil {
					return _gdegd
				}
			}
		case _e.EndElement:
			break _dgdfc
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_gecgc := &CT_NumDataSourceChoice{}
	return _gecgc
}

// Validate validates the CT_TextLanguageID and its children
func (_bded *CT_TextLanguageID) Validate() error {
	return _bded.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}

type CT_PictureStackUnit struct{ ValAttr float64 }

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_afga *CT_StrData) ValidateWithPath(path string) error {
	if _afga.PtCount != nil {
		if _debec := _afga.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _debec != nil {
			return _debec
		}
	}
	for _gebcc, _eegb := range _afga.Pt {
		if _acceee := _eegb.ValidateWithPath(_bf.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _gebcc)); _acceee != nil {
			return _acceee
		}
	}
	if _afga.ExtLst != nil {
		if _abadf := _afga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abadf != nil {
			return _abadf
		}
	}
	return nil
}

type Chart struct{ CT_RelId }

// Validate validates the CT_PieChart and its children
func (_bbad *CT_PieChart) Validate() error {
	return _bbad.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_DoughnutChart and its children
func (_abbg *CT_DoughnutChart) Validate() error {
	return _abbg.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}

func NewCT_Order() *CT_Order { _cecb := &CT_Order{}; return _cecb }

type CT_Lvl struct{ Pt []*CT_StrVal }

func (_gffe *CT_FirstSliceAng) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _acfe := range start.Attr {
		if _acfe.Name.Local == "\u0076\u0061\u006c" {
			_agfb, _dcaef := _b.ParseUint(_acfe.Value, 10, 16)
			if _dcaef != nil {
				return _dcaef
			}
			_cdbcc := uint16(_agfb)
			_gffe.ValAttr = &_cdbcc
			continue
		}
	}
	for {
		_dbea, _gfebc := d.Token()
		if _gfebc != nil {
			return _bf.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _gfebc)
		}
		if _cfdcf, _daagg := _dbea.(_e.EndElement); _daagg && _cfdcf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gfgfb ST_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gfgfb.String(), start)
}

func NewCT_Thickness() *CT_Thickness { _edfa := &CT_Thickness{}; return _edfa }

func (_aegfb *ST_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbadg, _dgcaf := d.Token()
	if _dgcaf != nil {
		return _dgcaf
	}
	if _dagfc, _ddgdd := _cbadg.(_e.EndElement); _ddgdd && _dagfc.Name == start.Name {
		*_aegfb = 1
		return nil
	}
	if _aegbb, _bebe := _cbadg.(_e.CharData); !_bebe {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbadg)
	} else {
		switch string(_aegbb) {
		case "":
			*_aegfb = 0
		case "\u0070\u0069\u0065":
			*_aegfb = 1
		case "\u0062\u0061\u0072":
			*_aegfb = 2
		}
	}
	_cbadg, _dgcaf = d.Token()
	if _dgcaf != nil {
		return _dgcaf
	}
	if _egdg, _faeedg := _cbadg.(_e.EndElement); _faeedg && _egdg.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbadg)
}

func (_fcga *CT_ScatterChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fcga.ScatterStyle = NewCT_ScatterStyle()
_bdeef:
	for {
		_bggb, _fgcgc := d.Token()
		if _fgcgc != nil {
			return _fgcgc
		}
		switch _fggfe := _bggb.(type) {
		case _e.StartElement:
			switch _fggfe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _gbcd := d.DecodeElement(_fcga.ScatterStyle, &_fggfe); _gbcd != nil {
					return _gbcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fcga.VaryColors = NewCT_Boolean()
				if _cfbae := d.DecodeElement(_fcga.VaryColors, &_fggfe); _cfbae != nil {
					return _cfbae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ebbcb := NewCT_ScatterSer()
				if _egge := d.DecodeElement(_ebbcb, &_fggfe); _egge != nil {
					return _egge
				}
				_fcga.Ser = append(_fcga.Ser, _ebbcb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fcga.DLbls = NewCT_DLbls()
				if _dggaa := d.DecodeElement(_fcga.DLbls, &_fggfe); _dggaa != nil {
					return _dggaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bcgbe := NewCT_UnsignedInt()
				if _begaa := d.DecodeElement(_bcgbe, &_fggfe); _begaa != nil {
					return _begaa
				}
				_fcga.AxId = append(_fcga.AxId, _bcgbe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcga.ExtLst = NewCT_ExtensionList()
				if _agbd := d.DecodeElement(_fcga.ExtLst, &_fggfe); _agbd != nil {
					return _agbd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fggfe.Name)
				if _ebddf := d.Skip(); _ebddf != nil {
					return _ebddf
				}
			}
		case _e.EndElement:
			break _bdeef
		case _e.CharData:
		}
	}
	return nil
}

type CT_TimeUnit struct{ ValAttr ST_TimeUnit }

// Validate validates the CT_SplitType and its children
func (_gcbbg *CT_SplitType) Validate() error {
	return _gcbbg.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

func (_afcdc ST_BarGrouping) Validate() error { return _afcdc.ValidateWithPath("") }

// Validate validates the EG_AxSharedChoice and its children
func (_ffefe *EG_AxSharedChoice) Validate() error {
	return _ffefe.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}

func NewCT_Trendline() *CT_Trendline {
	_egbgg := &CT_Trendline{}
	_egbgg.TrendlineType = NewCT_TrendlineType()
	return _egbgg
}

func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_bddg, _cbgd := _b.ParseInt(s, 10, 8)
	if _cbgd != nil {
		return ST_Overlap{}, _cbgd
	}
	_adcg := int8(_bddg)
	return ST_Overlap{ST_OverlapByte: &_adcg}, nil
}

func (_ccaac ST_GapAmount) String() string {
	if _ccaac.ST_GapAmountPercent != nil {
		return _bf.Sprintf("\u0025\u0076", *_ccaac.ST_GapAmountPercent)
	}
	if _ccaac.ST_GapAmountUShort != nil {
		return _bf.Sprintf("\u0025\u0076", *_ccaac.ST_GapAmountUShort)
	}
	return ""
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

func NewCT_Tx() *CT_Tx { _aeecc := &CT_Tx{}; _aeecc.Choice = NewCT_TxChoice(); return _aeecc }

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_efbgb *CT_ScatterChart) ValidateWithPath(path string) error {
	if _eggd := _efbgb.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _eggd != nil {
		return _eggd
	}
	if _efbgb.VaryColors != nil {
		if _abee := _efbgb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _abee != nil {
			return _abee
		}
	}
	for _fegce, _caeb := range _efbgb.Ser {
		if _cdeaf := _caeb.ValidateWithPath(_bf.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fegce)); _cdeaf != nil {
			return _cdeaf
		}
	}
	if _efbgb.DLbls != nil {
		if _eaga := _efbgb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _eaga != nil {
			return _eaga
		}
	}
	for _dfdd, _bagg := range _efbgb.AxId {
		if _gbdb := _bagg.ValidateWithPath(_bf.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _dfdd)); _gbdb != nil {
			return _gbdb
		}
	}
	if _efbgb.ExtLst != nil {
		if _dcbdec := _efbgb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcbdec != nil {
			return _dcbdec
		}
	}
	return nil
}

func (_gagff *CT_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _gagff.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

// Validate validates the Group_DLbls and its children
func (_fcbeb *Group_DLbls) Validate() error {
	return _fcbeb.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_bbcf *CT_Tx) ValidateWithPath(path string) error {
	if _eabge := _bbcf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _eabge != nil {
		return _eabge
	}
	return nil
}

func (_ffabb *CT_UpDownBar) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_adcee:
	for {
		_fdcag, _dbcd := d.Token()
		if _dbcd != nil {
			return _dbcd
		}
		switch _dbceb := _fdcag.(type) {
		case _e.StartElement:
			switch _dbceb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ffabb.SpPr = _cb.NewCT_ShapeProperties()
				if _bgcd := d.DecodeElement(_ffabb.SpPr, &_dbceb); _bgcd != nil {
					return _bgcd
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _dbceb.Name)
				if _dcceg := d.Skip(); _dcceg != nil {
					return _dcceg
				}
			}
		case _e.EndElement:
			break _adcee
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_abdad *CT_Style) ValidateWithPath(path string) error {
	if _abdad.ValAttr < 1 {
		return _bf.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _abdad.ValAttr)
	}
	if _abdad.ValAttr > 48 {
		return _bf.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _abdad.ValAttr)
	}
	return nil
}

func (_dcabc *CT_ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dcabc.Date1904 != nil {
		_agd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_dcabc.Date1904, _agd)
	}
	if _dcabc.Lang != nil {
		_fafc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_dcabc.Lang, _fafc)
	}
	if _dcabc.RoundedCorners != nil {
		_eeba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_dcabc.RoundedCorners, _eeba)
	}
	if _dcabc.Style != nil {
		_deace := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_dcabc.Style, _deace)
	}
	if _dcabc.ClrMapOvr != nil {
		_ddfed := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_dcabc.ClrMapOvr, _ddfed)
	}
	if _dcabc.PivotSource != nil {
		_bdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_dcabc.PivotSource, _bdd)
	}
	if _dcabc.Protection != nil {
		_aeag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_dcabc.Protection, _aeag)
	}
	_bdbbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_dcabc.Chart, _bdbbe)
	if _dcabc.SpPr != nil {
		_gcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcabc.SpPr, _gcd)
	}
	if _dcabc.TxPr != nil {
		_ecea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcabc.TxPr, _ecea)
	}
	if _dcabc.ExternalData != nil {
		_ebbgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_dcabc.ExternalData, _ebbgg)
	}
	if _dcabc.PrintSettings != nil {
		_gegc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_dcabc.PrintSettings, _gegc)
	}
	if _dcabc.UserShapes != nil {
		_eaed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_dcabc.UserShapes, _eaed)
	}
	if _dcabc.ExtLst != nil {
		_cbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcabc.ExtLst, _cbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gbecc *ST_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dgeca, _aedbaa := d.Token()
	if _aedbaa != nil {
		return _aedbaa
	}
	if _afbf, _gdaf := _dgeca.(_e.EndElement); _gdaf && _afbf.Name == start.Name {
		*_gbecc = 1
		return nil
	}
	if _efacc, _caagb := _dgeca.(_e.CharData); !_caagb {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgeca)
	} else {
		switch string(_efacc) {
		case "":
			*_gbecc = 0
		case "\u0063\u0074\u0072":
			*_gbecc = 1
		case "\u006c":
			*_gbecc = 2
		case "\u0072":
			*_gbecc = 3
		}
	}
	_dgeca, _aedbaa = d.Token()
	if _aedbaa != nil {
		return _aedbaa
	}
	if _fgegg, _cfgee := _dgeca.(_e.EndElement); _cfgee && _fgegg.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgeca)
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

func (_eecg *CT_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eecg.ValAttr != ST_BarGroupingUnset {
		_ggbd, _fccc := _eecg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fccc != nil {
			return _fccc
		}
		start.Attr = append(start.Attr, _ggbd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fbecd *ST_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fdab, _dgecc := d.Token()
	if _dgecc != nil {
		return _dgecc
	}
	if _gabaag, _gafbb := _fdab.(_e.EndElement); _gafbb && _gabaag.Name == start.Name {
		*_fbecd = 1
		return nil
	}
	if _ccfec, _dbfbc := _fdab.(_e.CharData); !_dbfbc {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdab)
	} else {
		switch string(_ccfec) {
		case "":
			*_fbecd = 0
		case "\u0068\u0069\u0067\u0068":
			*_fbecd = 1
		case "\u006c\u006f\u0077":
			*_fbecd = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_fbecd = 3
		case "\u006e\u006f\u006e\u0065":
			*_fbecd = 4
		}
	}
	_fdab, _dgecc = d.Token()
	if _dgecc != nil {
		return _dgecc
	}
	if _gecafd, _cbac := _fdab.(_e.EndElement); _cbac && _gecafd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdab)
}

func (_agdgef ST_SplitType) String() string {
	switch _agdgef {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}

func NewCT_Scaling() *CT_Scaling { _cdgfg := &CT_Scaling{}; return _cdgfg }

func NewCT_HoleSize() *CT_HoleSize { _ecge := &CT_HoleSize{}; return _ecge }

func (_fcacd ST_BarDir) Validate() error { return _fcacd.ValidateWithPath("") }

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

func NewCT_AreaChart() *CT_AreaChart { _dee := &CT_AreaChart{}; return _dee }

// Validate validates the CT_TrendlineType and its children
func (_eaffa *CT_TrendlineType) Validate() error {
	return _eaffa.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}

func (_ecaga ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _ecaga {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ecaga))
	}
	return nil
}

// Validate validates the CT_HeaderFooter and its children
func (_dcbge *CT_HeaderFooter) Validate() error {
	return _dcbge.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}

func (_efec *CT_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _efec.ValAttr != ST_ScatterStyleUnset {
		_afgcgb, _aagbf := _efec.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _aagbf != nil {
			return _aagbf
		}
		start.Attr = append(start.Attr, _afgcgb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TrendlineLbl and its children
func (_bbbg *CT_TrendlineLbl) Validate() error {
	return _bbbg.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}

type CT_BarChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	Overlap    *CT_Overlap
	SerLines   []*CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_Surface3DChart() *CT_Surface3DChart { _bafd := &CT_Surface3DChart{}; return _bafd }

func NewCT_DoughnutChart() *CT_DoughnutChart { _fcfdg := &CT_DoughnutChart{}; return _fcfdg }

func (_cdeae ST_BarGrouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_fdbg := _e.Attr{}
	_fdbg.Name = name
	switch _cdeae {
	case ST_BarGroupingUnset:
		_fdbg.Value = ""
	case ST_BarGroupingPercentStacked:
		_fdbg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_fdbg.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_fdbg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_fdbg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _fdbg, nil
}

func (_efca *CT_BubbleChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _efca.VaryColors != nil {
		_ebb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_efca.VaryColors, _ebb)
	}
	if _efca.Ser != nil {
		_cbeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _befdf := range _efca.Ser {
			e.EncodeElement(_befdf, _cbeg)
		}
	}
	if _efca.DLbls != nil {
		_fbda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_efca.DLbls, _fbda)
	}
	if _efca.Bubble3D != nil {
		_cace := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_efca.Bubble3D, _cace)
	}
	if _efca.BubbleScale != nil {
		_abbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_efca.BubbleScale, _abbb)
	}
	if _efca.ShowNegBubbles != nil {
		_fecd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_efca.ShowNegBubbles, _fecd)
	}
	if _efca.SizeRepresents != nil {
		_aabaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_efca.SizeRepresents, _aabaf)
	}
	_dfbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dbfd := range _efca.AxId {
		e.EncodeElement(_dbfd, _dfbe)
	}
	if _efca.ExtLst != nil {
		_eeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efca.ExtLst, _eeg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bbacbb ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _bbacbb {
	case 0, 1, 2:
	default:
		return _bf.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbacbb))
	}
	return nil
}

func (_bdff *CT_TxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gecbc:
	for {
		_ggdba, _gdaa := d.Token()
		if _gdaa != nil {
			return _gdaa
		}
		switch _gfef := _ggdba.(type) {
		case _e.StartElement:
			switch _gfef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_bdff.StrRef = NewCT_StrRef()
				if _dgddd := d.DecodeElement(_bdff.StrRef, &_gfef); _dgddd != nil {
					return _dgddd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_bdff.Rich = _cb.NewCT_TextBody()
				if _dcag := d.DecodeElement(_bdff.Rich, &_gfef); _dcag != nil {
					return _dcag
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _gfef.Name)
				if _aeaga := d.Skip(); _aeaga != nil {
					return _aeaga
				}
			}
		case _e.EndElement:
			break _gecbc
		case _e.CharData:
		}
	}
	return nil
}

var ST_ThicknessPercentPatternRe = _ef.MustCompile(ST_ThicknessPercentPattern)

// Validate validates the CT_DLbls and its children
func (_cfbg *CT_DLbls) Validate() error {
	return _cfbg.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}

func (_gedg *CT_NumVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _bf.Sprintf("\u0025\u0076", _gedg.IdxAttr)})
	if _gedg.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _bf.Sprintf("\u0025\u0076", *_gedg.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_gbaaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_ba.AddPreserveSpaceAttr(&_gbaaf, _gedg.V)
	e.EncodeElement(_gedg.V, _gbaaf)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_aecb *CT_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aecb.Idx = NewCT_UnsignedInt()
_bcaf:
	for {
		_gcbe, _cab := d.Token()
		if _cab != nil {
			return _cab
		}
		switch _fbbf := _gcbe.(type) {
		case _e.StartElement:
			switch _fbbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ace := d.DecodeElement(_aecb.Idx, &_fbbf); _ace != nil {
					return _ace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _eedg := d.DecodeElement(&_aecb.Choice.Delete, &_fbbf); _eedg != nil {
					return _eedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _becd := d.DecodeElement(&_aecb.Choice.Layout, &_fbbf); _becd != nil {
					return _becd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _afcd := d.DecodeElement(&_aecb.Choice.Tx, &_fbbf); _afcd != nil {
					return _afcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _eaaef := d.DecodeElement(&_aecb.Choice.NumFmt, &_fbbf); _eaaef != nil {
					return _eaaef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _fefc := d.DecodeElement(&_aecb.Choice.SpPr, &_fbbf); _fefc != nil {
					return _fefc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _ccbd := d.DecodeElement(&_aecb.Choice.TxPr, &_fbbf); _ccbd != nil {
					return _ccbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _cae := d.DecodeElement(&_aecb.Choice.DLblPos, &_fbbf); _cae != nil {
					return _cae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _ada := d.DecodeElement(&_aecb.Choice.ShowLegendKey, &_fbbf); _ada != nil {
					return _ada
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _bggd := d.DecodeElement(&_aecb.Choice.ShowVal, &_fbbf); _bggd != nil {
					return _bggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _fbdda := d.DecodeElement(&_aecb.Choice.ShowCatName, &_fbbf); _fbdda != nil {
					return _fbdda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _cbbc := d.DecodeElement(&_aecb.Choice.ShowSerName, &_fbbf); _cbbc != nil {
					return _cbbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _dagag := d.DecodeElement(&_aecb.Choice.ShowPercent, &_fbbf); _dagag != nil {
					return _dagag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _eadcb := d.DecodeElement(&_aecb.Choice.ShowBubbleSize, &_fbbf); _eadcb != nil {
					return _eadcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _aecb.Choice == nil {
					_aecb.Choice = NewCT_DLblChoice()
				}
				if _cedb := d.DecodeElement(&_aecb.Choice.Separator, &_fbbf); _cedb != nil {
					return _cedb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aecb.ExtLst = NewCT_ExtensionList()
				if _ddd := d.DecodeElement(_aecb.ExtLst, &_fbbf); _ddd != nil {
					return _ddd
				}
			default:
				_ba.Log("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _fbbf.Name)
				if _gcffe := d.Skip(); _gcffe != nil {
					return _gcffe
				}
			}
		case _e.EndElement:
			break _bcaf
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DLblPos and its children
func (_cfag *CT_DLblPos) Validate() error {
	return _cfag.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}

var ST_OverlapPercentPatternRe = _ef.MustCompile(ST_OverlapPercentPattern)

// Validate validates the CT_CustSplit and its children
func (_fdag *CT_CustSplit) Validate() error {
	return _fdag.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

func (_bcgaff ST_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bcgaff.String(), start)
}

func (_egggd *ST_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acdac, _aded := d.Token()
	if _aded != nil {
		return _aded
	}
	if _ddbcc, _cabec := _acdac.(_e.EndElement); _cabec && _ddbcc.Name == start.Name {
		*_egggd = 1
		return nil
	}
	if _fggge, _ebafa := _acdac.(_e.CharData); !_ebafa {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acdac)
	} else {
		switch string(_fggge) {
		case "":
			*_egggd = 0
		case "\u0061\u0075\u0074\u006f":
			*_egggd = 1
		case "\u0063\u0075\u0073\u0074":
			*_egggd = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_egggd = 3
		case "\u0070\u006f\u0073":
			*_egggd = 4
		case "\u0076\u0061\u006c":
			*_egggd = 5
		}
	}
	_acdac, _aded = d.Token()
	if _aded != nil {
		return _aded
	}
	if _gfagd, _dgbag := _acdac.(_e.EndElement); _dgbag && _gfagd.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acdac)
}

type CT_Bar3DChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	GapDepth   *CT_GapAmount
	Shape      *CT_Shape
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_DispUnitsLbl() *CT_DispUnitsLbl { _efge := &CT_DispUnitsLbl{}; return _efge }

func (_cbed *CT_AxDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cbed.Choice = NewCT_AxDataSourceChoice()
_bda:
	for {
		_cbee, _gfa := d.Token()
		if _gfa != nil {
			return _gfa
		}
		switch _fgf := _cbee.(type) {
		case _e.StartElement:
			switch _fgf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_cbed.Choice = NewCT_AxDataSourceChoice()
				if _dcee := d.DecodeElement(&_cbed.Choice.MultiLvlStrRef, &_fgf); _dcee != nil {
					return _dcee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_cbed.Choice = NewCT_AxDataSourceChoice()
				if _babf := d.DecodeElement(&_cbed.Choice.NumRef, &_fgf); _babf != nil {
					return _babf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_cbed.Choice = NewCT_AxDataSourceChoice()
				if _gbgaa := d.DecodeElement(&_cbed.Choice.NumLit, &_fgf); _gbgaa != nil {
					return _gbgaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cbed.Choice = NewCT_AxDataSourceChoice()
				if _bfae := d.DecodeElement(&_cbed.Choice.StrRef, &_fgf); _bfae != nil {
					return _bfae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_cbed.Choice = NewCT_AxDataSourceChoice()
				if _bcd := d.DecodeElement(&_cbed.Choice.StrLit, &_fgf); _bcd != nil {
					return _bcd
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _fgf.Name)
				if _gefe := d.Skip(); _gefe != nil {
					return _gefe
				}
			}
		case _e.EndElement:
			break _bda
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_FirstSliceAng() *CT_FirstSliceAng { _fced := &CT_FirstSliceAng{}; return _fced }

func NewCT_CatAx() *CT_CatAx {
	_gaeg := &CT_CatAx{}
	_gaeg.AxId = NewCT_UnsignedInt()
	_gaeg.Scaling = NewCT_Scaling()
	_gaeg.AxPos = NewCT_AxPos()
	_gaeg.CrossAx = NewCT_UnsignedInt()
	return _gaeg
}

func (_gbged *CT_Scaling) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gbged.LogBase != nil {
		_caeeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_gbged.LogBase, _caeeg)
	}
	if _gbged.Orientation != nil {
		_edbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_gbged.Orientation, _edbgd)
	}
	if _gbged.Max != nil {
		_dcbdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_gbged.Max, _dcbdf)
	}
	if _gbged.Min != nil {
		_fdaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_gbged.Min, _fdaff)
	}
	if _gbged.ExtLst != nil {
		_faccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbged.ExtLst, _faccf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fbbe ST_AxPos) String() string {
	switch _fbbe {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}

func (_gaceaf ST_LblAlgn) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_geead := _e.Attr{}
	_geead.Name = name
	switch _gaceaf {
	case ST_LblAlgnUnset:
		_geead.Value = ""
	case ST_LblAlgnCtr:
		_geead.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_geead.Value = "\u006c"
	case ST_LblAlgnR:
		_geead.Value = "\u0072"
	}
	return _geead, nil
}

func (_ggdbf *ST_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gbbf, _ebaeg := d.Token()
	if _ebaeg != nil {
		return _ebaeg
	}
	if _daaed, _fbead := _gbbf.(_e.EndElement); _fbead && _daaed.Name == start.Name {
		*_ggdbf = 1
		return nil
	}
	if _dfgba, _bfcf := _gbbf.(_e.CharData); !_bfcf {
		return _bf.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gbbf)
	} else {
		switch string(_dfgba) {
		case "":
			*_ggdbf = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ggdbf = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_ggdbf = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_ggdbf = 3
		}
	}
	_gbbf, _ebaeg = d.Token()
	if _ebaeg != nil {
		return _ebaeg
	}
	if _eeedb, _gaabd := _gbbf.(_e.EndElement); _gaabd && _eeedb.Name == start.Name {
		return nil
	}
	return _bf.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gbbf)
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_ecda *CT_DLblChoice) ValidateWithPath(path string) error {
	if _ecda.Delete != nil {
		if _bbfg := _ecda.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _bbfg != nil {
			return _bbfg
		}
	}
	if _ecda.Layout != nil {
		if _edba := _ecda.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _edba != nil {
			return _edba
		}
	}
	if _ecda.Tx != nil {
		if _gabad := _ecda.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gabad != nil {
			return _gabad
		}
	}
	if _ecda.NumFmt != nil {
		if _fcfb := _ecda.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _fcfb != nil {
			return _fcfb
		}
	}
	if _ecda.SpPr != nil {
		if _edca := _ecda.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edca != nil {
			return _edca
		}
	}
	if _ecda.TxPr != nil {
		if _aedeg := _ecda.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aedeg != nil {
			return _aedeg
		}
	}
	if _ecda.DLblPos != nil {
		if _dbg := _ecda.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _dbg != nil {
			return _dbg
		}
	}
	if _ecda.ShowLegendKey != nil {
		if _ffcfa := _ecda.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _ffcfa != nil {
			return _ffcfa
		}
	}
	if _ecda.ShowVal != nil {
		if _beae := _ecda.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _beae != nil {
			return _beae
		}
	}
	if _ecda.ShowCatName != nil {
		if _dffe := _ecda.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _dffe != nil {
			return _dffe
		}
	}
	if _ecda.ShowSerName != nil {
		if _fagf := _ecda.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _fagf != nil {
			return _fagf
		}
	}
	if _ecda.ShowPercent != nil {
		if _bdad := _ecda.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _bdad != nil {
			return _bdad
		}
	}
	if _ecda.ShowBubbleSize != nil {
		if _agff := _ecda.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _agff != nil {
			return _agff
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_edga *CT_Double) ValidateWithPath(path string) error { return nil }

func (_gecaf *ST_LayoutMode) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gecaf = 0
	case "\u0065\u0064\u0067\u0065":
		*_gecaf = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_gecaf = 2
	}
	return nil
}

func (_gfbg *CT_LineChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gfbg.Grouping = NewCT_Grouping()
_agbea:
	for {
		_dbbbg, _gbed := d.Token()
		if _gbed != nil {
			return _gbed
		}
		switch _aabcc := _dbbbg.(type) {
		case _e.StartElement:
			switch _aabcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _dfcb := d.DecodeElement(_gfbg.Grouping, &_aabcc); _dfcb != nil {
					return _dfcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gfbg.VaryColors = NewCT_Boolean()
				if _ggbce := d.DecodeElement(_gfbg.VaryColors, &_aabcc); _ggbce != nil {
					return _ggbce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggea := NewCT_LineSer()
				if _fbfeb := d.DecodeElement(_ggea, &_aabcc); _fbfeb != nil {
					return _fbfeb
				}
				_gfbg.Ser = append(_gfbg.Ser, _ggea)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gfbg.DLbls = NewCT_DLbls()
				if _bbbe := d.DecodeElement(_gfbg.DLbls, &_aabcc); _bbbe != nil {
					return _bbbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_gfbg.DropLines = NewCT_ChartLines()
				if _dbbggb := d.DecodeElement(_gfbg.DropLines, &_aabcc); _dbbggb != nil {
					return _dbbggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_gfbg.HiLowLines = NewCT_ChartLines()
				if _ebef := d.DecodeElement(_gfbg.HiLowLines, &_aabcc); _ebef != nil {
					return _ebef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_gfbg.UpDownBars = NewCT_UpDownBars()
				if _fdccd := d.DecodeElement(_gfbg.UpDownBars, &_aabcc); _fdccd != nil {
					return _fdccd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gfbg.Marker = NewCT_Boolean()
				if _fgead := d.DecodeElement(_gfbg.Marker, &_aabcc); _fgead != nil {
					return _fgead
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_gfbg.Smooth = NewCT_Boolean()
				if _geecd := d.DecodeElement(_gfbg.Smooth, &_aabcc); _geecd != nil {
					return _geecd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fafe := NewCT_UnsignedInt()
				if _cdgbf := d.DecodeElement(_fafe, &_aabcc); _cdgbf != nil {
					return _cdgbf
				}
				_gfbg.AxId = append(_gfbg.AxId, _fafe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfbg.ExtLst = NewCT_ExtensionList()
				if _efdg := d.DecodeElement(_gfbg.ExtLst, &_aabcc); _efdg != nil {
					return _efdg
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _aabcc.Name)
				if _gdac := d.Skip(); _gdac != nil {
					return _gdac
				}
			}
		case _e.EndElement:
			break _agbea
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_PictureOptions() *CT_PictureOptions { _dddc := &CT_PictureOptions{}; return _dddc }

func (_cbec *CT_MarkerSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cbec.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", *_cbec.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_efdcd ST_SizeRepresents) Validate() error { return _efdcd.ValidateWithPath("") }

type CT_LayoutMode struct{ ValAttr ST_LayoutMode }

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

func (_gac *CT_BubbleSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gac.Idx = NewCT_UnsignedInt()
	_gac.Order = NewCT_UnsignedInt()
_fcd:
	for {
		_cfcf, _aca := d.Token()
		if _aca != nil {
			return _aca
		}
		switch _ebcf := _cfcf.(type) {
		case _e.StartElement:
			switch _ebcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _fdbc := d.DecodeElement(_gac.Idx, &_ebcf); _fdbc != nil {
					return _fdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gedef := d.DecodeElement(_gac.Order, &_ebcf); _gedef != nil {
					return _gedef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gac.Tx = NewCT_SerTx()
				if _fcfd := d.DecodeElement(_gac.Tx, &_ebcf); _fcfd != nil {
					return _fcfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gac.SpPr = _cb.NewCT_ShapeProperties()
				if _ggd := d.DecodeElement(_gac.SpPr, &_ebcf); _ggd != nil {
					return _ggd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_gac.InvertIfNegative = NewCT_Boolean()
				if _baeb := d.DecodeElement(_gac.InvertIfNegative, &_ebcf); _baeb != nil {
					return _baeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_afb := NewCT_DPt()
				if _cea := d.DecodeElement(_afb, &_ebcf); _cea != nil {
					return _cea
				}
				_gac.DPt = append(_gac.DPt, _afb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gac.DLbls = NewCT_DLbls()
				if _eab := d.DecodeElement(_gac.DLbls, &_ebcf); _eab != nil {
					return _eab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_abcf := NewCT_Trendline()
				if _baabg := d.DecodeElement(_abcf, &_ebcf); _baabg != nil {
					return _baabg
				}
				_gac.Trendline = append(_gac.Trendline, _abcf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_egfa := NewCT_ErrBars()
				if _eagg := d.DecodeElement(_egfa, &_ebcf); _eagg != nil {
					return _eagg
				}
				_gac.ErrBars = append(_gac.ErrBars, _egfa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_gac.XVal = NewCT_AxDataSource()
				if _acga := d.DecodeElement(_gac.XVal, &_ebcf); _acga != nil {
					return _acga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_gac.YVal = NewCT_NumDataSource()
				if _debb := d.DecodeElement(_gac.YVal, &_ebcf); _debb != nil {
					return _debb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_gac.BubbleSize = NewCT_NumDataSource()
				if _gaeb := d.DecodeElement(_gac.BubbleSize, &_ebcf); _gaeb != nil {
					return _gaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_gac.Bubble3D = NewCT_Boolean()
				if _dbffd := d.DecodeElement(_gac.Bubble3D, &_ebcf); _dbffd != nil {
					return _dbffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gac.ExtLst = NewCT_ExtensionList()
				if _gbbb := d.DecodeElement(_gac.ExtLst, &_ebcf); _gbbb != nil {
					return _gbbb
				}
			default:
				_ba.Log("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _ebcf.Name)
				if _aecf := d.Skip(); _aecf != nil {
					return _aecf
				}
			}
		case _e.EndElement:
			break _fcd
		case _e.CharData:
		}
	}
	return nil
}

func (_cgdfg *ST_AxPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cgdfg = 0
	case "\u0062":
		*_cgdfg = 1
	case "\u006c":
		*_cgdfg = 2
	case "\u0072":
		*_cgdfg = 3
	case "\u0074":
		*_cgdfg = 4
	}
	return nil
}

// Validate validates the CT_Pie3DChart and its children
func (_bbdg *CT_Pie3DChart) Validate() error {
	return _bbdg.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_dgccf *CT_SerTx) ValidateWithPath(path string) error {
	if _dcfbf := _dgccf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dcfbf != nil {
		return _dcfbf
	}
	return nil
}

func (_cgcfg *CT_PlotAreaChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cgcfg.AreaChart != nil {
		_aedce := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.AreaChart, _aedce)
	}
	if _cgcfg.Area3DChart != nil {
		_geefa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.Area3DChart, _geefa)
	}
	if _cgcfg.LineChart != nil {
		_fbbdc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.LineChart, _fbbdc)
	}
	if _cgcfg.Line3DChart != nil {
		_eded := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.Line3DChart, _eded)
	}
	if _cgcfg.StockChart != nil {
		_badb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.StockChart, _badb)
	}
	if _cgcfg.RadarChart != nil {
		_bdbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.RadarChart, _bdbe)
	}
	if _cgcfg.ScatterChart != nil {
		_gbca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.ScatterChart, _gbca)
	}
	if _cgcfg.PieChart != nil {
		_cdfge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.PieChart, _cdfge)
	}
	if _cgcfg.Pie3DChart != nil {
		_fafec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.Pie3DChart, _fafec)
	}
	if _cgcfg.DoughnutChart != nil {
		_bbfgg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.DoughnutChart, _bbfgg)
	}
	if _cgcfg.BarChart != nil {
		_ccdee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.BarChart, _ccdee)
	}
	if _cgcfg.Bar3DChart != nil {
		_cefbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.Bar3DChart, _cefbe)
	}
	if _cgcfg.OfPieChart != nil {
		_acbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.OfPieChart, _acbe)
	}
	if _cgcfg.SurfaceChart != nil {
		_efcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.SurfaceChart, _efcd)
	}
	if _cgcfg.Surface3DChart != nil {
		_gbdaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.Surface3DChart, _gbdaf)
	}
	if _cgcfg.BubbleChart != nil {
		_adbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_cgcfg.BubbleChart, _adbd)
	}
	return nil
}

// Validate validates the CT_BuiltInUnit and its children
func (_bfbgb *CT_BuiltInUnit) Validate() error {
	return _bfbgb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}

func (_addb *CT_DPt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bfdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_addb.Idx, _bfdc)
	if _addb.InvertIfNegative != nil {
		_efffd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_addb.InvertIfNegative, _efffd)
	}
	if _addb.Marker != nil {
		_bdbcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_addb.Marker, _bdbcc)
	}
	if _addb.Bubble3D != nil {
		_adfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_addb.Bubble3D, _adfg)
	}
	if _addb.Explosion != nil {
		_ffgde := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_addb.Explosion, _ffgde)
	}
	if _addb.SpPr != nil {
		_bcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_addb.SpPr, _bcb)
	}
	if _addb.PictureOptions != nil {
		_bff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_addb.PictureOptions, _bff)
	}
	if _addb.ExtLst != nil {
		_daed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_addb.ExtLst, _daed)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_eabfa *CT_ManualLayout) ValidateWithPath(path string) error {
	if _eabfa.LayoutTarget != nil {
		if _eccd := _eabfa.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _eccd != nil {
			return _eccd
		}
	}
	if _eabfa.XMode != nil {
		if _abgd := _eabfa.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _abgd != nil {
			return _abgd
		}
	}
	if _eabfa.YMode != nil {
		if _cfagd := _eabfa.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _cfagd != nil {
			return _cfagd
		}
	}
	if _eabfa.WMode != nil {
		if _aadb := _eabfa.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _aadb != nil {
			return _aadb
		}
	}
	if _eabfa.HMode != nil {
		if _fegf := _eabfa.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _fegf != nil {
			return _fegf
		}
	}
	if _eabfa.X != nil {
		if _bdbcf := _eabfa.X.ValidateWithPath(path + "\u002f\u0058"); _bdbcf != nil {
			return _bdbcf
		}
	}
	if _eabfa.Y != nil {
		if _bgdfc := _eabfa.Y.ValidateWithPath(path + "\u002f\u0059"); _bgdfc != nil {
			return _bgdfc
		}
	}
	if _eabfa.W != nil {
		if _bddfd := _eabfa.W.ValidateWithPath(path + "\u002f\u0057"); _bddfd != nil {
			return _bddfd
		}
	}
	if _eabfa.H != nil {
		if _gabf := _eabfa.H.ValidateWithPath(path + "\u002f\u0048"); _gabf != nil {
			return _gabf
		}
	}
	if _eabfa.ExtLst != nil {
		if _ccbe := _eabfa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccbe != nil {
			return _ccbe
		}
	}
	return nil
}

func (_fcdfe ST_LegendPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_fbccf := _e.Attr{}
	_fbccf.Name = name
	switch _fcdfe {
	case ST_LegendPosUnset:
		_fbccf.Value = ""
	case ST_LegendPosB:
		_fbccf.Value = "\u0062"
	case ST_LegendPosTr:
		_fbccf.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_fbccf.Value = "\u006c"
	case ST_LegendPosR:
		_fbccf.Value = "\u0072"
	case ST_LegendPosT:
		_fbccf.Value = "\u0074"
	}
	return _fbccf, nil
}

// Validate validates the CT_LegendPos and its children
func (_dbabb *CT_LegendPos) Validate() error {
	return _dbabb.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}

func (_bbadb *CT_Title) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_agbg:
	for {
		_ebeg, _cbdef := d.Token()
		if _cbdef != nil {
			return _cbdef
		}
		switch _dcca := _ebeg.(type) {
		case _e.StartElement:
			switch _dcca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bbadb.Tx = NewCT_Tx()
				if _gcaeg := d.DecodeElement(_bbadb.Tx, &_dcca); _gcaeg != nil {
					return _gcaeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_bbadb.Layout = NewCT_Layout()
				if _deaeb := d.DecodeElement(_bbadb.Layout, &_dcca); _deaeb != nil {
					return _deaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_bbadb.Overlay = NewCT_Boolean()
				if _faacc := d.DecodeElement(_bbadb.Overlay, &_dcca); _faacc != nil {
					return _faacc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bbadb.SpPr = _cb.NewCT_ShapeProperties()
				if _dfab := d.DecodeElement(_bbadb.SpPr, &_dcca); _dfab != nil {
					return _dfab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bbadb.TxPr = _cb.NewCT_TextBody()
				if _aagdf := d.DecodeElement(_bbadb.TxPr, &_dcca); _aagdf != nil {
					return _aagdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbadb.ExtLst = NewCT_ExtensionList()
				if _eddfg := d.DecodeElement(_bbadb.ExtLst, &_dcca); _eddfg != nil {
					return _eddfg
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _dcca.Name)
				if _fbgf := d.Skip(); _fbgf != nil {
					return _fbgf
				}
			}
		case _e.EndElement:
			break _agbg
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_RelId() *CT_RelId { _fafge := &CT_RelId{}; return _fafge }

func (_facg *CT_SurfaceSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_affae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_facg.Idx, _affae)
	_ecaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_facg.Order, _ecaf)
	if _facg.Tx != nil {
		_ffbbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_facg.Tx, _ffbbd)
	}
	if _facg.SpPr != nil {
		_eacbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_facg.SpPr, _eacbd)
	}
	if _facg.Cat != nil {
		_gcbda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_facg.Cat, _gcbda)
	}
	if _facg.Val != nil {
		_gabda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_facg.Val, _gabda)
	}
	if _facg.ExtLst != nil {
		_edbad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_facg.ExtLst, _edbad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LineChart() *CT_LineChart {
	_fega := &CT_LineChart{}
	_fega.Grouping = NewCT_Grouping()
	return _fega
}

func (_bcafd *EG_AreaChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bcafd.Grouping != nil {
		_dfaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_bcafd.Grouping, _dfaef)
	}
	if _bcafd.VaryColors != nil {
		_ccdgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bcafd.VaryColors, _ccdgc)
	}
	if _bcafd.Ser != nil {
		_acecb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _abgf := range _bcafd.Ser {
			e.EncodeElement(_abgf, _acecb)
		}
	}
	if _bcafd.DLbls != nil {
		_dggffc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcafd.DLbls, _dggffc)
	}
	if _bcafd.DropLines != nil {
		_bcdef := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bcafd.DropLines, _bcdef)
	}
	return nil
}

// Validate validates the CT_StockChart and its children
func (_becaf *CT_StockChart) Validate() error {
	return _becaf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_ccdgf *CT_LayoutMode) ValidateWithPath(path string) error {
	if _affb := _ccdgf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _affb != nil {
		return _affb
	}
	return nil
}

func (_decge ST_MarkerStyle) String() string {
	switch _decge {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}

type CT_DispUnits struct {
	Choice       *CT_DispUnitsChoice
	DispUnitsLbl *CT_DispUnitsLbl
	ExtLst       *CT_ExtensionList
}

type CT_ExternalData struct {
	IdAttr     string
	AutoUpdate *CT_Boolean
}

type CT_StrVal struct {
	IdxAttr uint32
	V       string
}

func (_agga *CT_LegendEntry) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agga.Idx = NewCT_UnsignedInt()
_fdbe:
	for {
		_agde, _ebga := d.Token()
		if _ebga != nil {
			return _ebga
		}
		switch _eeaab := _agde.(type) {
		case _e.StartElement:
			switch _eeaab.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ebcba := d.DecodeElement(_agga.Idx, &_eeaab); _ebcba != nil {
					return _ebcba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _agga.Choice == nil {
					_agga.Choice = NewCT_LegendEntryChoice()
				}
				if _cedc := d.DecodeElement(&_agga.Choice.Delete, &_eeaab); _cedc != nil {
					return _cedc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _agga.Choice == nil {
					_agga.Choice = NewCT_LegendEntryChoice()
				}
				if _dacdf := d.DecodeElement(&_agga.Choice.TxPr, &_eeaab); _dacdf != nil {
					return _dacdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agga.ExtLst = NewCT_ExtensionList()
				if _eecc := d.DecodeElement(_agga.ExtLst, &_eeaab); _eecc != nil {
					return _eecc
				}
			default:
				_ba.Log("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _eeaab.Name)
				if _eacef := d.Skip(); _eacef != nil {
					return _eacef
				}
			}
		case _e.EndElement:
			break _fdbe
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Area3DChart and its children
func (_bc *CT_Area3DChart) Validate() error {
	return _bc.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_ccefb *CT_UpDownBars) ValidateWithPath(path string) error {
	if _ccefb.GapWidth != nil {
		if _aacdg := _ccefb.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _aacdg != nil {
			return _aacdg
		}
	}
	if _ccefb.UpBars != nil {
		if _efega := _ccefb.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _efega != nil {
			return _efega
		}
	}
	if _ccefb.DownBars != nil {
		if _cadbc := _ccefb.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _cadbc != nil {
			return _cadbc
		}
	}
	if _ccefb.ExtLst != nil {
		if _fgfc := _ccefb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fgfc != nil {
			return _fgfc
		}
	}
	return nil
}

func (_fbeag *Group_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cdebe:
	for {
		_fbcff, _bdfceg := d.Token()
		if _bdfceg != nil {
			return _bdfceg
		}
		switch _ccfbc := _fbcff.(type) {
		case _e.StartElement:
			switch _ccfbc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fbeag.NumFmt = NewCT_NumFmt()
				if _fdcea := d.DecodeElement(_fbeag.NumFmt, &_ccfbc); _fdcea != nil {
					return _fdcea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbeag.SpPr = _cb.NewCT_ShapeProperties()
				if _bagdg := d.DecodeElement(_fbeag.SpPr, &_ccfbc); _bagdg != nil {
					return _bagdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbeag.TxPr = _cb.NewCT_TextBody()
				if _bgfd := d.DecodeElement(_fbeag.TxPr, &_ccfbc); _bgfd != nil {
					return _bgfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_fbeag.DLblPos = NewCT_DLblPos()
				if _gcgge := d.DecodeElement(_fbeag.DLblPos, &_ccfbc); _gcgge != nil {
					return _gcgge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_fbeag.ShowLegendKey = NewCT_Boolean()
				if _ceecg := d.DecodeElement(_fbeag.ShowLegendKey, &_ccfbc); _ceecg != nil {
					return _ceecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_fbeag.ShowVal = NewCT_Boolean()
				if _dabbd := d.DecodeElement(_fbeag.ShowVal, &_ccfbc); _dabbd != nil {
					return _dabbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_fbeag.ShowCatName = NewCT_Boolean()
				if _bebca := d.DecodeElement(_fbeag.ShowCatName, &_ccfbc); _bebca != nil {
					return _bebca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_fbeag.ShowSerName = NewCT_Boolean()
				if _cdfgab := d.DecodeElement(_fbeag.ShowSerName, &_ccfbc); _cdfgab != nil {
					return _cdfgab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_fbeag.ShowPercent = NewCT_Boolean()
				if _ecedd := d.DecodeElement(_fbeag.ShowPercent, &_ccfbc); _ecedd != nil {
					return _ecedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_fbeag.ShowBubbleSize = NewCT_Boolean()
				if _cdfcd := d.DecodeElement(_fbeag.ShowBubbleSize, &_ccfbc); _cdfcd != nil {
					return _cdfcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_fbeag.Separator = new(string)
				if _badbb := d.DecodeElement(_fbeag.Separator, &_ccfbc); _badbb != nil {
					return _badbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fbeag.ShowLeaderLines = NewCT_Boolean()
				if _efcae := d.DecodeElement(_fbeag.ShowLeaderLines, &_ccfbc); _efcae != nil {
					return _efcae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_fbeag.LeaderLines = NewCT_ChartLines()
				if _acade := d.DecodeElement(_fbeag.LeaderLines, &_ccfbc); _acade != nil {
					return _acade
				}
			default:
				_ba.Log("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _ccfbc.Name)
				if _effgb := d.Skip(); _effgb != nil {
					return _effgb
				}
			}
		case _e.EndElement:
			break _cdebe
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PieSer and its children
func (_fefa *CT_PieSer) Validate() error {
	return _fefa.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}

func NewCT_TickLblPos() *CT_TickLblPos { _cgebd := &CT_TickLblPos{}; return _cgebd }

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_afe *CT_BarGrouping) ValidateWithPath(path string) error {
	if _cagc := _afe.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cagc != nil {
		return _cagc
	}
	return nil
}

func (_fdec *CT_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fdec.ValAttr != ST_DispBlanksAsUnset {
		_fbbg, _ceea := _fdec.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ceea != nil {
			return _ceea
		}
		start.Attr = append(start.Attr, _fbbg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ecca *CT_UnsignedInt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _bf.Sprintf("\u0025\u0076", _ecca.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func init() {
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_ba.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
