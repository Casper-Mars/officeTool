//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package terms

import (
	_f "encoding/xml"
	_eb "fmt"
	_b "github.com/Casper-Mars/officeTool"
	_a "github.com/Casper-Mars/officeTool/schema/purl.org/dc/elements"
)

// ValidateWithPath validates the RFC3066 and its children, prefixing error messages with path
func (_bab *RFC3066) ValidateWithPath(path string) error { return nil }

// Validate validates the RFC3066 and its children
func (_bbd *RFC3066) Validate() error {
	return _bbd.ValidateWithPath("\u0052F\u0043\u0033\u0030\u0036\u0036")
}

func (_cafg *RFC1766) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0052F\u0043\u0031\u0037\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

// Validate validates the LCSH and its children
func (_aef *LCSH) Validate() error { return _aef.ValidateWithPath("\u004c\u0043\u0053\u0048") }

func (_fc *ElementsAndRefinementsGroup) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
_ebd:
	for {
		_gc, _ed := d.Token()
		if _ed != nil {
			return _ed
		}
		switch _bfe := _gc.(type) {
		case _f.StartElement:
			switch _bfe.Name {
			case _f.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_gba := NewElementsAndRefinementsGroupChoice()
				if _ecg := d.DecodeElement(&_gba.Any, &_bfe); _ecg != nil {
					return _ecg
				}
				_fc.Choice = append(_fc.Choice, _gba)
			default:
				_b.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006ce\u006d\u0065\u006e\u0074\u0073\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006et\u0073\u0047\u0072\u006f\u0075\u0070\u0020\u0025\u0076", _bfe.Name)
				if _dca := d.Skip(); _dca != nil {
					return _dca
				}
			}
		case _f.EndElement:
			break _ebd
		case _f.CharData:
		}
	}
	return nil
}

// Validate validates the MESH and its children
func (_cdg *MESH) Validate() error { return _cdg.ValidateWithPath("\u004d\u0045\u0053\u0048") }

type MESH struct{}

func NewMESH() *MESH { _bb := &MESH{}; return _bb }

func (_ecb *MESH) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_ecc, _adg := d.Token()
		if _adg != nil {
			return _eb.Errorf("\u0070\u0061r\u0073\u0069\u006eg\u0020\u004d\u0045\u0053\u0048\u003a\u0020\u0025\u0073", _adg)
		}
		if _df, _cee := _ecc.(_f.EndElement); _cee && _df.Name == start.Name {
			break
		}
	}
	return nil
}

func NewBox() *Box { _ac := &Box{}; return _ac }

func NewPoint() *Point { _caf := &Point{}; return _caf }

func (_gdg *UDC) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0055\u0044\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func NewElementsAndRefinementsGroupChoice() *ElementsAndRefinementsGroupChoice {
	_cdda := &ElementsAndRefinementsGroupChoice{}
	return _cdda
}

type ElementOrRefinementContainer struct {
	Choice []*ElementsAndRefinementsGroupChoice
}

// ValidateWithPath validates the ElementsAndRefinementsGroup and its children, prefixing error messages with path
func (_bd *ElementsAndRefinementsGroup) ValidateWithPath(path string) error {
	for _fdg, _gae := range _bd.Choice {
		if _cec := _gae.ValidateWithPath(_eb.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _fdg)); _cec != nil {
			return _cec
		}
	}
	return nil
}

func (_eegc *Point) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0050\u006f\u0069n\u0074"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func NewTGN() *TGN { _ceeb := &TGN{}; return _ceeb }

func NewURI() *URI { _bfg := &URI{}; return _bfg }

func (_dg *ElementsAndRefinementsGroupChoice) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
_gaa:
	for {
		_fca, _eee := d.Token()
		if _eee != nil {
			return _eee
		}
		switch _dec := _fca.(type) {
		case _f.StartElement:
			switch _dec.Name {
			case _f.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_gcd := _a.NewAny()
				if _ge := d.DecodeElement(_gcd, &_dec); _ge != nil {
					return _ge
				}
				_dg.Any = append(_dg.Any, _gcd)
			default:
				_b.Log("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0041\u006ed\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006fu\u0070\u0043\u0068o\u0069\u0063\u0065\u0020\u0025\u0076", _dec.Name)
				if _fe := d.Skip(); _fe != nil {
					return _fe
				}
			}
		case _f.EndElement:
			break _gaa
		case _f.CharData:
		}
	}
	return nil
}

func NewISO3166() *ISO3166 { _aba := &ISO3166{}; return _aba }

func (_dfc *UDC) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_bgdc, _fccb := d.Token()
		if _fccb != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0055\u0044\u0043\u003a\u0020\u0025\u0073", _fccb)
		}
		if _eeee, _gge := _bgdc.(_f.EndElement); _gge && _eeee.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ag *ElementOrRefinementContainer) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
_acf:
	for {
		_de, _badb := d.Token()
		if _badb != nil {
			return _badb
		}
		switch _ca := _de.(type) {
		case _f.StartElement:
			switch _ca.Name {
			case _f.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f", Local: "\u0061\u006e\u0079"}:
				_ece := NewElementsAndRefinementsGroupChoice()
				if _fb := d.DecodeElement(&_ece.Any, &_ca); _fb != nil {
					return _fb
				}
				_ag.Choice = append(_ag.Choice, _ece)
			default:
				_b.Log("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020E\u006c\u0065\u006d\u0065\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065n\u0074\u0043on\u0074\u0061\u0069n\u0065\u0072\u0020\u0025\u0076", _ca.Name)
				if _ebe := d.Skip(); _ebe != nil {
					return _ebe
				}
			}
		case _f.EndElement:
			break _acf
		case _f.CharData:
		}
	}
	return nil
}

// Validate validates the DCMIType and its children
func (_g *DCMIType) Validate() error {
	return _g.ValidateWithPath("\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065")
}

func NewUDC() *UDC { _dece := &UDC{}; return _dece }

type ISO639_2 struct{}

type UDC struct{}

func NewPeriod() *Period { _ccb := &Period{}; return _ccb }

// Validate validates the URI and its children
func (_fed *URI) Validate() error { return _fed.ValidateWithPath("\u0055\u0052\u0049") }

func NewLCSH() *LCSH { _cba := &LCSH{}; return _cba }

func (_dc *DCMIType) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_be, _bad := d.Token()
		if _bad != nil {
			return _eb.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0044\u0043\u004dI\u0054\u0079\u0070\u0065: \u0025\u0073", _bad)
		}
		if _ec, _bada := _be.(_f.EndElement); _bada && _ec.Name == start.Name {
			break
		}
	}
	return nil
}

type ElementsAndRefinementsGroup struct {
	Choice []*ElementsAndRefinementsGroupChoice
}

func (_fde *DCMIType) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_gb *DDC) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0044\u0044\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

// Validate validates the ElementsAndRefinementsGroup and its children
func (_dcg *ElementsAndRefinementsGroup) Validate() error {
	return _dcg.ValidateWithPath("E\u006c\u0065\u006d\u0065\u006e\u0074s\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065m\u0065\u006e\u0074s\u0047r\u006f\u0075\u0070")
}

// ValidateWithPath validates the ElementsAndRefinementsGroupChoice and its children, prefixing error messages with path
func (_af *ElementsAndRefinementsGroupChoice) ValidateWithPath(path string) error {
	for _bea, _ebda := range _af.Any {
		if _fee := _ebda.ValidateWithPath(_eb.Sprintf("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d", path, _bea)); _fee != nil {
			return _fee
		}
	}
	return nil
}

// ValidateWithPath validates the LCC and its children, prefixing error messages with path
func (_gd *LCC) ValidateWithPath(path string) error { return nil }

func (_fcc *LCC) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u004c\u0043\u0043"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func NewLCC() *LCC { _cg := &LCC{}; return _cg }

func (_ee *ElementOrRefinementContainer) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0065\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072"
	e.EncodeToken(start)
	if _ee.Choice != nil {
		for _, _cdb := range _ee.Choice {
			_cdb.MarshalXML(e, _f.StartElement{})
		}
	}
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the W3CDTF and its children, prefixing error messages with path
func (_edce *W3CDTF) ValidateWithPath(path string) error { return nil }

type RFC1766 struct{}

// ValidateWithPath validates the URI and its children, prefixing error messages with path
func (_dce *URI) ValidateWithPath(path string) error { return nil }

type LCSH struct{}

type ElementsAndRefinementsGroupChoice struct{ Any []*_a.Any }

type TGN struct{}

// ValidateWithPath validates the IMT and its children, prefixing error messages with path
func (_bgd *IMT) ValidateWithPath(path string) error { return nil }

type IMT struct{}

// ValidateWithPath validates the TGN and its children, prefixing error messages with path
func (_dfb *TGN) ValidateWithPath(path string) error { return nil }

// Validate validates the ElementOrRefinementContainer and its children
func (_eg *ElementOrRefinementContainer) Validate() error {
	return _eg.ValidateWithPath("\u0045\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072")
}

func NewIMT() *IMT { _fded := &IMT{}; return _fded }

func (_bca *MESH) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u004d\u0045\u0053\u0048"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type Box struct{}

// ValidateWithPath validates the MESH and its children, prefixing error messages with path
func (_dcf *MESH) ValidateWithPath(path string) error { return nil }

func (_bcc *Period) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_aee, _gfd := d.Token()
		if _gfd != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0050e\u0072\u0069o\u0064\u003a\u0020\u0025\u0073", _gfd)
		}
		if _caef, _fccd := _aee.(_f.EndElement); _fccd && _caef.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ga *ElementsAndRefinementsGroup) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	if _ga.Choice != nil {
		for _, _eff := range _ga.Choice {
			_eff.MarshalXML(e, _f.StartElement{})
		}
	}
	return nil
}

// Validate validates the ElementsAndRefinementsGroupChoice and its children
func (_gbc *ElementsAndRefinementsGroupChoice) Validate() error {
	return _gbc.ValidateWithPath("\u0045\u006c\u0065\u006d\u0065\u006et\u0073\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006et\u0073\u0047\u0072\u006f\u0075\u0070\u0043h\u006f\u0069\u0063\u0065")
}

func NewW3CDTF() *W3CDTF { _gde := &W3CDTF{}; return _gde }

func (_edf *LCSH) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_abb, _ded := d.Token()
		if _ded != nil {
			return _eb.Errorf("\u0070\u0061r\u0073\u0069\u006eg\u0020\u004c\u0043\u0053\u0048\u003a\u0020\u0025\u0073", _ded)
		}
		if _bgbe, _db := _abb.(_f.EndElement); _db && _bgbe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fa *Box) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_fd, _ba := d.Token()
		if _ba != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0042\u006f\u0078\u003a\u0020\u0025\u0073", _ba)
		}
		if _bg, _c := _fd.(_f.EndElement); _c && _bg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ged *RFC3066) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0052F\u0043\u0033\u0030\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_gad *Period) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0050\u0065\u0072\u0069\u006f\u0064"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_gce *URI) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_cdce, _ace := d.Token()
		if _ace != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0055\u0052\u0049\u003a\u0020\u0025\u0073", _ace)
		}
		if _gcc, _bcf := _cdce.(_f.EndElement); _bcf && _gcc.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the UDC and its children
func (_cde *UDC) Validate() error { return _cde.ValidateWithPath("\u0055\u0044\u0043") }

// Validate validates the DDC and its children
func (_cb *DDC) Validate() error { return _cb.ValidateWithPath("\u0044\u0044\u0043") }

// Validate validates the Point and its children
func (_cbb *Point) Validate() error { return _cbb.ValidateWithPath("\u0050\u006f\u0069n\u0074") }

type DCMIType struct{}

// Validate validates the Period and its children
func (_dad *Period) Validate() error {
	return _dad.ValidateWithPath("\u0050\u0065\u0072\u0069\u006f\u0064")
}

type DDC struct{}

func (_babe *W3CDTF) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_fgd, _agc := d.Token()
		if _agc != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u00573\u0043\u0044T\u0046\u003a\u0020\u0025\u0073", _agc)
		}
		if _daf, _cbd := _fgd.(_f.EndElement); _cbd && _daf.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the TGN and its children
func (_adc *TGN) Validate() error { return _adc.ValidateWithPath("\u0054\u0047\u004e") }

// ValidateWithPath validates the ISO3166 and its children, prefixing error messages with path
func (_dgd *ISO3166) ValidateWithPath(path string) error { return nil }

func (_adcf *W3CDTF) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0057\u0033\u0043\u0044\u0054\u0046"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the Period and its children, prefixing error messages with path
func (_dfe *Period) ValidateWithPath(path string) error { return nil }

// Validate validates the ISO639_2 and its children
func (_fbe *ISO639_2) Validate() error {
	return _fbe.ValidateWithPath("\u0049\u0053\u004f\u0036\u0033\u0039\u005f\u0032")
}

func (_bc *ElementsAndRefinementsGroupChoice) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	if _bc.Any != nil {
		_eeg := _f.StartElement{Name: _f.Name{Local: "\u0064\u0063\u003a\u0061\u006e\u0079"}}
		for _, _deb := range _bc.Any {
			e.EncodeElement(_deb, _eeg)
		}
	}
	return nil
}

// ValidateWithPath validates the ISO639_2 and its children, prefixing error messages with path
func (_gaeg *ISO639_2) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the UDC and its children, prefixing error messages with path
func (_bed *UDC) ValidateWithPath(path string) error { return nil }

func (_edc *LCSH) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u004c\u0043\u0053\u0048"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type Period struct{}

func (_gdc *RFC3066) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_bec, _ada := d.Token()
		if _ada != nil {
			return _eb.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0052\u0046\u0043\u0033\u0030\u0036\u0036\u003a\u0020\u0025\u0073", _ada)
		}
		if _daa, _bacf := _bec.(_f.EndElement); _bacf && _daa.Name == start.Name {
			break
		}
	}
	return nil
}

type RFC3066 struct{}

func (_feg *IMT) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_ad, _eaf := d.Token()
		if _eaf != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0049\u004d\u0054\u003a\u0020\u0025\u0073", _eaf)
		}
		if _fef, _egd := _ad.(_f.EndElement); _egd && _fef.Name == start.Name {
			break
		}
	}
	return nil
}

func NewRFC3066() *RFC3066 { _dd := &RFC3066{}; return _dd }

func (_afb *TGN) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0054\u0047\u004e"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type URI struct{}

func NewElementOrRefinementContainer() *ElementOrRefinementContainer {
	_gf := &ElementOrRefinementContainer{}
	return _gf
}

// ValidateWithPath validates the RFC1766 and its children, prefixing error messages with path
func (_dfeg *RFC1766) ValidateWithPath(path string) error { return nil }

func NewDDC() *DDC { _fg := &DDC{}; return _fg }

// ValidateWithPath validates the LCSH and its children, prefixing error messages with path
func (_da *LCSH) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the DCMIType and its children, prefixing error messages with path
func (_cc *DCMIType) ValidateWithPath(path string) error { return nil }

func NewRFC1766() *RFC1766 { _cbe := &RFC1766{}; return _cbe }

func (_cf *DDC) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_gg, _cd := d.Token()
		if _cd != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0044\u0044\u0043\u003a\u0020\u0025\u0073", _cd)
		}
		if _ea, _ab := _gg.(_f.EndElement); _ab && _ea.Name == start.Name {
			break
		}
	}
	return nil
}

type Point struct{}

// ValidateWithPath validates the ElementOrRefinementContainer and its children, prefixing error messages with path
func (_bf *ElementOrRefinementContainer) ValidateWithPath(path string) error {
	for _aa, _ecf := range _bf.Choice {
		if _cca := _ecf.ValidateWithPath(_eb.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _aa)); _cca != nil {
			return _cca
		}
	}
	return nil
}

type LCC struct{}

func (_cdc *ISO3166) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0049S\u004f\u0033\u0031\u0036\u0036"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_ef *Box) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0042\u006f\u0078"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

// Validate validates the RFC1766 and its children
func (_abe *RFC1766) Validate() error {
	return _abe.ValidateWithPath("\u0052F\u0043\u0031\u0037\u0036\u0036")
}

// Validate validates the LCC and its children
func (_gcf *LCC) Validate() error { return _gcf.ValidateWithPath("\u004c\u0043\u0043") }

func NewDCMIType() *DCMIType { _d := &DCMIType{}; return _d }

func (_cfgf *URI) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0055\u0052\u0049"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_eeea *ISO639_2) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0049\u0053\u004f\u0036\u0033\u0039\u002d\u0032"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type W3CDTF struct{}

func NewElementsAndRefinementsGroup() *ElementsAndRefinementsGroup {
	_cdd := &ElementsAndRefinementsGroup{}
	return _cdd
}

// Validate validates the IMT and its children
func (_eege *IMT) Validate() error { return _eege.ValidateWithPath("\u0049\u004d\u0054") }

// ValidateWithPath validates the Point and its children, prefixing error messages with path
func (_cfd *Point) ValidateWithPath(path string) error { return nil }

// Validate validates the Box and its children
func (_ff *Box) Validate() error { return _ff.ValidateWithPath("\u0042\u006f\u0078") }

func (_eag *ISO639_2) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_gfe, _cae := d.Token()
		if _cae != nil {
			return _eb.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0049\u0053\u004f6\u0033\u0039\u005f\u0032: \u0025\u0073", _cae)
		}
		if _gebc, _acc := _gfe.(_f.EndElement); _acc && _gebc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the DDC and its children, prefixing error messages with path
func (_ce *DDC) ValidateWithPath(path string) error { return nil }

func (_fgc *IMT) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Name.Local = "\u0049\u004d\u0054"
	e.EncodeToken(start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

func (_fad *LCC) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_eed, _fag := d.Token()
		if _fag != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u004c\u0043\u0043\u003a\u0020\u0025\u0073", _fag)
		}
		if _cgb, _dee := _eed.(_f.EndElement); _dee && _cgb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gec *TGN) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_fce, _faa := d.Token()
		if _faa != nil {
			return _eb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0054\u0047\u004e\u003a\u0020\u0025\u0073", _faa)
		}
		if _abeg, _ggf := _fce.(_f.EndElement); _ggf && _abeg.Name == start.Name {
			break
		}
	}
	return nil
}

type ISO3166 struct{}

// Validate validates the ISO3166 and its children
func (_dgf *ISO3166) Validate() error {
	return _dgf.ValidateWithPath("\u0049S\u004f\u0033\u0031\u0036\u0036")
}

// Validate validates the W3CDTF and its children
func (_eae *W3CDTF) Validate() error {
	return _eae.ValidateWithPath("\u0057\u0033\u0043\u0044\u0054\u0046")
}

func (_bgb *ISO3166) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_bdd, _fgb := d.Token()
		if _fgb != nil {
			return _eb.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0049\u0053\u004f\u0033\u0031\u0036\u0036\u003a\u0020\u0025\u0073", _fgb)
		}
		if _efd, _eac := _bdd.(_f.EndElement); _eac && _efd.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fbd *RFC1766) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_egdg, _gaaa := d.Token()
		if _gaaa != nil {
			return _eb.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0052\u0046\u0043\u0031\u0037\u0036\u0036\u003a\u0020\u0025\u0073", _gaaa)
		}
		if _cfg, _cea := _egdg.(_f.EndElement); _cea && _cfg.Name == start.Name {
			break
		}
	}
	return nil
}

func NewISO639_2() *ISO639_2 { _geb := &ISO639_2{}; return _geb }

func (_egf *Point) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for {
		_cgf, _ffc := d.Token()
		if _ffc != nil {
			return _eb.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0050\u006f\u0069\u006et\u003a\u0020\u0025\u0073", _ffc)
		}
		if _eec, _bff := _cgf.(_f.EndElement); _bff && _eec.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the Box and its children, prefixing error messages with path
func (_bag *Box) ValidateWithPath(path string) error { return nil }

func init() {
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004c\u0043\u0053\u0048", NewLCSH)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004d\u0045\u0053\u0048", NewMESH)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0044\u0044\u0043", NewDDC)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u004c\u0043\u0043", NewLCC)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0055\u0044\u0043", NewUDC)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0050\u0065\u0072\u0069\u006f\u0064", NewPeriod)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0057\u0033\u0043\u0044\u0054\u0046", NewW3CDTF)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0044\u0043\u004d\u0049\u0054\u0079\u0070\u0065", NewDCMIType)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049\u004d\u0054", NewIMT)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0055\u0052\u0049", NewURI)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049\u0053\u004f\u0036\u0033\u0039\u002d\u0032", NewISO639_2)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0052F\u0043\u0031\u0037\u0036\u0036", NewRFC1766)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0052F\u0043\u0033\u0030\u0036\u0036", NewRFC3066)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0050\u006f\u0069n\u0074", NewPoint)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0049S\u004f\u0033\u0031\u0036\u0036", NewISO3166)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0042\u006f\u0078", NewBox)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0054\u0047\u004e", NewTGN)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "\u0065\u006c\u0065\u006de\u006e\u0074\u004f\u0072\u0052\u0065\u0066\u0069\u006e\u0065m\u0065n\u0074\u0043\u006f\u006e\u0074\u0061\u0069n\u0065\u0072", NewElementOrRefinementContainer)
	_b.RegisterConstructor("\u0068t\u0074\u0070\u003a\u002f/\u0070\u0075\u0072\u006c\u002eo\u0072g\u002fd\u0063\u002f\u0074\u0065\u0072\u006d\u0073/", "e\u006c\u0065\u006d\u0065\u006e\u0074s\u0041\u006e\u0064\u0052\u0065\u0066\u0069\u006e\u0065m\u0065\u006e\u0074s\u0047r\u006f\u0075\u0070", NewElementsAndRefinementsGroup)
}
