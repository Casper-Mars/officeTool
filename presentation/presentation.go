//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation

import (
	_bg "archive/zip"
	_d "bytes"
	_fe "encoding/xml"
	_ea "errors"
	_cb "fmt"
	_eb "github.com/Casper-Mars/officeTool"
	_b "github.com/Casper-Mars/officeTool/common"
	_ad "github.com/Casper-Mars/officeTool/common/license"
	_cf "github.com/Casper-Mars/officeTool/common/tempstorage"
	_gb "github.com/Casper-Mars/officeTool/drawing"
	_f "github.com/Casper-Mars/officeTool/measurement"
	_cbg "github.com/Casper-Mars/officeTool/schema/soo/dml"
	_fd "github.com/Casper-Mars/officeTool/schema/soo/dml/chart"
	_bb "github.com/Casper-Mars/officeTool/schema/soo/ofc/sharedTypes"
	_dd "github.com/Casper-Mars/officeTool/schema/soo/pkg/relationships"
	_gd "github.com/Casper-Mars/officeTool/schema/soo/pml"
	_c "github.com/Casper-Mars/officeTool/zippkg"
	_e "image"
	_ab "image/jpeg"
	_cfd "io"
	_ae "log"
	_bgc "os"
	_ff "path"
	_a "strconv"
	_gf "strings"
)

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_ebc *Presentation) AddSlideWithLayout(l SlideLayout) (Slide, error) {
	_bgff := _gd.NewCT_SlideIdListEntry()
	_bgff.IdAttr = 256
	for _, _dca := range _ebc._cfdc.SldIdLst.SldId {
		if _dca.IdAttr >= _bgff.IdAttr {
			_bgff.IdAttr = _dca.IdAttr + 1
		}
	}
	_ebc._cfdc.SldIdLst.SldId = append(_ebc._cfdc.SldIdLst.SldId, _bgff)
	_ggg := _gd.NewSld()
	_fcaf := _d.Buffer{}
	_agf := _fe.NewEncoder(&_fcaf)
	_egd := _fe.StartElement{Name: _fe.Name{Local: "\u0073\u006c\u0069d\u0065"}}
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0070"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"})
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	_egd.Attr = append(_egd.Attr, _fe.Attr{Name: _fe.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	if _geb := l._aadf.CSld.MarshalXML(_agf, _egd); _geb != nil {
		return Slide{}, _geb
	}
	_agf.Flush()
	_ecg := _fe.NewDecoder(&_fcaf)
	_ggg.CSld = _gd.NewCT_CommonSlideData()
	if _gdc := _ecg.Decode(_ggg.CSld); _gdc != nil {
		return Slide{}, _gdc
	}
	_ggg.CSld.NameAttr = nil
	_ggg.CSld.SpTree.Choice = _feea(_ggg.CSld.SpTree.Choice)
	_ebc._ca = append(_ebc._ca, _ggg)
	_fda := _ebc._ag.AddAutoRelationship(_eb.DocTypePresentation, _eb.OfficeDocumentType, len(_ebc._ca), _eb.SlideType)
	_bgff.RIdAttr = _fda.ID()
	_cbgg := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideType, len(_ebc._ca))
	_ebc.ContentTypes.AddOverride(_cbgg, _eb.SlideContentType)
	_aade := _b.NewRelationships()
	_ebc._aad = append(_ebc._aad, _aade)
	_cfg := len(_ebc._aad) - 1
	for _bddd, _bdc := range _ebc._gba {
		if _bdc == l.X() {
			_gdcb := _ebc._fcg[_bddd]
			for _, _def := range _gdcb.X().Relationship {
				if _def.TypeAttr != _eb.SlideMasterType {
					_ebc._aad[_cfg].X().Relationship = append(_ebc._aad[_cfg].X().Relationship, _def)
				}
			}
			_aade.AddAutoRelationship(_eb.DocTypePresentation, _eb.SlideType, _bddd+1, _eb.SlideLayoutType)
		}
	}
	_efc := Slide{_bgff, _ggg, _ebc}
	return _efc, nil
}

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties() PresentationProperties {
	return PresentationProperties{_ac: _gd.NewPresentationPr()}
}

// Properties returns the properties of the TextBox.
func (_fdff TextBox) Properties() _gb.ShapeProperties {
	if _fdff._ebdd.SpPr == nil {
		_fdff._ebdd.SpPr = _cbg.NewCT_ShapeProperties()
	}
	return _gb.MakeShapeProperties(_fdff._ebdd.SpPr)
}

// Type returns the placeholder type
func (_cfc PlaceHolder) Type() _gd.ST_PlaceholderType { return _cfc._ebe.NvSpPr.NvPr.Ph.TypeAttr }

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_edcc *Presentation) Close() error {
	if _edcc.TmpPath != "" {
		return _cf.RemoveAll(_edcc.TmpPath)
	}
	return nil
}

func (_bgdd *Presentation) addCustomRelationships() {
	_bgdd.ContentTypes.AddOverride("/\u0064o\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063u\u0073\u0074\u006f\u006d.x\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065n\u0078\u006d\u006c\u0066\u006fr\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0063\u0075\u0073\u0074\u006f\u006d\u002d\u0070r\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073+\u0078\u006d\u006c")
	_bgdd.Rels.AddRelationship("\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c", _eb.CustomPropertiesType)
}

// AddImage adds an image textbox to a slide.
func (_cea Slide) AddImage(img _b.ImageRef) Image {
	_ggb := _gd.NewCT_GroupShapeChoice()
	_cea._fddg.CSld.SpTree.Choice = append(_cea._fddg.CSld.SpTree.Choice, _ggb)
	_aaff := _gd.NewCT_Picture()
	_ggb.Pic = append(_ggb.Pic, _aaff)
	_aaff.NvPicPr.CNvPicPr = _cbg.NewCT_NonVisualPictureProperties()
	_aaff.NvPicPr.CNvPicPr.PicLocks = _cbg.NewCT_PictureLocking()
	_aaff.NvPicPr.CNvPicPr.PicLocks.NoChangeAspectAttr = _eb.Bool(true)
	_aaff.BlipFill = _cbg.NewCT_BlipFillProperties()
	_aaff.BlipFill.Blip = _cbg.NewCT_Blip()
	_afaa := _cea.AddImageToRels(img)
	_aaff.BlipFill.Blip.EmbedAttr = _eb.String(_afaa)
	_aaff.BlipFill.Stretch = _cbg.NewCT_StretchInfoProperties()
	_aaff.BlipFill.Stretch.FillRect = _cbg.NewCT_RelativeRect()
	_aaff.SpPr = _cbg.NewCT_ShapeProperties()
	_aaff.SpPr.PrstGeom = _cbg.NewCT_PresetGeometry2D()
	_aaff.SpPr.PrstGeom.PrstAttr = _cbg.ST_ShapeTypeRect
	_ebec := Image{_aaff}
	_gae := img.Size()
	_ebec.Properties().SetWidth(_f.Distance(_gae.X) * _f.Pixel72)
	_ebec.Properties().SetHeight(_f.Distance(_gae.Y) * _f.Pixel72)
	_ebec.Properties().SetPosition(0, 0)
	return _ebec
}

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_bac Slide) AddImageToRels(img _b.ImageRef) string {
	_aafa := 0
	for _accg, _dcbb := range _bac._agb.Images {
		if _dcbb == img {
			_aafa = _accg + 1
			break
		}
	}
	var _egg string
	for _dffe, _bdf := range _bac._agb.Slides() {
		if _bdf._fddg == _bac._fddg {
			_cbgf := _cb.Sprintf("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073", _aafa, img.Format())
			_eede := _bac._agb._aad[_dffe].AddRelationship(_cbgf, _eb.ImageType)
			_egg = _eede.ID()
		}
	}
	return _egg
}

// PresentationProperties contains document specific properties.
type PresentationProperties struct{ _ac *_gd.PresentationPr }

func (_bfbe *Presentation) onNewRelationship(_ffe *_c.DecodeMap, _adcg, _ced string, _cbaf []*_bg.File, _efe *_dd.Relationship, _gfb _c.Target) error {
	_ccb := _eb.DocTypePresentation
	switch _ced {
	case _eb.OfficeDocumentType:
		_bfbe._cfdc = _gd.NewPresentation()
		_ffe.AddTarget(_adcg, _bfbe._cfdc, _ced, 0)
		_ffe.AddTarget(_c.RelationsPathFor(_adcg), _bfbe._ag.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.CorePropertiesType:
		_ffe.AddTarget(_adcg, _bfbe.CoreProperties.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.CustomPropertiesType:
		_ffe.AddTarget(_adcg, _bfbe.CustomProperties.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.PresentationPropertiesType:
		_ffe.AddTarget(_adcg, _bfbe._ga.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.ViewPropertiesType:
		_ffe.AddTarget(_adcg, _bfbe._db.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.TableStylesType:
		_ffe.AddTarget(_adcg, _bfbe._add.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.HyperLinkType:
		_ada := _cbg.NewCT_Hyperlink()
		_cge := uint32(len(_bfbe._eeb))
		_ffe.AddTarget(_adcg, _ada, _ced, _cge)
		_bfbe._eeb = append(_bfbe._eeb, _ada)
	case _eb.CustomXMLType:
		_ega := &_eb.XSDAny{}
		_fdf := uint32(len(_bfbe._ede))
		_ffe.AddTarget(_adcg, _ega, _ced, _fdf)
		_bfbe._ede = append(_bfbe._ede, _ega)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._ede))
	case _eb.ChartType:
		_fabb := _fd.NewChartSpace()
		_cbc := uint32(len(_bfbe._eac))
		_ffe.AddTarget(_adcg, _fabb, _ced, _cbc)
		_bfbe._eac = append(_bfbe._eac, _fabb)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._eac))
	case _eb.HandoutMasterType:
		_dfcd := _gd.NewHandoutMaster()
		_dfg := uint32(len(_bfbe._fgg))
		_ffe.AddTarget(_adcg, _dfcd, _ced, _dfg)
		_bfbe._fgg = append(_bfbe._fgg, _dfcd)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._fgg))
	case _eb.NotesMasterType:
		_dge := _gd.NewNotesMaster()
		_afe := uint32(len(_bfbe._ecb))
		_ffe.AddTarget(_adcg, _dge, _ced, _afe)
		_bfbe._ecb = append(_bfbe._ecb, _dge)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._ecb))
	case _eb.ExtendedPropertiesType:
		_ffe.AddTarget(_adcg, _bfbe.AppProperties.X(), _ced, 0)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, 0)
	case _eb.SlideType:
		_abc := _gd.NewSld()
		_bfbe._ca = append(_bfbe._ca, _abc)
		_ffe.AddTarget(_adcg, _abc, _ced, uint32(len(_bfbe._ca)))
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._ca))
		_acb := _b.NewRelationships()
		_ffe.AddTarget(_c.RelationsPathFor(_adcg), _acb.X(), _ced, 0)
		_bfbe._aad = append(_bfbe._aad, _acb)
	case _eb.SlideMasterType:
		_edbd := _gd.NewSldMaster()
		if !_ffe.AddTarget(_adcg, _edbd, _ced, uint32(len(_bfbe._da)+1)) {
			return nil
		}
		_bfbe._da = append(_bfbe._da, _edbd)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._da))
		_ffee := _b.NewRelationships()
		_ffe.AddTarget(_c.RelationsPathFor(_adcg), _ffee.X(), _ced, 0)
		_bfbe._gbbb = append(_bfbe._gbbb, _ffee)
	case _eb.SlideLayoutType:
		_aac := _gd.NewSldLayout()
		if !_ffe.AddTarget(_adcg, _aac, _ced, uint32(len(_bfbe._gba)+1)) {
			return nil
		}
		_bfbe._gba = append(_bfbe._gba, _aac)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._gba))
		_dfgf := _b.NewRelationships()
		_ffe.AddTarget(_c.RelationsPathFor(_adcg), _dfgf.X(), _ced, 0)
		_bfbe._fcg = append(_bfbe._fcg, _dfgf)
	case _eb.ThumbnailType:
		for _bbab, _aea := range _cbaf {
			if _aea == nil {
				continue
			}
			if _aea.Name == _adcg {
				_gda, _ecbd := _aea.Open()
				if _ecbd != nil {
					return _cb.Errorf("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073", _ecbd)
				}
				_bfbe.Thumbnail, _, _ecbd = _e.Decode(_gda)
				_gda.Close()
				if _ecbd != nil {
					return _cb.Errorf("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073", _ecbd)
				}
				_cbaf[_bbab] = nil
			}
		}
	case _eb.ThemeType:
		_fccc := _cbg.NewTheme()
		if !_ffe.AddTarget(_adcg, _fccc, _ced, uint32(len(_bfbe._cfa)+1)) {
			return nil
		}
		_bfbe._cfa = append(_bfbe._cfa, _fccc)
		_efe.TargetAttr = _eb.RelativeFilename(_ccb, _gfb.Typ, _ced, len(_bfbe._cfa))
		_fbg := _b.NewRelationships()
		_ffe.AddTarget(_c.RelationsPathFor(_adcg), _fbg.X(), _ced, 0)
		_bfbe._ddf = append(_bfbe._ddf, _fbg)
	case _eb.ImageType:
		_adcg = _ff.Clean(_adcg)
		if _dfga, _dfb := _bfbe._gab[_adcg]; _dfb {
			_efe.TargetAttr = _dfga
			return nil
		}
		_gge := ""
		for _eagd, _deg := range _cbaf {
			if _deg == nil {
				continue
			}
			if _deg.Name == _adcg {
				_gaa, _dbf := _c.ExtractToDiskTmp(_deg, _bfbe.TmpPath)
				if _dbf != nil {
					return _dbf
				}
				_eff, _dbf := _b.ImageFromStorage(_gaa)
				if _dbf != nil {
					return _dbf
				}
				_gge = _eff.Format
				_baae := _b.MakeImageRef(_eff, &_bfbe.DocBase, _bfbe._ag)
				_bfbe.Images = append(_bfbe.Images, _baae)
				_cbaf[_eagd] = nil
				_ffe.RecordIndex(_adcg, len(_bfbe.Images))
				break
			}
		}
		_eeda := _ffe.IndexFor(_adcg)
		_efe.TargetAttr = _eb.RelativeImageFilename(_ccb, _gfb.Typ, _ced, _eeda, _gge)
		_bfbe._gab[_adcg] = _efe.TargetAttr
	default:
		_eb.Log("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073", _ced, _adcg)
	}
	return nil
}

// Index returns the placeholder index
func (_feg PlaceHolder) Index() uint32 {
	if _feg._ebe.NvSpPr.NvPr.Ph.IdxAttr == nil {
		return 0
	}
	return *_feg._ebe.NvSpPr.NvPr.Ph.IdxAttr
}

// AddTextBox adds an empty textbox to a slide.
func (_dcb Slide) AddTextBox() TextBox {
	_bee := _gd.NewCT_GroupShapeChoice()
	_dcb._fddg.CSld.SpTree.Choice = append(_dcb._fddg.CSld.SpTree.Choice, _bee)
	_cdcb := _gd.NewCT_Shape()
	_bee.Sp = append(_bee.Sp, _cdcb)
	_cdcb.SpPr = _cbg.NewCT_ShapeProperties()
	_cdcb.SpPr.Xfrm = _cbg.NewCT_Transform2D()
	_cdcb.SpPr.PrstGeom = _cbg.NewCT_PresetGeometry2D()
	_cdcb.SpPr.PrstGeom.PrstAttr = _cbg.ST_ShapeTypeRect
	_cdcb.NvSpPr = _gd.NewCT_ShapeNonVisual()
	_cdcb.NvSpPr.CNvSpPr = _cbg.NewCT_NonVisualDrawingShapeProps()
	_fac := true
	_cdcb.NvSpPr.CNvSpPr.TxBoxAttr = &_fac
	_cdcb.TxBody = _cbg.NewCT_TextBody()
	_cdcb.TxBody.BodyPr = _cbg.NewCT_TextBodyProperties()
	_cdcb.TxBody.BodyPr.WrapAttr = _cbg.ST_TextWrappingTypeSquare
	_cdcb.TxBody.BodyPr.SpAutoFit = _cbg.NewCT_TextShapeAutofit()
	_bfgf := TextBox{_cdcb}
	_bfgf.Properties().SetWidth(3 * _f.Inch)
	_bfgf.Properties().SetHeight(1 * _f.Inch)
	_bfgf.Properties().SetPosition(0, 0)
	return _bfgf
}

// Presentation is the a presentation base document.
type Presentation struct {
	_b.DocBase
	_cfdc *_gd.Presentation
	_ag   _b.Relationships
	_ca   []*_gd.Sld
	_aad  []_b.Relationships
	_da   []*_gd.SldMaster
	_gbbb []_b.Relationships
	_gba  []*_gd.SldLayout
	_fcg  []_b.Relationships
	_cfa  []*_cbg.Theme
	_ddf  []_b.Relationships
	_add  _b.TableStyles
	_ga   PresentationProperties
	_db   ViewProperties
	_eeb  []*_cbg.CT_Hyperlink
	_eac  []*_fd.ChartSpace
	_fgg  []*_gd.HandoutMaster
	_ecb  []*_gd.NotesMaster
	_ede  []*_eb.XSDAny
	_gab  map[string]string
}

// Image is an image within a slide.
type Image struct{ _bc *_gd.CT_Picture }

var _cga = false

// GetOrCreateCustomProperties returns the custom properties of the document (and if they not exist yet, creating them first)
func (_ffb *Presentation) GetOrCreateCustomProperties() _b.CustomProperties {
	if _ffb.CustomProperties.X() == nil {
		_ffb.createCustomProperties()
	}
	return _ffb.CustomProperties
}

// NormalViewPr returns the NormalViewPr property.
func (_ddg ViewProperties) NormalViewPr() *_gd.CT_NormalViewProperties {
	return _ddg._dde.NormalViewPr
}

// PrnPr returns the PrnPr property.
func (_fg PresentationProperties) PrnPr() *_gd.CT_PrintProperties { return _fg._ac.PrnPr }

// ShowPr returns the ShowPr property.
func (_cc PresentationProperties) ShowPr() *_gd.CT_ShowProperties { return _cc._ac.ShowPr }

// GetLayoutByName retrieves a slide layout given a layout name.
func (_dbd *Presentation) GetLayoutByName(name string) (SlideLayout, error) {
	for _, _cgb := range _dbd._gba {
		if _cgb.CSld.NameAttr != nil && name == *_cgb.CSld.NameAttr {
			return SlideLayout{_cgb}, nil
		}
	}
	return SlideLayout{}, _ea.New("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065")
}

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_fcgd *Presentation) AddDefaultSlideWithLayout(l SlideLayout) (Slide, error) {
	_edc, _ded := _fcgd.AddSlideWithLayout(l)
	for _, _fgc := range _edc.PlaceHolders() {
		_fgc.Clear()
		switch _fgc.Type() {
		case _gd.ST_PlaceholderTypeFtr, _gd.ST_PlaceholderTypeDt, _gd.ST_PlaceholderTypeSldNum:
			_fgc.Remove()
		}
	}
	return _edc, _ded
}

// X returns the inner wrapped XML type.
func (_cdba SlideMaster) X() *_gd.SldMaster { return _cdba._bca }

// X returns the inner wrapped XML type.
func (_ffg *Presentation) X() *_gd.Presentation { return _ffg._cfdc }

func (_dfa *Presentation) save(_fffg _cfd.Writer, _ggga bool) error {
	if _cdg := _dfa._cfdc.Validate(); _cdg != nil {
		_ae.Printf("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _cdg)
	}
	if !_ad.GetLicenseKey().IsLicensed() && !_cga {
		_cb.Println("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065")
		_cb.Println("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
		return _ea.New("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064")
	}
	if _ggga {
		_dfa.ContentTypes.RemoveOverride("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_dfa.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	} else {
		_dfa.ContentTypes.RemoveOverride("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
		_dfa.ContentTypes.EnsureOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	}
	_bbf := _eb.DocTypePresentation
	_fag := _bg.NewWriter(_fffg)
	defer _fag.Close()
	if _gea := _c.MarshalXML(_fag, _eb.BaseRelsFilename, _dfa.Rels.X()); _gea != nil {
		return _gea
	}
	if _gfa := _c.MarshalXMLByType(_fag, _bbf, _eb.ExtendedPropertiesType, _dfa.AppProperties.X()); _gfa != nil {
		return _gfa
	}
	if _fcd := _c.MarshalXMLByType(_fag, _bbf, _eb.CorePropertiesType, _dfa.CoreProperties.X()); _fcd != nil {
		return _fcd
	}
	if _ceb := _c.MarshalXMLByType(_fag, _bbf, _eb.PresentationPropertiesType, _dfa._ga.X()); _ceb != nil {
		return _ceb
	}
	if _age := _c.MarshalXMLByType(_fag, _bbf, _eb.ViewPropertiesType, _dfa._db.X()); _age != nil {
		return _age
	}
	if _bfc := _c.MarshalXMLByType(_fag, _bbf, _eb.TableStylesType, _dfa._add.X()); _bfc != nil {
		return _bfc
	}
	if _dfa.CustomProperties.X() != nil {
		if _bef := _c.MarshalXMLByType(_fag, _bbf, _eb.CustomPropertiesType, _dfa.CustomProperties.X()); _bef != nil {
			return _bef
		}
	}
	if _dfa.Thumbnail != nil {
		_acc, _gbd := _fag.Create("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067")
		if _gbd != nil {
			return _gbd
		}
		if _agfd := _ab.Encode(_acc, _dfa.Thumbnail, nil); _agfd != nil {
			return _agfd
		}
	}
	_eeg := _eb.AbsoluteFilename(_bbf, _eb.OfficeDocumentType, 0)
	if _efd := _c.MarshalXML(_fag, _eeg, _dfa._cfdc); _efd != nil {
		return _efd
	}
	if _ffgd := _c.MarshalXML(_fag, _c.RelationsPathFor(_eeg), _dfa._ag.X()); _ffgd != nil {
		return _ffgd
	}
	for _edcf, _dce := range _dfa._ca {
		_gbac := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideType, _edcf+1)
		_c.MarshalXML(_fag, _gbac, _dce)
		if !_dfa._aad[_edcf].IsEmpty() {
			_gaf := _c.RelationsPathFor(_gbac)
			_c.MarshalXML(_fag, _gaf, _dfa._aad[_edcf].X())
		}
	}
	for _ddfa, _eag := range _dfa._da {
		_dac := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideMasterType, _ddfa+1)
		_c.MarshalXML(_fag, _dac, _eag)
		if !_dfa._gbbb[_ddfa].IsEmpty() {
			_ggf := _c.RelationsPathFor(_dac)
			_c.MarshalXML(_fag, _ggf, _dfa._gbbb[_ddfa].X())
		}
	}
	for _dgc, _fcf := range _dfa._gba {
		_cbf := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideLayoutType, _dgc+1)
		_c.MarshalXML(_fag, _cbf, _fcf)
		if !_dfa._fcg[_dgc].IsEmpty() {
			_gfaf := _c.RelationsPathFor(_cbf)
			_c.MarshalXML(_fag, _gfaf, _dfa._fcg[_dgc].X())
		}
	}
	for _dda, _faf := range _dfa._cfa {
		_agd := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.ThemeType, _dda+1)
		_c.MarshalXML(_fag, _agd, _faf)
		if !_dfa._ddf[_dda].IsEmpty() {
			_edcfc := _c.RelationsPathFor(_agd)
			_c.MarshalXML(_fag, _edcfc, _dfa._ddf[_dda].X())
		}
	}
	for _eacd, _fcc := range _dfa._eac {
		_edd := _eb.AbsoluteFilename(_bbf, _eb.ChartType, _eacd+1)
		_c.MarshalXML(_fag, _edd, _fcc)
	}
	for _gef, _dgdc := range _dfa._fgg {
		_gbf := _eb.AbsoluteFilename(_bbf, _eb.HandoutMasterType, _gef+1)
		_c.MarshalXML(_fag, _gbf, _dgdc)
	}
	for _dcf, _ebea := range _dfa._ecb {
		_fbe := _eb.AbsoluteFilename(_bbf, _eb.NotesMasterType, _dcf+1)
		_c.MarshalXML(_fag, _fbe, _ebea)
	}
	for _fegd, _gac := range _dfa._ede {
		_gdd := _eb.AbsoluteFilename(_bbf, _eb.CustomXMLType, _fegd+1)
		_c.MarshalXML(_fag, _gdd, _gac)
	}
	for _ddb, _dfc := range _dfa.Images {
		if _edb := _b.AddImageToZip(_fag, _dfc, _ddb+1, _eb.DocTypePresentation); _edb != nil {
			return _edb
		}
	}
	_dfa.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_dfa.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_dfa.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_dfa.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	if _fgb := _c.MarshalXML(_fag, _eb.ContentTypesFilename, _dfa.ContentTypes.X()); _fgb != nil {
		return _fgb
	}
	if _eddb := _dfa.WriteExtraFiles(_fag); _eddb != nil {
		return _eddb
	}
	return nil
}

// X returns the inner wrapped XML type.
func (_fddgc Slide) X() *_gd.Sld { return _fddgc._fddg }

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_aa PlaceHolder) Clear() {
	_aa.ClearAll()
	_dc := _cbg.NewCT_TextParagraph()
	_aa._ebe.TxBody.P = []*_cbg.CT_TextParagraph{_dc}
	_dc.EndParaRPr = _cbg.NewCT_TextCharacterProperties()
	_dc.EndParaRPr.LangAttr = _eb.String("\u0065\u006e\u002dU\u0053")
}

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_bfd Slide) ValidateWithPath(path string) error {
	if _fbff := _bfd._fddg.ValidateWithPath(path); _fbff != nil {
		return _fbff
	}
	for _, _dacee := range _bfd._fddg.CSld.SpTree.Choice {
		for _, _edgb := range _dacee.Sp {
			if _edgb.TxBody != nil {
				if len(_edgb.TxBody.P) == 0 {
					return _ea.New(path + "\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073")
				}
			}
		}
	}
	return nil
}

// AddParagraph adds a new paragraph to a placeholder.
func (_abd PlaceHolder) AddParagraph() _gb.Paragraph {
	_ed := _gb.MakeParagraph(_cbg.NewCT_TextParagraph())
	_abd._ebe.TxBody.P = append(_abd._ebe.TxBody.P, _ed.X())
	return _ed
}

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_geg *Presentation) GetImageByRelID(relID string) (_b.ImageRef, bool) {
	for _, _fef := range _geg.Images {
		if _fef.RelID() == relID {
			return _fef, true
		}
	}
	return _b.ImageRef{}, false
}

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_edbf TextBox) SetOffsetX(offX float64) {
	_gaac := _edbf.getOff()
	_bddc := _f.ToEMU(offX)
	_gaac.XAttr = _cbg.ST_Coordinate{ST_CoordinateUnqualified: &_bddc}
}

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_afc Slide) GetPlaceholderByIndex(idx uint32) (PlaceHolder, error) {
	for _, _gdga := range _afc._fddg.CSld.SpTree.Choice {
		for _, _bcg := range _gdga.Sp {
			if _bcg.NvSpPr != nil && _bcg.NvSpPr.NvPr != nil && _bcg.NvSpPr.NvPr.Ph != nil {
				if (idx == 0 && _bcg.NvSpPr.NvPr.Ph.IdxAttr == nil) || (_bcg.NvSpPr.NvPr.Ph.IdxAttr != nil && *_bcg.NvSpPr.NvPr.Ph.IdxAttr == idx) {
					return PlaceHolder{_bcg, _afc._fddg}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _ea.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_eef *Presentation) SaveToFileAsTemplate(path string) error {
	return _eef.saveToFile(path, true)
}

func _fge() *Presentation {
	_dff := &Presentation{_cfdc: _gd.NewPresentation()}
	_dff._cfdc.SldIdLst = _gd.NewCT_SlideIdList()
	_dff._cfdc.ConformanceAttr = _bb.ST_ConformanceClassTransitional
	_dff.AppProperties = _b.NewAppProperties()
	_dff.CoreProperties = _b.NewCoreProperties()
	_dff._add = _b.NewTableStyles()
	_dff.ContentTypes = _b.NewContentTypes()
	_dff.Rels = _b.NewRelationships()
	_dff._ag = _b.NewRelationships()
	_dff._ga = NewPresentationProperties()
	_dff._db = NewViewProperties()
	_dff._gab = map[string]string{}
	return _dff
}

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_gca *Presentation) AddImage(i _b.Image) (_b.ImageRef, error) {
	_fbd := _b.MakeImageRef(i, &_gca.DocBase, _gca._ag)
	if i.Data == nil && i.Path == "" {
		return _fbd, _ea.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068")
	}
	if i.Format == "" {
		return _fbd, _ea.New("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074")
	}
	if i.Size.X == 0 || i.Size.Y == 0 {
		return _fbd, _ea.New("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065")
	}
	if i.Path != "" {
		_gcd := _cf.Add(i.Path)
		if _gcd != nil {
			return _fbd, _gcd
		}
	}
	_gca.Images = append(_gca.Images, _fbd)
	_gca.ContentTypes.EnsureDefault("\u0070\u006e\u0067", "\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg")
	_gca.ContentTypes.EnsureDefault("\u006a\u0070\u0065\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_gca.ContentTypes.EnsureDefault("\u006a\u0070\u0067", "\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067")
	_gca.ContentTypes.EnsureDefault("\u0077\u006d\u0066", "i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066")
	_gca.ContentTypes.EnsureDefault(i.Format, "\u0069\u006d\u0061\u0067\u0065\u002f"+i.Format)
	return _fbd, nil
}

// SlideLayouts returns the slide layouts defined in the presentation.
func (_cbe *Presentation) SlideLayouts() []SlideLayout {
	_cbb := []SlideLayout{}
	for _, _eefc := range _cbe._gba {
		_cbb = append(_cbb, SlideLayout{_eefc})
	}
	return _cbb
}

// Slide represents a slide of a presentation.
type Slide struct {
	_edg  *_gd.CT_SlideIdListEntry
	_fddg *_gd.Sld
	_agb  *Presentation
}

// SaveToFile writes the Presentation out to a file.
func (_gad *Presentation) SaveToFile(path string) error { return _gad.saveToFile(path, false) }

// NotesViewPr returns the NotesViewPr property.
func (_eegg ViewProperties) NotesViewPr() *_gd.CT_NotesViewProperties {
	return _eegg._dde.NotesViewPr
}

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_cfb PlaceHolder) SetText(text string) {
	_cfb.Clear()
	_bgcd := _cbg.NewEG_TextRun()
	_bgcd.R = _cbg.NewCT_RegularTextRun()
	_bgcd.R.T = text
	if len(_cfb._ebe.TxBody.P) == 0 {
		_cfb._ebe.TxBody.P = append(_cfb._ebe.TxBody.P, _cbg.NewCT_TextParagraph())
	}
	_cfb._ebe.TxBody.P[0].EG_TextRun = nil
	_cfb._ebe.TxBody.P[0].EG_TextRun = append(_cfb._ebe.TxBody.P[0].EG_TextRun, _bgcd)
}

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_fad Slide) GetPlaceholder(t _gd.ST_PlaceholderType) (PlaceHolder, error) {
	for _, _dfcde := range _fad._fddg.CSld.SpTree.Choice {
		for _, _cbbg := range _dfcde.Sp {
			if _cbbg.NvSpPr != nil && _cbbg.NvSpPr.NvPr != nil && _cbbg.NvSpPr.NvPr.Ph != nil {
				if _cbbg.NvSpPr.NvPr.Ph.TypeAttr == t {
					return PlaceHolder{_cbbg, _fad._fddg}, nil
				}
			}
		}
	}
	return PlaceHolder{}, _ea.New("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072")
}

func (_cgae *Presentation) createCustomProperties() {
	_cgae.CustomProperties = _b.NewCustomProperties()
	_cgae.addCustomRelationships()
}

// SlideMaster is the slide master for a presentation.
type SlideMaster struct {
	_bfe  *Presentation
	_bace _b.Relationships
	_bca  *_gd.SldMaster
}

// ViewProperties contains presentation specific properties.
type ViewProperties struct{ _dde *_gd.ViewPr }

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_gc PlaceHolder) ClearAll() {
	_gc._ebe.SpPr = _cbg.NewCT_ShapeProperties()
	_gc._ebe.TxBody = _cbg.NewCT_TextBody()
	_gc._ebe.TxBody.LstStyle = _cbg.NewCT_TextListStyle()
}

// GetTextBoxes returns a list of all text boxes from a slide.
func (_gfd Slide) GetTextBoxes() []*TextBox {
	_cbag := []*TextBox{}
	_adg := _gfd._fddg.CSld.SpTree.Choice
	for _, _bcff := range _adg {
		for _, _ebf := range _bcff.Sp {
			if _ebf.NvSpPr.CNvSpPr.TxBoxAttr != nil && *_ebf.NvSpPr.CNvSpPr.TxBoxAttr {
				_cbag = append(_cbag, &TextBox{_ebf})
			}
		}
	}
	return _cbag
}

// AddParagraph adds a paragraph to the text box
func (_bdab TextBox) AddParagraph() _gb.Paragraph {
	_fcef := _cbg.NewCT_TextParagraph()
	_bdab._ebdd.TxBody.P = append(_bdab._ebdd.TxBody.P, _fcef)
	return _gb.MakeParagraph(_fcef)
}

// SlideViewPr returns the SlideViewPr property.
func (_gdcd ViewProperties) SlideViewPr() *_gd.CT_SlideViewProperties {
	return _gdcd._dde.SlideViewPr
}

// ShowCommentsAttr returns the WebPr property.
func (_bgcc ViewProperties) ShowCommentsAttr() *bool { return _bgcc._dde.ShowCommentsAttr }

func (_agg *Presentation) saveToFile(_edcfa string, _caa bool) error {
	_gce, _cdcc := _bgc.Create(_edcfa)
	if _cdcc != nil {
		return _cdcc
	}
	defer _gce.Close()
	return _agg.save(_gce, _caa)
}

func (_aaa *Presentation) Validate() error {
	if _bfb := _aaa._cfdc.Validate(); _bfb != nil {
		return _bfb
	}
	for _fbf, _dgf := range _aaa.Slides() {
		if _adf := _dgf.ValidateWithPath(_cb.Sprintf("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]", _fbf)); _adf != nil {
			return _adf
		}
	}
	for _fbb, _gfe := range _aaa._da {
		if _gbaca := _gfe.ValidateWithPath(_cb.Sprintf("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d", _fbb)); _gbaca != nil {
			return _gbaca
		}
	}
	for _agc, _bcb := range _aaa._gba {
		if _ffc := _bcb.ValidateWithPath(_cb.Sprintf("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d", _agc)); _ffc != nil {
			return _ffc
		}
	}
	return nil
}

// PlaceHolders returns all of the content place holders within a given slide.
func (_efb Slide) PlaceHolders() []PlaceHolder {
	_bda := []PlaceHolder{}
	for _, _gead := range _efb._fddg.CSld.SpTree.Choice {
		for _, _fcae := range _gead.Sp {
			if _fcae.NvSpPr != nil && _fcae.NvSpPr.NvPr != nil && _fcae.NvSpPr.NvPr.Ph != nil {
				_bda = append(_bda, PlaceHolder{_fcae, _efb._fddg})
			}
		}
	}
	return _bda
}

// X returns the inner wrapped XML type.
func (_affd SlideLayout) X() *_gd.SldLayout { return _affd._aadf }

// ExtLst returns the ExtLst property.
func (_cdd PresentationProperties) ExtLst() *_gd.CT_ExtensionList { return _cdd._ac.ExtLst }

// New initializes and reurns a new presentation
func New() *Presentation {
	_bgf := _fge()
	_bgf.ContentTypes.AddOverride("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c")
	_bgf.Rels.AddRelationship("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073")
	_bgf.Rels.AddRelationship("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c", "\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073")
	_bgf.Rels.AddRelationship("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074")
	_bgf.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073")
	_bgf.Rels.AddRelationship("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c", "ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073")
	_bgf.Rels.AddRelationship("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c", "\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073")
	_bgf._cfdc.SldMasterIdLst = _gd.NewCT_SlideMasterIdList()
	_dg := _gd.NewSldMaster()
	_dg.ClrMap.Bg1Attr = _cbg.ST_ColorSchemeIndexLt1
	_dg.ClrMap.Bg2Attr = _cbg.ST_ColorSchemeIndexLt2
	_dg.ClrMap.Tx1Attr = _cbg.ST_ColorSchemeIndexDk1
	_dg.ClrMap.Tx2Attr = _cbg.ST_ColorSchemeIndexDk2
	_dg.ClrMap.Accent1Attr = _cbg.ST_ColorSchemeIndexAccent1
	_dg.ClrMap.Accent2Attr = _cbg.ST_ColorSchemeIndexAccent2
	_dg.ClrMap.Accent3Attr = _cbg.ST_ColorSchemeIndexAccent3
	_dg.ClrMap.Accent4Attr = _cbg.ST_ColorSchemeIndexAccent4
	_dg.ClrMap.Accent5Attr = _cbg.ST_ColorSchemeIndexAccent5
	_dg.ClrMap.Accent6Attr = _cbg.ST_ColorSchemeIndexAccent6
	_dg.ClrMap.HlinkAttr = _cbg.ST_ColorSchemeIndexHlink
	_dg.ClrMap.FolHlinkAttr = _cbg.ST_ColorSchemeIndexFolHlink
	_bgf._da = append(_bgf._da, _dg)
	_fae := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideMasterType, 1)
	_bgf.ContentTypes.AddOverride(_fae, _eb.SlideMasterContentType)
	_fce := _bgf._ag.AddAutoRelationship(_eb.DocTypePresentation, _eb.OfficeDocumentType, 1, _eb.SlideMasterType)
	_bba := _gd.NewCT_SlideMasterIdListEntry()
	_bba.IdAttr = _eb.Uint32(2147483648)
	_bba.RIdAttr = _fce.ID()
	_bgf._cfdc.SldMasterIdLst.SldMasterId = append(_bgf._cfdc.SldMasterIdLst.SldMasterId, _bba)
	_eg := _b.NewRelationships()
	_bgf._gbbb = append(_bgf._gbbb, _eg)
	_dgd := _gd.NewSldLayout()
	_bf := _eg.AddAutoRelationship(_eb.DocTypePresentation, _eb.SlideMasterType, 1, _eb.SlideLayoutType)
	_abg := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideLayoutType, 1)
	_bgf.ContentTypes.AddOverride(_abg, _eb.SlideLayoutContentType)
	_eg.AddAutoRelationship(_eb.DocTypePresentation, _eb.SlideMasterType, 1, _eb.ThemeType)
	_bgf._gba = append(_bgf._gba, _dgd)
	_dg.SldLayoutIdLst = _gd.NewCT_SlideLayoutIdList()
	_fff := _gd.NewCT_SlideLayoutIdListEntry()
	_fff.IdAttr = _eb.Uint32(2147483649)
	_fff.RIdAttr = _bf.ID()
	_dg.SldLayoutIdLst.SldLayoutId = append(_dg.SldLayoutIdLst.SldLayoutId, _fff)
	_eda := _b.NewRelationships()
	_bgf._fcg = append(_bgf._fcg, _eda)
	_eda.AddAutoRelationship(_eb.DocTypePresentation, _eb.SlideType, 1, _eb.SlideMasterType)
	_bgf._cfdc.NotesSz.CxAttr = 6858000
	_bgf._cfdc.NotesSz.CyAttr = 9144000
	_eca := _cbg.NewTheme()
	_eca.NameAttr = _eb.String("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065")
	_eca.ThemeElements.ClrScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_eca.ThemeElements.ClrScheme.Dk1.SysClr = _cbg.NewCT_SystemColor()
	_eca.ThemeElements.ClrScheme.Dk1.SysClr.LastClrAttr = _eb.String("\u0030\u0030\u0030\u0030\u0030\u0030")
	_eca.ThemeElements.ClrScheme.Dk1.SysClr.ValAttr = _cbg.ST_SystemColorValWindowText
	_eca.ThemeElements.ClrScheme.Lt1.SysClr = _cbg.NewCT_SystemColor()
	_eca.ThemeElements.ClrScheme.Lt1.SysClr.LastClrAttr = _eb.String("\u0066\u0066\u0066\u0066\u0066\u0066")
	_eca.ThemeElements.ClrScheme.Lt1.SysClr.ValAttr = _cbg.ST_SystemColorValWindow
	_eca.ThemeElements.ClrScheme.Dk2.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Dk2.SrgbClr.ValAttr = "\u0034\u0034\u0035\u0034\u0036\u0061"
	_eca.ThemeElements.ClrScheme.Lt2.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Lt2.SrgbClr.ValAttr = "\u0065\u0037\u0065\u0037\u0065\u0036"
	_eca.ThemeElements.ClrScheme.Accent1.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent1.SrgbClr.ValAttr = "\u0034\u0034\u0037\u0032\u0063\u0034"
	_eca.ThemeElements.ClrScheme.Accent2.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent2.SrgbClr.ValAttr = "\u0065\u0064\u0037\u0064\u0033\u0031"
	_eca.ThemeElements.ClrScheme.Accent3.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent3.SrgbClr.ValAttr = "\u0061\u0035\u0061\u0035\u0061\u0035"
	_eca.ThemeElements.ClrScheme.Accent4.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent4.SrgbClr.ValAttr = "\u0066\u0066\u0063\u0030\u0030\u0030"
	_eca.ThemeElements.ClrScheme.Accent5.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent5.SrgbClr.ValAttr = "\u0035\u0062\u0039\u0062\u0064\u0035"
	_eca.ThemeElements.ClrScheme.Accent6.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Accent6.SrgbClr.ValAttr = "\u0037\u0030\u0061\u0064\u0034\u0037"
	_eca.ThemeElements.ClrScheme.Hlink.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.Hlink.SrgbClr.ValAttr = "\u0030\u0035\u0036\u0033\u0063\u0031"
	_eca.ThemeElements.ClrScheme.FolHlink.SrgbClr = _cbg.NewCT_SRgbColor()
	_eca.ThemeElements.ClrScheme.FolHlink.SrgbClr.ValAttr = "\u0039\u0035\u0034\u0066\u0037\u0032"
	_eca.ThemeElements.FontScheme.NameAttr = "\u004f\u0066\u0066\u0069\u0063\u0065"
	_eca.ThemeElements.FontScheme.MajorFont.Latin.TypefaceAttr = "\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074"
	_eca.ThemeElements.FontScheme.MinorFont.Latin.TypefaceAttr = "\u0043a\u006c\u0069\u0062\u0072\u0069"
	_eca.ThemeElements.FmtScheme.NameAttr = _eb.String("\u004f\u0066\u0066\u0069\u0063\u0065")
	_af := _cbg.NewEG_FillProperties()
	_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _af)
	_af.SolidFill = &_cbg.CT_SolidColorFillProperties{SchemeClr: &_cbg.CT_SchemeColor{ValAttr: _cbg.ST_SchemeColorValPhClr}}
	_af = _cbg.NewEG_FillProperties()
	_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _af)
	_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.FillStyleLst.EG_FillProperties, _af)
	_af.GradFill = &_cbg.CT_GradientFillProperties{RotWithShapeAttr: _eb.Bool(true), GsLst: &_cbg.CT_GradientStopList{}, Lin: &_cbg.CT_LinearShadeProperties{}}
	_af.GradFill.Lin.AngAttr = _eb.Int32(5400000)
	_af.GradFill.Lin.ScaledAttr = _eb.Bool(false)
	_cg := _cbg.NewCT_GradientStop()
	_cg.PosAttr.ST_PositiveFixedPercentageDecimal = _eb.Int32(0)
	_cg.SchemeClr = &_cbg.CT_SchemeColor{ValAttr: _cbg.ST_SchemeColorValPhClr}
	_af.GradFill.GsLst.Gs = append(_af.GradFill.GsLst.Gs, _cg)
	_cg = _cbg.NewCT_GradientStop()
	_cg.PosAttr.ST_PositiveFixedPercentageDecimal = _eb.Int32(50000)
	_cg.SchemeClr = &_cbg.CT_SchemeColor{ValAttr: _cbg.ST_SchemeColorValPhClr}
	_af.GradFill.GsLst.Gs = append(_af.GradFill.GsLst.Gs, _cg)
	_eca.ThemeElements.FmtScheme.LnStyleLst = _cbg.NewCT_LineStyleList()
	for _de := 0; _de < 3; _de++ {
		_afa := _cbg.NewCT_LineProperties()
		_afa.WAttr = _eb.Int32(int32(6350 * (_de + 1)))
		_afa.CapAttr = _cbg.ST_LineCapFlat
		_afa.CmpdAttr = _cbg.ST_CompoundLineSng
		_afa.AlgnAttr = _cbg.ST_PenAlignmentCtr
		_eca.ThemeElements.FmtScheme.LnStyleLst.Ln = append(_eca.ThemeElements.FmtScheme.LnStyleLst.Ln, _afa)
	}
	_eca.ThemeElements.FmtScheme.EffectStyleLst = _cbg.NewCT_EffectStyleList()
	for _bdd := 0; _bdd < 3; _bdd++ {
		_dbe := _cbg.NewCT_EffectStyleItem()
		_dbe.EffectLst = _cbg.NewCT_EffectList()
		_eca.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle = append(_eca.ThemeElements.FmtScheme.EffectStyleLst.EffectStyle, _dbe)
	}
	_cgg := _cbg.NewEG_FillProperties()
	_cgg.SolidFill = &_cbg.CT_SolidColorFillProperties{SchemeClr: &_cbg.CT_SchemeColor{ValAttr: _cbg.ST_SchemeColorValPhClr}}
	_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _cgg)
	_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _cgg)
	_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties = append(_eca.ThemeElements.FmtScheme.BgFillStyleLst.EG_FillProperties, _af)
	_bgf._cfa = append(_bgf._cfa, _eca)
	_ge := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.ThemeType, 1)
	_bgf.ContentTypes.AddOverride(_ge, _eb.ThemeContentType)
	_bgf._ag.AddAutoRelationship(_eb.DocTypePresentation, _eb.OfficeDocumentType, 1, _eb.ThemeType)
	_adc := _b.NewRelationships()
	_bgf._ddf = append(_bgf._ddf, _adc)
	return _bgf
}

// Type returns the type of the slide layout.
func (_ebd SlideLayout) Type() _gd.ST_SlideLayoutType { return _ebd._aadf.TypeAttr }

// SorterViewPr returns the SorterViewPr property.
func (_gbdd ViewProperties) SorterViewPr() *_gd.CT_SlideSorterViewProperties {
	return _gbdd._dde.SorterViewPr
}

// OutlineViewPr returns the OutlineViewPr property.
func (_bde ViewProperties) OutlineViewPr() *_gd.CT_OutlineViewProperties {
	return _bde._dde.OutlineViewPr
}

// Save writes the presentation out to a writer in the Zip package format
func (_bdb *Presentation) Save(w _cfd.Writer) error { return _bdb.save(w, false) }

// GridSpacing returns the GridSpacing property.
func (_ffd ViewProperties) GridSpacing() *_cbg.CT_PositiveSize2D { return _ffd._dde.GridSpacing }

// AddTable adds an empty table to a slide.
func (_cee Slide) AddTable() *_b.Table {
	_ead := _gd.NewCT_GroupShapeChoice()
	_cee._fddg.CSld.SpTree.Choice = append(_cee._fddg.CSld.SpTree.Choice, _ead)
	_bbfa := _gd.NewCT_GraphicalObjectFrame()
	_ead.GraphicFrame = append(_ead.GraphicFrame, _bbfa)
	_bbfa.Xfrm.Off = _cbg.NewCT_Point2D()
	_ebfd := int64(1)
	_bbfa.Xfrm.Off.XAttr = _cbg.ST_Coordinate{ST_CoordinateUnqualified: &_ebfd}
	_bbfa.Xfrm.Off.YAttr = _cbg.ST_Coordinate{ST_CoordinateUnqualified: &_ebfd}
	_dga := _bbfa.Graphic.CT_GraphicalObject.GraphicData
	_dga.UriAttr = "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065"
	_bfa := _b.NewTableWithXfrm(_bbfa.Xfrm)
	_dga.Any = append(_dga.Any, _bfa.X())
	return _bfa
}

// Read reads a document from an io.Reader.
func Read(r _cfd.ReaderAt, size int64) (*Presentation, error) {
	_daf := _fge()
	_edeb, _aed := _cf.TempDir("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078")
	if _aed != nil {
		return nil, _aed
	}
	_daf.TmpPath = _edeb
	_cce, _aed := _bg.NewReader(r, size)
	if _aed != nil {
		return nil, _cb.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073", _aed)
	}
	_ecac := []*_bg.File{}
	_ecac = append(_ecac, _cce.File...)
	_aff := false
	for _, _fcgb := range _ecac {
		if _fcgb.FileHeader.Name == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
			_aff = true
			break
		}
	}
	if _aff {
		_daf.createCustomProperties()
	}
	_fcff := _c.DecodeMap{}
	_fcff.SetOnNewRelationshipFunc(_daf.onNewRelationship)
	_fcff.AddTarget(_eb.ContentTypesFilename, _daf.ContentTypes.X(), "", 0)
	_fcff.AddTarget(_eb.BaseRelsFilename, _daf.Rels.X(), "", 0)
	if _bbae := _fcff.Decode(_ecac); _bbae != nil {
		return nil, _bbae
	}
	for _, _ebce := range _ecac {
		if _ebce == nil {
			continue
		}
		if _fbc := _daf.AddExtraFileFromZip(_ebce); _fbc != nil {
			return nil, _fbc
		}
	}
	if _aff {
		_gbg := false
		for _, _aaaf := range _daf.Rels.X().Relationship {
			if _aaaf.TargetAttr == "\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c" {
				_gbg = true
				break
			}
		}
		if !_gbg {
			_daf.addCustomRelationships()
		}
	}
	return _daf, nil
}

// Paragraphs returns the paragraphs defined in the placeholder.
func (_bgd PlaceHolder) Paragraphs() []_gb.Paragraph {
	_bd := []_gb.Paragraph{}
	for _, _ef := range _bgd._ebe.TxBody.P {
		_bd = append(_bd, _gb.MakeParagraph(_ef))
	}
	return _bd
}

// SlideMasters returns the slide masters defined in the presentation.
func (_aag *Presentation) SlideMasters() []SlideMaster {
	_dace := []SlideMaster{}
	for _aaeg, _gddg := range _aag._da {
		_dace = append(_dace, SlideMaster{_aag, _aag._gbbb[_aaeg], _gddg})
	}
	return _dace
}

// X returns the inner wrapped XML type.
func (_eab ViewProperties) X() *_gd.ViewPr { return _eab._dde }

// X returns TextBox's underlying *pml.CT_Shape.
func (_fdgg TextBox) X() *_gd.CT_Shape { return _fdgg._ebdd }

// TextBox is a text box within a slide.
type TextBox struct{ _ebdd *_gd.CT_Shape }

// OpenTemplate opens a template file.
func OpenTemplate(fn string) (*Presentation, error) {
	_feb, _gfc := Open(fn)
	if _gfc != nil {
		return nil, _gfc
	}
	return _feb, nil
}

// X returns the inner wrapped XML type.
func (_gg PlaceHolder) X() *_gd.CT_Shape { return _gg._ebe }

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{ _aadf *_gd.SldLayout }

// ClrMru returns the ClrMru property.
func (_gdg PresentationProperties) ClrMru() *_cbg.CT_ColorMRU { return _gdg._ac.ClrMru }

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_eebe SlideMaster) SlideLayouts() []SlideLayout {
	_ece := map[string]int{}
	_cef := []SlideLayout{}
	for _, _eefd := range _eebe._bace.Relationships() {
		_bfga := _gf.Replace(_eefd.Target(), ".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074", "", -1)
		_bfga = _gf.Replace(_bfga, "\u002e\u0078\u006d\u006c", "", -1)
		if _afd, _cfbe := _a.ParseInt(_bfga, 10, 32); _cfbe == nil {
			_ece[_eefd.ID()] = int(_afd)
		}
	}
	for _, _efa := range _eebe._bca.SldLayoutIdLst.SldLayoutId {
		if _bcfg, _aedb := _ece[_efa.RIdAttr]; _aedb {
			_gbbg := _eebe._bfe._gba[_bcfg-1]
			_cef = append(_cef, SlideLayout{_gbbg})
		}
	}
	return _cef
}

func (_eacac TextBox) getOff() *_cbg.CT_Point2D {
	if _eacac._ebdd.SpPr == nil {
		_eacac._ebdd.SpPr = _cbg.NewCT_ShapeProperties()
	}
	if _eacac._ebdd.SpPr.Xfrm == nil {
		_eacac._ebdd.SpPr.Xfrm = _cbg.NewCT_Transform2D()
	}
	if _eacac._ebdd.SpPr.Xfrm.Off == nil {
		_eacac._ebdd.SpPr.Xfrm.Off = _cbg.NewCT_Point2D()
	}
	return _eacac._ebdd.SpPr.Xfrm.Off
}

// NotesTextViewPr returns the NotesTextViewPr property.
func (_ecgd ViewProperties) NotesTextViewPr() *_gd.CT_NotesTextViewProperties {
	return _ecgd._dde.NotesTextViewPr
}

// LastViewAttr returns the LastViewAttr property.
func (_aaegc ViewProperties) LastViewAttr() _gd.ST_ViewType { return _aaegc._dde.LastViewAttr }

// ExtLst returns the ExtLst property.
func (_ccdd ViewProperties) ExtLst() *_gd.CT_ExtensionList { return _ccdd._dde.ExtLst }

// Open opens and reads a document from a file (.pptx).
func Open(filename string) (*Presentation, error) {
	_ec, _fc := _bgc.Open(filename)
	if _fc != nil {
		return nil, _cb.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _fc)
	}
	defer _ec.Close()
	_cd, _fc := _bgc.Stat(filename)
	if _fc != nil {
		return nil, _cb.Errorf("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073", filename, _fc)
	}
	_ = _cd
	return Read(_ec, _cd.Size())
}

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_fdg *Presentation) SaveAsTemplate(w _cfd.Writer) error { return _fdg.save(w, true) }

// WebPr returns the WebPr property.
func (_fa PresentationProperties) WebPr() *_gd.CT_WebProperties { return _fa._ac.WebPr }

// X returns the inner wrapped XML type.
func (_fba PresentationProperties) X() *_gd.PresentationPr { return _fba._ac }

// SetTextAnchor controls the text anchoring
func (_cbca TextBox) SetTextAnchor(a _cbg.ST_TextAnchoringType) {
	_cbca._ebdd.TxBody.BodyPr = _cbg.NewCT_TextBodyProperties()
	_cbca._ebdd.TxBody.BodyPr.AnchorAttr = a
}

// HtmlPubPr returns the HtmlPubPr property.
func (_ggd PresentationProperties) HtmlPubPr() *_gd.CT_HtmlPublishProperties {
	return _ggd._ac.HtmlPubPr
}

// Name returns the name of the slide layout.
func (_ffga SlideLayout) Name() string {
	if _ffga._aadf.CSld != nil && _ffga._aadf.CSld.NameAttr != nil {
		return *_ffga._aadf.CSld.NameAttr
	}
	return ""
}

// Slides returns the slides in the presentation.
func (_fccg *Presentation) Slides() []Slide {
	_cdb := []Slide{}
	for _fceb, _eaca := range _fccg._ca {
		_cdb = append(_cdb, Slide{_fccg._cfdc.SldIdLst.SldId[_fceb], _eaca, _fccg})
	}
	return _cdb
}

// Properties returns the properties of the TextBox.
func (_be Image) Properties() _gb.ShapeProperties {
	if _be._bc.SpPr == nil {
		_be._bc.SpPr = _cbg.NewCT_ShapeProperties()
	}
	return _gb.MakeShapeProperties(_be._bc.SpPr)
}

// AddSlide adds a new slide to the presentation.
func (_cdc *Presentation) AddSlide() Slide {
	_fca := _gd.NewCT_SlideIdListEntry()
	_fca.IdAttr = _cdc.nextSlideID()
	_cdc._cfdc.SldIdLst.SldId = append(_cdc._cfdc.SldIdLst.SldId, _fca)
	_eed := _gd.NewSld()
	_eed.CSld.SpTree.NvGrpSpPr.CNvPr.IdAttr = 1
	_eed.CSld.SpTree.GrpSpPr.Xfrm = _cbg.NewCT_GroupTransform2D()
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Off = _cbg.NewCT_Point2D()
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Off.XAttr.ST_CoordinateUnqualified = _eb.Int64(0)
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Off.YAttr.ST_CoordinateUnqualified = _eb.Int64(0)
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Ext = _cbg.NewCT_PositiveSize2D()
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Ext.CxAttr = int64(0 * _f.Point)
	_eed.CSld.SpTree.GrpSpPr.Xfrm.Ext.CyAttr = int64(0 * _f.Point)
	_eed.CSld.SpTree.GrpSpPr.Xfrm.ChOff = _eed.CSld.SpTree.GrpSpPr.Xfrm.Off
	_eed.CSld.SpTree.GrpSpPr.Xfrm.ChExt = _eed.CSld.SpTree.GrpSpPr.Xfrm.Ext
	_cdc._ca = append(_cdc._ca, _eed)
	_aae := _cdc._ag.AddAutoRelationship(_eb.DocTypePresentation, _eb.OfficeDocumentType, len(_cdc._ca), _eb.SlideType)
	_fca.RIdAttr = _aae.ID()
	_ba := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideType, len(_cdc._ca))
	_cdc.ContentTypes.AddOverride(_ba, _eb.SlideContentType)
	_cba := _b.NewRelationships()
	_cdc._aad = append(_cdc._aad, _cba)
	_cba.AddAutoRelationship(_eb.DocTypePresentation, _eb.SlideType, len(_cdc._gba), _eb.SlideLayoutType)
	return Slide{_fca, _eed, _cdc}
}

// Remove removes a placeholder from a presentation.
func (_aaf PlaceHolder) Remove() error {
	for _fb, _bcf := range _aaf._gbb.CSld.SpTree.Choice {
		for _, _df := range _bcf.Sp {
			if _df == _aaf._ebe {
				copy(_aaf._gbb.CSld.SpTree.Choice[_fb:], _aaf._gbb.CSld.SpTree.Choice[_fb+1:])
				_aaf._gbb.CSld.SpTree.Choice = _aaf._gbb.CSld.SpTree.Choice[0 : len(_aaf._gbb.CSld.SpTree.Choice)-1]
				return nil
			}
		}
	}
	return _ea.New("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065")
}

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties() ViewProperties { return ViewProperties{_dde: _gd.NewViewPr()} }

func _feea(_gec []*_gd.CT_GroupShapeChoice) []*_gd.CT_GroupShapeChoice {
	var _bdg []*_gd.CT_GroupShapeChoice
	for _, _fabd := range _gec {
		if len(_fabd.Pic) == 0 {
			_bdg = append(_bdg, _fabd)
		}
	}
	return _bdg
}

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_edac TextBox) SetOffsetY(offY float64) {
	_caed := _edac.getOff()
	_eec := _f.ToEMU(offY)
	_caed.YAttr = _cbg.ST_Coordinate{ST_CoordinateUnqualified: &_eec}
}

func (_fdd *Presentation) nextSlideID() uint32 {
	_fee := uint32(256)
	for _, _fab := range _fdd._cfdc.SldIdLst.SldId {
		if _fab.IdAttr >= _fee {
			_fee = _fab.IdAttr + 1
		}
	}
	return _fee
}

// RemoveSlide removes a slide from a presentation.
func (_fafa *Presentation) RemoveSlide(s Slide) error {
	_gfcd := false
	_bdbf := 0
	for _ege, _ccd := range _fafa._ca {
		if _ccd == s._fddg {
			if _fafa._cfdc.SldIdLst.SldId[_ege] != s._edg {
				return _ea.New("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074")
			}
			copy(_fafa._ca[_ege:], _fafa._ca[_ege+1:])
			_fafa._ca = _fafa._ca[0 : len(_fafa._ca)-1]
			copy(_fafa._aad[_ege:], _fafa._aad[_ege+1:])
			_fafa._aad = _fafa._aad[0 : len(_fafa._aad)-1]
			copy(_fafa._cfdc.SldIdLst.SldId[_ege:], _fafa._cfdc.SldIdLst.SldId[_ege+1:])
			_fafa._cfdc.SldIdLst.SldId = _fafa._cfdc.SldIdLst.SldId[0 : len(_fafa._cfdc.SldIdLst.SldId)-1]
			_gfcd = true
			_bdbf = _ege
		}
	}
	if !_gfcd {
		return _ea.New("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065")
	}
	_dbeg := _eb.AbsoluteFilename(_eb.DocTypePresentation, _eb.SlideType, 0)
	return _fafa.ContentTypes.RemoveOverrideByIndex(_dbeg, _bdbf)
}

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct {
	_ebe *_gd.CT_Shape
	_gbb *_gd.Sld
}
